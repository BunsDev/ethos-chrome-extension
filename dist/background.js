/******/ (() => {
  // webpackBootstrap
  /******/ var __webpack_modules__ = {
    /***/ "../node_modules/aes-js/index.js":
      /*!***************************************!*\
  !*** ../node_modules/aes-js/index.js ***!
  \***************************************/
      /***/ function (module) {
        /*! MIT License. Copyright 2015-2018 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */
        (function (root) {
          "use strict";

          function checkInt(value) {
            return parseInt(value) === value;
          }

          function checkInts(arrayish) {
            if (!checkInt(arrayish.length)) {
              return false;
            }

            for (var i = 0; i < arrayish.length; i++) {
              if (
                !checkInt(arrayish[i]) ||
                arrayish[i] < 0 ||
                arrayish[i] > 255
              ) {
                return false;
              }
            }

            return true;
          }

          function coerceArray(arg, copy) {
            // ArrayBuffer view
            if (arg.buffer && arg.name === "Uint8Array") {
              if (copy) {
                if (arg.slice) {
                  arg = arg.slice();
                } else {
                  arg = Array.prototype.slice.call(arg);
                }
              }

              return arg;
            }

            // It's an array; check it is a valid representation of a byte
            if (Array.isArray(arg)) {
              if (!checkInts(arg)) {
                throw new Error("Array contains invalid value: " + arg);
              }

              return new Uint8Array(arg);
            }

            // Something else, but behaves like an array (maybe a Buffer? Arguments?)
            if (checkInt(arg.length) && checkInts(arg)) {
              return new Uint8Array(arg);
            }

            throw new Error("unsupported array-like object");
          }

          function createArray(length) {
            return new Uint8Array(length);
          }

          function copyArray(
            sourceArray,
            targetArray,
            targetStart,
            sourceStart,
            sourceEnd
          ) {
            if (sourceStart != null || sourceEnd != null) {
              if (sourceArray.slice) {
                sourceArray = sourceArray.slice(sourceStart, sourceEnd);
              } else {
                sourceArray = Array.prototype.slice.call(
                  sourceArray,
                  sourceStart,
                  sourceEnd
                );
              }
            }
            targetArray.set(sourceArray, targetStart);
          }

          var convertUtf8 = (function () {
            function toBytes(text) {
              var result = [],
                i = 0;
              text = encodeURI(text);
              while (i < text.length) {
                var c = text.charCodeAt(i++);

                // if it is a % sign, encode the following 2 bytes as a hex value
                if (c === 37) {
                  result.push(parseInt(text.substr(i, 2), 16));
                  i += 2;

                  // otherwise, just the actual byte
                } else {
                  result.push(c);
                }
              }

              return coerceArray(result);
            }

            function fromBytes(bytes) {
              var result = [],
                i = 0;

              while (i < bytes.length) {
                var c = bytes[i];

                if (c < 128) {
                  result.push(String.fromCharCode(c));
                  i++;
                } else if (c > 191 && c < 224) {
                  result.push(
                    String.fromCharCode(
                      ((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)
                    )
                  );
                  i += 2;
                } else {
                  result.push(
                    String.fromCharCode(
                      ((c & 0x0f) << 12) |
                        ((bytes[i + 1] & 0x3f) << 6) |
                        (bytes[i + 2] & 0x3f)
                    )
                  );
                  i += 3;
                }
              }

              return result.join("");
            }

            return {
              toBytes: toBytes,
              fromBytes: fromBytes,
            };
          })();

          var convertHex = (function () {
            function toBytes(text) {
              var result = [];
              for (var i = 0; i < text.length; i += 2) {
                result.push(parseInt(text.substr(i, 2), 16));
              }

              return result;
            }

            // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
            var Hex = "0123456789abcdef";

            function fromBytes(bytes) {
              var result = [];
              for (var i = 0; i < bytes.length; i++) {
                var v = bytes[i];
                result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
              }
              return result.join("");
            }

            return {
              toBytes: toBytes,
              fromBytes: fromBytes,
            };
          })();

          // Number of rounds by keysize
          var numberOfRounds = { 16: 10, 24: 12, 32: 14 };

          // Round constant words
          var rcon = [
            0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,
            0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
            0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91,
          ];

          // S-box and Inverse S-box (S is for Substitution)
          var S = [
            0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67,
            0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59,
            0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7,
            0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1,
            0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05,
            0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83,
            0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29,
            0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
            0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa,
            0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c,
            0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
            0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
            0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
            0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee,
            0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49,
            0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
            0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4,
            0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6,
            0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
            0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9,
            0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e,
            0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1,
            0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0,
            0x54, 0xbb, 0x16,
          ];
          var Si = [
            0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3,
            0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f,
            0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54,
            0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b,
            0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24,
            0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8,
            0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d,
            0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
            0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab,
            0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3,
            0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1,
            0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41,
            0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6,
            0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9,
            0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d,
            0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
            0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0,
            0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07,
            0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60,
            0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f,
            0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5,
            0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b,
            0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55,
            0x21, 0x0c, 0x7d,
          ];

          // Transformations for encryption
          var T1 = [
            0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d,
            0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103,
            0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6,
            0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87,
            0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec,
            0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7,
            0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae,
            0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f,
            0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193,
            0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752,
            0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f,
            0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d,
            0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b,
            0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2,
            0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661,
            0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497,
            0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060,
            0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46,
            0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8,
            0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16,
            0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf,
            0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44,
            0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0,
            0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504,
            0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030,
            0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14,
            0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc,
            0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47,
            0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0,
            0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e,
            0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3,
            0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76,
            0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db,
            0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e,
            0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437,
            0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7,
            0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4,
            0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e,
            0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f,
            0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651,
            0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd,
            0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42,
            0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601,
            0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0,
            0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138,
            0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970,
            0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792,
            0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a,
            0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda,
            0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0,
            0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6,
            0x2c16163a,
          ];
          var T2 = [
            0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2,
            0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101,
            0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab,
            0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d,
            0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad,
            0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4,
            0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393,
            0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc,
            0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171,
            0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7,
            0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505,
            0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2,
            0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909,
            0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e,
            0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6,
            0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484,
            0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020,
            0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb,
            0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858,
            0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb,
            0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545,
            0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c,
            0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040,
            0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5,
            0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010,
            0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c,
            0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444,
            0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d,
            0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060,
            0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a,
            0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8,
            0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb,
            0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949,
            0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3,
            0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4,
            0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d,
            0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c,
            0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a,
            0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525,
            0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6,
            0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b,
            0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e,
            0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6,
            0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9,
            0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1,
            0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9,
            0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787,
            0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf,
            0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf,
            0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999,
            0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb,
            0x3a2c1616,
          ];
          var T3 = [
            0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2,
            0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201,
            0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab,
            0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d,
            0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad,
            0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4,
            0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93,
            0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc,
            0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271,
            0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7,
            0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05,
            0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2,
            0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209,
            0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e,
            0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6,
            0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384,
            0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020,
            0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb,
            0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058,
            0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb,
            0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45,
            0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c,
            0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040,
            0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5,
            0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010,
            0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c,
            0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844,
            0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d,
            0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060,
            0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a,
            0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8,
            0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb,
            0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249,
            0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3,
            0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4,
            0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d,
            0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c,
            0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a,
            0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25,
            0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6,
            0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b,
            0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e,
            0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6,
            0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9,
            0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1,
            0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9,
            0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587,
            0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df,
            0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf,
            0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999,
            0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb,
            0x163a2c16,
          ];
          var T4 = [
            0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff,
            0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302,
            0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d,
            0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa,
            0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41,
            0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753,
            0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d,
            0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83,
            0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2,
            0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295,
            0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a,
            0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf,
            0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12,
            0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc,
            0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7,
            0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713,
            0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040,
            0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d,
            0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0,
            0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed,
            0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a,
            0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478,
            0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080,
            0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1,
            0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020,
            0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418,
            0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88,
            0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a,
            0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0,
            0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54,
            0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b,
            0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad,
            0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92,
            0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd,
            0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3,
            0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da,
            0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8,
            0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4,
            0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a,
            0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197,
            0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96,
            0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c,
            0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7,
            0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069,
            0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9,
            0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9,
            0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215,
            0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5,
            0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65,
            0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029,
            0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d,
            0x16163a2c,
          ];

          // Transformations for decryption
          var T5 = [
            0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb,
            0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6,
            0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480,
            0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1,
            0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7,
            0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3,
            0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b,
            0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4,
            0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0,
            0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19,
            0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57,
            0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5,
            0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b,
            0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5,
            0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132,
            0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051,
            0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5,
            0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997,
            0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38,
            0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000,
            0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb,
            0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621,
            0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2,
            0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16,
            0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b,
            0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c,
            0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5,
            0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163,
            0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d,
            0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3,
            0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa,
            0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef,
            0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf,
            0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d,
            0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e,
            0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3,
            0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809,
            0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e,
            0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4,
            0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0,
            0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a,
            0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d,
            0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8,
            0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e,
            0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c,
            0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935,
            0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79,
            0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86,
            0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372,
            0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de,
            0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74,
            0xd0b85742,
          ];
          var T6 = [
            0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b,
            0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d,
            0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544,
            0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0,
            0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f,
            0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421,
            0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e,
            0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a,
            0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477,
            0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd,
            0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f,
            0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708,
            0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c,
            0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be,
            0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1,
            0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10,
            0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d,
            0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9,
            0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b,
            0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000,
            0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff,
            0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6,
            0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96,
            0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a,
            0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d,
            0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507,
            0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b,
            0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1,
            0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24,
            0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230,
            0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448,
            0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390,
            0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581,
            0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892,
            0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7,
            0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512,
            0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678,
            0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6,
            0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09,
            0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266,
            0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498,
            0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0,
            0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f,
            0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41,
            0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761,
            0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9,
            0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce,
            0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db,
            0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3,
            0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3,
            0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c,
            0x42d0b857,
          ];
          var T7 = [
            0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab,
            0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76,
            0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635,
            0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe,
            0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f,
            0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874,
            0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958,
            0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce,
            0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164,
            0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45,
            0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f,
            0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337,
            0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf,
            0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605,
            0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a,
            0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e,
            0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154,
            0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd,
            0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719,
            0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000,
            0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e,
            0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c,
            0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee,
            0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12,
            0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09,
            0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75,
            0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466,
            0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4,
            0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a,
            0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2,
            0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194,
            0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233,
            0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5,
            0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078,
            0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39,
            0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25,
            0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26,
            0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff,
            0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f,
            0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2,
            0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104,
            0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef,
            0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c,
            0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b,
            0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7,
            0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761,
            0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814,
            0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844,
            0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d,
            0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c,
            0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c,
            0x5742d0b8,
          ];
          var T8 = [
            0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b,
            0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad,
            0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026,
            0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d,
            0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703,
            0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358,
            0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99,
            0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d,
            0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1,
            0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f,
            0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3,
            0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3,
            0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a,
            0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506,
            0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205,
            0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd,
            0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591,
            0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6,
            0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7,
            0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000,
            0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd,
            0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168,
            0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4,
            0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c,
            0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e,
            0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf,
            0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544,
            0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8,
            0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85,
            0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc,
            0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11,
            0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22,
            0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6,
            0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50,
            0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e,
            0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf,
            0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd,
            0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa,
            0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea,
            0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035,
            0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1,
            0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43,
            0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1,
            0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb,
            0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a,
            0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7,
            0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918,
            0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678,
            0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216,
            0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08,
            0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448,
            0xb85742d0,
          ];

          // Transformations for decryption key expansion
          var U1 = [
            0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c,
            0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553,
            0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662,
            0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad,
            0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8,
            0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf,
            0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d,
            0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a,
            0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f,
            0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0,
            0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1,
            0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e,
            0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6,
            0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1,
            0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8,
            0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f,
            0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a,
            0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815,
            0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24,
            0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190,
            0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5,
            0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2,
            0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b,
            0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c,
            0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49,
            0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc,
            0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd,
            0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2,
            0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47,
            0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360,
            0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809,
            0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e,
            0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0,
            0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df,
            0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee,
            0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621,
            0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964,
            0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043,
            0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17,
            0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430,
            0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75,
            0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba,
            0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b,
            0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4,
            0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a,
            0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d,
            0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34,
            0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713,
            0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6,
            0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999,
            0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8,
            0x8d4697a3,
          ];
          var U2 = [
            0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434,
            0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165,
            0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46,
            0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7,
            0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8,
            0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581,
            0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1,
            0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498,
            0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7,
            0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266,
            0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45,
            0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814,
            0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d,
            0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54,
            0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f,
            0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126,
            0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289,
            0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8,
            0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb,
            0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1,
            0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be,
            0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887,
            0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c,
            0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225,
            0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a,
            0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7,
            0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4,
            0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5,
            0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a,
            0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133,
            0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678,
            0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41,
            0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355,
            0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604,
            0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927,
            0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6,
            0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9,
            0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0,
            0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad,
            0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594,
            0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb,
            0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a,
            0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49,
            0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918,
            0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c,
            0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35,
            0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e,
            0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647,
            0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8,
            0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9,
            0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a,
            0xa38d4697,
          ];
          var U3 = [
            0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824,
            0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41,
            0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e,
            0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b,
            0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8,
            0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5,
            0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729,
            0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104,
            0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357,
            0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2,
            0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d,
            0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8,
            0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76,
            0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b,
            0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c,
            0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701,
            0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2,
            0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7,
            0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998,
            0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456,
            0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605,
            0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028,
            0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf,
            0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2,
            0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1,
            0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5,
            0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da,
            0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf,
            0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c,
            0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751,
            0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26,
            0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b,
            0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3,
            0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496,
            0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9,
            0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c,
            0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f,
            0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22,
            0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088,
            0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5,
            0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6,
            0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203,
            0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c,
            0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59,
            0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1,
            0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c,
            0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb,
            0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6,
            0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15,
            0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970,
            0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f,
            0x97a38d46,
          ];
          var U4 = [
            0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38,
            0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e,
            0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254,
            0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2,
            0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890,
            0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6,
            0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7,
            0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1,
            0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93,
            0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035,
            0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f,
            0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59,
            0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad,
            0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b,
            0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1,
            0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7,
            0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75,
            0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533,
            0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419,
            0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064,
            0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506,
            0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230,
            0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a,
            0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc,
            0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de,
            0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f,
            0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65,
            0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223,
            0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1,
            0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097,
            0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd,
            0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb,
            0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2,
            0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4,
            0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece,
            0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168,
            0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a,
            0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c,
            0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0,
            0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6,
            0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4,
            0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02,
            0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28,
            0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e,
            0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37,
            0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01,
            0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b,
            0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d,
            0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef,
            0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9,
            0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883,
            0x4697a38d,
          ];

          function convertToInt32(bytes) {
            var result = [];
            for (var i = 0; i < bytes.length; i += 4) {
              result.push(
                (bytes[i] << 24) |
                  (bytes[i + 1] << 16) |
                  (bytes[i + 2] << 8) |
                  bytes[i + 3]
              );
            }
            return result;
          }

          var AES = function (key) {
            if (!(this instanceof AES)) {
              throw Error("AES must be instanitated with `new`");
            }

            Object.defineProperty(this, "key", {
              value: coerceArray(key, true),
            });

            this._prepare();
          };

          AES.prototype._prepare = function () {
            var rounds = numberOfRounds[this.key.length];
            if (rounds == null) {
              throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
            }

            // encryption round keys
            this._Ke = [];

            // decryption round keys
            this._Kd = [];

            for (var i = 0; i <= rounds; i++) {
              this._Ke.push([0, 0, 0, 0]);
              this._Kd.push([0, 0, 0, 0]);
            }

            var roundKeyCount = (rounds + 1) * 4;
            var KC = this.key.length / 4;

            // convert the key into ints
            var tk = convertToInt32(this.key);

            // copy values into round key arrays
            var index;
            for (var i = 0; i < KC; i++) {
              index = i >> 2;
              this._Ke[index][i % 4] = tk[i];
              this._Kd[rounds - index][i % 4] = tk[i];
            }

            // key expansion (fips-197 section 5.2)
            var rconpointer = 0;
            var t = KC,
              tt;
            while (t < roundKeyCount) {
              tt = tk[KC - 1];
              tk[0] ^=
                (S[(tt >> 16) & 0xff] << 24) ^
                (S[(tt >> 8) & 0xff] << 16) ^
                (S[tt & 0xff] << 8) ^
                S[(tt >> 24) & 0xff] ^
                (rcon[rconpointer] << 24);
              rconpointer += 1;

              // key expansion (for non-256 bit)
              if (KC != 8) {
                for (var i = 1; i < KC; i++) {
                  tk[i] ^= tk[i - 1];
                }

                // key expansion for 256-bit keys is "slightly different" (fips-197)
              } else {
                for (var i = 1; i < KC / 2; i++) {
                  tk[i] ^= tk[i - 1];
                }
                tt = tk[KC / 2 - 1];

                tk[KC / 2] ^=
                  S[tt & 0xff] ^
                  (S[(tt >> 8) & 0xff] << 8) ^
                  (S[(tt >> 16) & 0xff] << 16) ^
                  (S[(tt >> 24) & 0xff] << 24);

                for (var i = KC / 2 + 1; i < KC; i++) {
                  tk[i] ^= tk[i - 1];
                }
              }

              // copy values into round key arrays
              var i = 0,
                r,
                c;
              while (i < KC && t < roundKeyCount) {
                r = t >> 2;
                c = t % 4;
                this._Ke[r][c] = tk[i];
                this._Kd[rounds - r][c] = tk[i++];
                t++;
              }
            }

            // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
            for (var r = 1; r < rounds; r++) {
              for (var c = 0; c < 4; c++) {
                tt = this._Kd[r][c];
                this._Kd[r][c] =
                  U1[(tt >> 24) & 0xff] ^
                  U2[(tt >> 16) & 0xff] ^
                  U3[(tt >> 8) & 0xff] ^
                  U4[tt & 0xff];
              }
            }
          };

          AES.prototype.encrypt = function (plaintext) {
            if (plaintext.length != 16) {
              throw new Error("invalid plaintext size (must be 16 bytes)");
            }

            var rounds = this._Ke.length - 1;
            var a = [0, 0, 0, 0];

            // convert plaintext to (ints ^ key)
            var t = convertToInt32(plaintext);
            for (var i = 0; i < 4; i++) {
              t[i] ^= this._Ke[0][i];
            }

            // apply round transforms
            for (var r = 1; r < rounds; r++) {
              for (var i = 0; i < 4; i++) {
                a[i] =
                  T1[(t[i] >> 24) & 0xff] ^
                  T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
                  T3[(t[(i + 2) % 4] >> 8) & 0xff] ^
                  T4[t[(i + 3) % 4] & 0xff] ^
                  this._Ke[r][i];
              }
              t = a.slice();
            }

            // the last round is special
            var result = createArray(16),
              tt;
            for (var i = 0; i < 4; i++) {
              tt = this._Ke[rounds][i];
              result[4 * i] = (S[(t[i] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
              result[4 * i + 1] =
                (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
              result[4 * i + 2] =
                (S[(t[(i + 2) % 4] >> 8) & 0xff] ^ (tt >> 8)) & 0xff;
              result[4 * i + 3] = (S[t[(i + 3) % 4] & 0xff] ^ tt) & 0xff;
            }

            return result;
          };

          AES.prototype.decrypt = function (ciphertext) {
            if (ciphertext.length != 16) {
              throw new Error("invalid ciphertext size (must be 16 bytes)");
            }

            var rounds = this._Kd.length - 1;
            var a = [0, 0, 0, 0];

            // convert plaintext to (ints ^ key)
            var t = convertToInt32(ciphertext);
            for (var i = 0; i < 4; i++) {
              t[i] ^= this._Kd[0][i];
            }

            // apply round transforms
            for (var r = 1; r < rounds; r++) {
              for (var i = 0; i < 4; i++) {
                a[i] =
                  T5[(t[i] >> 24) & 0xff] ^
                  T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
                  T7[(t[(i + 2) % 4] >> 8) & 0xff] ^
                  T8[t[(i + 1) % 4] & 0xff] ^
                  this._Kd[r][i];
              }
              t = a.slice();
            }

            // the last round is special
            var result = createArray(16),
              tt;
            for (var i = 0; i < 4; i++) {
              tt = this._Kd[rounds][i];
              result[4 * i] = (Si[(t[i] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
              result[4 * i + 1] =
                (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
              result[4 * i + 2] =
                (Si[(t[(i + 2) % 4] >> 8) & 0xff] ^ (tt >> 8)) & 0xff;
              result[4 * i + 3] = (Si[t[(i + 1) % 4] & 0xff] ^ tt) & 0xff;
            }

            return result;
          };

          /**
           *  Mode Of Operation - Electonic Codebook (ECB)
           */
          var ModeOfOperationECB = function (key) {
            if (!(this instanceof ModeOfOperationECB)) {
              throw Error("AES must be instanitated with `new`");
            }

            this.description = "Electronic Code Block";
            this.name = "ecb";

            this._aes = new AES(key);
          };

          ModeOfOperationECB.prototype.encrypt = function (plaintext) {
            plaintext = coerceArray(plaintext);

            if (plaintext.length % 16 !== 0) {
              throw new Error(
                "invalid plaintext size (must be multiple of 16 bytes)"
              );
            }

            var ciphertext = createArray(plaintext.length);
            var block = createArray(16);

            for (var i = 0; i < plaintext.length; i += 16) {
              copyArray(plaintext, block, 0, i, i + 16);
              block = this._aes.encrypt(block);
              copyArray(block, ciphertext, i);
            }

            return ciphertext;
          };

          ModeOfOperationECB.prototype.decrypt = function (ciphertext) {
            ciphertext = coerceArray(ciphertext);

            if (ciphertext.length % 16 !== 0) {
              throw new Error(
                "invalid ciphertext size (must be multiple of 16 bytes)"
              );
            }

            var plaintext = createArray(ciphertext.length);
            var block = createArray(16);

            for (var i = 0; i < ciphertext.length; i += 16) {
              copyArray(ciphertext, block, 0, i, i + 16);
              block = this._aes.decrypt(block);
              copyArray(block, plaintext, i);
            }

            return plaintext;
          };

          /**
           *  Mode Of Operation - Cipher Block Chaining (CBC)
           */
          var ModeOfOperationCBC = function (key, iv) {
            if (!(this instanceof ModeOfOperationCBC)) {
              throw Error("AES must be instanitated with `new`");
            }

            this.description = "Cipher Block Chaining";
            this.name = "cbc";

            if (!iv) {
              iv = createArray(16);
            } else if (iv.length != 16) {
              throw new Error(
                "invalid initialation vector size (must be 16 bytes)"
              );
            }

            this._lastCipherblock = coerceArray(iv, true);

            this._aes = new AES(key);
          };

          ModeOfOperationCBC.prototype.encrypt = function (plaintext) {
            plaintext = coerceArray(plaintext);

            if (plaintext.length % 16 !== 0) {
              throw new Error(
                "invalid plaintext size (must be multiple of 16 bytes)"
              );
            }

            var ciphertext = createArray(plaintext.length);
            var block = createArray(16);

            for (var i = 0; i < plaintext.length; i += 16) {
              copyArray(plaintext, block, 0, i, i + 16);

              for (var j = 0; j < 16; j++) {
                block[j] ^= this._lastCipherblock[j];
              }

              this._lastCipherblock = this._aes.encrypt(block);
              copyArray(this._lastCipherblock, ciphertext, i);
            }

            return ciphertext;
          };

          ModeOfOperationCBC.prototype.decrypt = function (ciphertext) {
            ciphertext = coerceArray(ciphertext);

            if (ciphertext.length % 16 !== 0) {
              throw new Error(
                "invalid ciphertext size (must be multiple of 16 bytes)"
              );
            }

            var plaintext = createArray(ciphertext.length);
            var block = createArray(16);

            for (var i = 0; i < ciphertext.length; i += 16) {
              copyArray(ciphertext, block, 0, i, i + 16);
              block = this._aes.decrypt(block);

              for (var j = 0; j < 16; j++) {
                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
              }

              copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
            }

            return plaintext;
          };

          /**
           *  Mode Of Operation - Cipher Feedback (CFB)
           */
          var ModeOfOperationCFB = function (key, iv, segmentSize) {
            if (!(this instanceof ModeOfOperationCFB)) {
              throw Error("AES must be instanitated with `new`");
            }

            this.description = "Cipher Feedback";
            this.name = "cfb";

            if (!iv) {
              iv = createArray(16);
            } else if (iv.length != 16) {
              throw new Error(
                "invalid initialation vector size (must be 16 size)"
              );
            }

            if (!segmentSize) {
              segmentSize = 1;
            }

            this.segmentSize = segmentSize;

            this._shiftRegister = coerceArray(iv, true);

            this._aes = new AES(key);
          };

          ModeOfOperationCFB.prototype.encrypt = function (plaintext) {
            if (plaintext.length % this.segmentSize != 0) {
              throw new Error(
                "invalid plaintext size (must be segmentSize bytes)"
              );
            }

            var encrypted = coerceArray(plaintext, true);

            var xorSegment;
            for (var i = 0; i < encrypted.length; i += this.segmentSize) {
              xorSegment = this._aes.encrypt(this._shiftRegister);
              for (var j = 0; j < this.segmentSize; j++) {
                encrypted[i + j] ^= xorSegment[j];
              }

              // Shift the register
              copyArray(
                this._shiftRegister,
                this._shiftRegister,
                0,
                this.segmentSize
              );
              copyArray(
                encrypted,
                this._shiftRegister,
                16 - this.segmentSize,
                i,
                i + this.segmentSize
              );
            }

            return encrypted;
          };

          ModeOfOperationCFB.prototype.decrypt = function (ciphertext) {
            if (ciphertext.length % this.segmentSize != 0) {
              throw new Error(
                "invalid ciphertext size (must be segmentSize bytes)"
              );
            }

            var plaintext = coerceArray(ciphertext, true);

            var xorSegment;
            for (var i = 0; i < plaintext.length; i += this.segmentSize) {
              xorSegment = this._aes.encrypt(this._shiftRegister);

              for (var j = 0; j < this.segmentSize; j++) {
                plaintext[i + j] ^= xorSegment[j];
              }

              // Shift the register
              copyArray(
                this._shiftRegister,
                this._shiftRegister,
                0,
                this.segmentSize
              );
              copyArray(
                ciphertext,
                this._shiftRegister,
                16 - this.segmentSize,
                i,
                i + this.segmentSize
              );
            }

            return plaintext;
          };

          /**
           *  Mode Of Operation - Output Feedback (OFB)
           */
          var ModeOfOperationOFB = function (key, iv) {
            if (!(this instanceof ModeOfOperationOFB)) {
              throw Error("AES must be instanitated with `new`");
            }

            this.description = "Output Feedback";
            this.name = "ofb";

            if (!iv) {
              iv = createArray(16);
            } else if (iv.length != 16) {
              throw new Error(
                "invalid initialation vector size (must be 16 bytes)"
              );
            }

            this._lastPrecipher = coerceArray(iv, true);
            this._lastPrecipherIndex = 16;

            this._aes = new AES(key);
          };

          ModeOfOperationOFB.prototype.encrypt = function (plaintext) {
            var encrypted = coerceArray(plaintext, true);

            for (var i = 0; i < encrypted.length; i++) {
              if (this._lastPrecipherIndex === 16) {
                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
                this._lastPrecipherIndex = 0;
              }
              encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
            }

            return encrypted;
          };

          // Decryption is symetric
          ModeOfOperationOFB.prototype.decrypt =
            ModeOfOperationOFB.prototype.encrypt;

          /**
           *  Counter object for CTR common mode of operation
           */
          var Counter = function (initialValue) {
            if (!(this instanceof Counter)) {
              throw Error("Counter must be instanitated with `new`");
            }

            // We allow 0, but anything false-ish uses the default 1
            if (initialValue !== 0 && !initialValue) {
              initialValue = 1;
            }

            if (typeof initialValue === "number") {
              this._counter = createArray(16);
              this.setValue(initialValue);
            } else {
              this.setBytes(initialValue);
            }
          };

          Counter.prototype.setValue = function (value) {
            if (typeof value !== "number" || parseInt(value) != value) {
              throw new Error("invalid counter value (must be an integer)");
            }

            // We cannot safely handle numbers beyond the safe range for integers
            if (value > Number.MAX_SAFE_INTEGER) {
              throw new Error("integer value out of safe range");
            }

            for (var index = 15; index >= 0; --index) {
              this._counter[index] = value % 256;
              value = parseInt(value / 256);
            }
          };

          Counter.prototype.setBytes = function (bytes) {
            bytes = coerceArray(bytes, true);

            if (bytes.length != 16) {
              throw new Error("invalid counter bytes size (must be 16 bytes)");
            }

            this._counter = bytes;
          };

          Counter.prototype.increment = function () {
            for (var i = 15; i >= 0; i--) {
              if (this._counter[i] === 255) {
                this._counter[i] = 0;
              } else {
                this._counter[i]++;
                break;
              }
            }
          };

          /**
           *  Mode Of Operation - Counter (CTR)
           */
          var ModeOfOperationCTR = function (key, counter) {
            if (!(this instanceof ModeOfOperationCTR)) {
              throw Error("AES must be instanitated with `new`");
            }

            this.description = "Counter";
            this.name = "ctr";

            if (!(counter instanceof Counter)) {
              counter = new Counter(counter);
            }

            this._counter = counter;

            this._remainingCounter = null;
            this._remainingCounterIndex = 16;

            this._aes = new AES(key);
          };

          ModeOfOperationCTR.prototype.encrypt = function (plaintext) {
            var encrypted = coerceArray(plaintext, true);

            for (var i = 0; i < encrypted.length; i++) {
              if (this._remainingCounterIndex === 16) {
                this._remainingCounter = this._aes.encrypt(
                  this._counter._counter
                );
                this._remainingCounterIndex = 0;
                this._counter.increment();
              }
              encrypted[i] ^=
                this._remainingCounter[this._remainingCounterIndex++];
            }

            return encrypted;
          };

          // Decryption is symetric
          ModeOfOperationCTR.prototype.decrypt =
            ModeOfOperationCTR.prototype.encrypt;

          ///////////////////////
          // Padding

          // See:https://tools.ietf.org/html/rfc2315
          function pkcs7pad(data) {
            data = coerceArray(data, true);
            var padder = 16 - (data.length % 16);
            var result = createArray(data.length + padder);
            copyArray(data, result);
            for (var i = data.length; i < result.length; i++) {
              result[i] = padder;
            }
            return result;
          }

          function pkcs7strip(data) {
            data = coerceArray(data, true);
            if (data.length < 16) {
              throw new Error("PKCS#7 invalid length");
            }

            var padder = data[data.length - 1];
            if (padder > 16) {
              throw new Error("PKCS#7 padding byte out of range");
            }

            var length = data.length - padder;
            for (var i = 0; i < padder; i++) {
              if (data[length + i] !== padder) {
                throw new Error("PKCS#7 invalid padding byte");
              }
            }

            var result = createArray(length);
            copyArray(data, result, 0, 0, length);
            return result;
          }

          ///////////////////////
          // Exporting

          // The block cipher
          var aesjs = {
            AES: AES,
            Counter: Counter,

            ModeOfOperation: {
              ecb: ModeOfOperationECB,
              cbc: ModeOfOperationCBC,
              cfb: ModeOfOperationCFB,
              ofb: ModeOfOperationOFB,
              ctr: ModeOfOperationCTR,
            },

            utils: {
              hex: convertHex,
              utf8: convertUtf8,
            },

            padding: {
              pkcs7: {
                pad: pkcs7pad,
                strip: pkcs7strip,
              },
            },

            _arrayTest: {
              coerceArray: coerceArray,
              createArray: createArray,
              copyArray: copyArray,
            },
          };

          // node.js
          if (true) {
            module.exports = aesjs;

            // RequireJS/AMD
            // http://www.requirejs.org/docs/api.html
            // https://github.com/amdjs/amdjs-api/wiki/AMD
          } else {
          }
        })(this);

        /***/
      },

    /***/ "../node_modules/asmcrypto.js/asmcrypto.all.es8.js":
      /*!*********************************************************!*\
  !*** ../node_modules/asmcrypto.js/asmcrypto.all.es8.js ***!
  \*********************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ AES_CBC: () => /* binding */ AES_CBC,
          /* harmony export */ AES_CCM: () => /* binding */ AES_CCM,
          /* harmony export */ AES_CFB: () => /* binding */ AES_CFB,
          /* harmony export */ AES_CMAC: () => /* binding */ AES_CMAC,
          /* harmony export */ AES_CTR: () => /* binding */ AES_CTR,
          /* harmony export */ AES_ECB: () => /* binding */ AES_ECB,
          /* harmony export */ AES_GCM: () => /* binding */ AES_GCM,
          /* harmony export */ AES_OFB: () => /* binding */ AES_OFB,
          /* harmony export */ BigNumber: () => /* binding */ BigNumber,
          /* harmony export */ HmacSha1: () => /* binding */ HmacSha1,
          /* harmony export */ HmacSha256: () => /* binding */ HmacSha256,
          /* harmony export */ HmacSha512: () => /* binding */ HmacSha512,
          /* harmony export */ IllegalArgumentError: () =>
            /* binding */ IllegalArgumentError,
          /* harmony export */ IllegalStateError: () =>
            /* binding */ IllegalStateError,
          /* harmony export */ Modulus: () => /* binding */ Modulus,
          /* harmony export */ Pbkdf2HmacSha1: () =>
            /* binding */ Pbkdf2HmacSha1,
          /* harmony export */ Pbkdf2HmacSha256: () =>
            /* binding */ Pbkdf2HmacSha256,
          /* harmony export */ Pbkdf2HmacSha512: () =>
            /* binding */ Pbkdf2HmacSha512,
          /* harmony export */ RSA: () => /* binding */ RSA,
          /* harmony export */ RSA_OAEP: () => /* binding */ RSA_OAEP,
          /* harmony export */ RSA_PKCS1_v1_5: () =>
            /* binding */ RSA_PKCS1_v1_5,
          /* harmony export */ RSA_PSS: () => /* binding */ RSA_PSS,
          /* harmony export */ SecurityError: () => /* binding */ SecurityError,
          /* harmony export */ Sha1: () => /* binding */ Sha1,
          /* harmony export */ Sha256: () => /* binding */ Sha256,
          /* harmony export */ Sha512: () => /* binding */ Sha512,
          /* harmony export */ base64_to_bytes: () =>
            /* binding */ base64_to_bytes,
          /* harmony export */ bytes_to_base64: () =>
            /* binding */ bytes_to_base64,
          /* harmony export */ bytes_to_hex: () => /* binding */ bytes_to_hex,
          /* harmony export */ bytes_to_string: () =>
            /* binding */ bytes_to_string,
          /* harmony export */ hex_to_bytes: () => /* binding */ hex_to_bytes,
          /* harmony export */ string_to_bytes: () =>
            /* binding */ string_to_bytes,
          /* harmony export */
        });
        /* provided dependency */ var Buffer = __webpack_require__(
          /*! buffer */ "../node_modules/buffer/index.js"
        )["Buffer"];
        const local_atob =
          typeof atob === "undefined"
            ? (str) => Buffer.from(str, "base64").toString("binary")
            : atob;
        const local_btoa =
          typeof btoa === "undefined"
            ? (str) => Buffer.from(str, "binary").toString("base64")
            : btoa;
        function string_to_bytes(str, utf8 = false) {
          var len = str.length,
            bytes = new Uint8Array(utf8 ? 4 * len : len);
          for (var i = 0, j = 0; i < len; i++) {
            var c = str.charCodeAt(i);
            if (utf8 && 0xd800 <= c && c <= 0xdbff) {
              if (++i >= len)
                throw new Error(
                  "Malformed string, low surrogate expected at position " + i
                );
              c = ((c ^ 0xd800) << 10) | 0x10000 | (str.charCodeAt(i) ^ 0xdc00);
            } else if (!utf8 && c >>> 8) {
              throw new Error("Wide characters are not allowed.");
            }
            if (!utf8 || c <= 0x7f) {
              bytes[j++] = c;
            } else if (c <= 0x7ff) {
              bytes[j++] = 0xc0 | (c >> 6);
              bytes[j++] = 0x80 | (c & 0x3f);
            } else if (c <= 0xffff) {
              bytes[j++] = 0xe0 | (c >> 12);
              bytes[j++] = 0x80 | ((c >> 6) & 0x3f);
              bytes[j++] = 0x80 | (c & 0x3f);
            } else {
              bytes[j++] = 0xf0 | (c >> 18);
              bytes[j++] = 0x80 | ((c >> 12) & 0x3f);
              bytes[j++] = 0x80 | ((c >> 6) & 0x3f);
              bytes[j++] = 0x80 | (c & 0x3f);
            }
          }
          return bytes.subarray(0, j);
        }
        function hex_to_bytes(str) {
          var len = str.length;
          if (len & 1) {
            str = "0" + str;
            len++;
          }
          var bytes = new Uint8Array(len >> 1);
          for (var i = 0; i < len; i += 2) {
            bytes[i >> 1] = parseInt(str.substr(i, 2), 16);
          }
          return bytes;
        }
        function base64_to_bytes(str) {
          return string_to_bytes(local_atob(str));
        }
        function bytes_to_string(bytes, utf8 = false) {
          var len = bytes.length,
            chars = new Array(len);
          for (var i = 0, j = 0; i < len; i++) {
            var b = bytes[i];
            if (!utf8 || b < 128) {
              chars[j++] = b;
            } else if (b >= 192 && b < 224 && i + 1 < len) {
              chars[j++] = ((b & 0x1f) << 6) | (bytes[++i] & 0x3f);
            } else if (b >= 224 && b < 240 && i + 2 < len) {
              chars[j++] =
                ((b & 0xf) << 12) |
                ((bytes[++i] & 0x3f) << 6) |
                (bytes[++i] & 0x3f);
            } else if (b >= 240 && b < 248 && i + 3 < len) {
              var c =
                ((b & 7) << 18) |
                ((bytes[++i] & 0x3f) << 12) |
                ((bytes[++i] & 0x3f) << 6) |
                (bytes[++i] & 0x3f);
              if (c <= 0xffff) {
                chars[j++] = c;
              } else {
                c ^= 0x10000;
                chars[j++] = 0xd800 | (c >> 10);
                chars[j++] = 0xdc00 | (c & 0x3ff);
              }
            } else {
              throw new Error("Malformed UTF8 character at byte offset " + i);
            }
          }
          var str = "",
            bs = 16384;
          for (var i = 0; i < j; i += bs) {
            str += String.fromCharCode.apply(
              String,
              chars.slice(i, i + bs <= j ? i + bs : j)
            );
          }
          return str;
        }
        function bytes_to_hex(arr) {
          var str = "";
          for (var i = 0; i < arr.length; i++) {
            var h = (arr[i] & 0xff).toString(16);
            if (h.length < 2) str += "0";
            str += h;
          }
          return str;
        }
        function bytes_to_base64(arr) {
          return local_btoa(bytes_to_string(arr));
        }
        function is_bytes(a) {
          return a instanceof Uint8Array;
        }
        function _heap_init(heap, heapSize) {
          const size = heap ? heap.byteLength : heapSize || 65536;
          if (size & 0xfff || size <= 0)
            throw new Error(
              "heap size must be a positive integer and a multiple of 4096"
            );
          heap = heap || new Uint8Array(new ArrayBuffer(size));
          return heap;
        }
        function _heap_write(heap, hpos, data, dpos, dlen) {
          const hlen = heap.length - hpos;
          const wlen = hlen < dlen ? hlen : dlen;
          heap.set(data.subarray(dpos, dpos + wlen), hpos);
          return wlen;
        }
        function joinBytes(...arg) {
          const totalLenght = arg.reduce((sum, curr) => sum + curr.length, 0);
          const ret = new Uint8Array(totalLenght);
          let cursor = 0;
          for (let i = 0; i < arg.length; i++) {
            ret.set(arg[i], cursor);
            cursor += arg[i].length;
          }
          return ret;
        }

        /**
         * Util exports
         */

        class IllegalStateError extends Error {
          constructor(...args) {
            super(...args);
          }
        }
        class IllegalArgumentError extends Error {
          constructor(...args) {
            super(...args);
          }
        }
        class SecurityError extends Error {
          constructor(...args) {
            super(...args);
          }
        }

        /**
         * @file {@link http://asmjs.org Asm.js} implementation of the {@link https://en.wikipedia.org/wiki/Advanced_Encryption_Standard Advanced Encryption Standard}.
         * @author Artem S Vybornov <vybornov@gmail.com>
         * @license MIT
         */
        var AES_asm = (function () {
          /**
           * Galois Field stuff init flag
           */
          var ginit_done = false;

          /**
           * Galois Field exponentiation and logarithm tables for 3 (the generator)
           */
          var gexp3, glog3;

          /**
           * Init Galois Field tables
           */
          function ginit() {
            (gexp3 = []), (glog3 = []);

            var a = 1,
              c,
              d;
            for (c = 0; c < 255; c++) {
              gexp3[c] = a;

              // Multiply by three
              (d = a & 0x80), (a <<= 1), (a &= 255);
              if (d === 0x80) a ^= 0x1b;
              a ^= gexp3[c];

              // Set the log table value
              glog3[gexp3[c]] = c;
            }
            gexp3[255] = gexp3[0];
            glog3[0] = 0;

            ginit_done = true;
          }

          /**
           * Galois Field multiplication
           * @param {number} a
           * @param {number} b
           * @return {number}
           */
          function gmul(a, b) {
            var c = gexp3[(glog3[a] + glog3[b]) % 255];
            if (a === 0 || b === 0) c = 0;
            return c;
          }

          /**
           * Galois Field reciprocal
           * @param {number} a
           * @return {number}
           */
          function ginv(a) {
            var i = gexp3[255 - glog3[a]];
            if (a === 0) i = 0;
            return i;
          }

          /**
           * AES stuff init flag
           */
          var aes_init_done = false;

          /**
           * Encryption, Decryption, S-Box and KeyTransform tables
           *
           * @type {number[]}
           */
          var aes_sbox;

          /**
           * @type {number[]}
           */
          var aes_sinv;

          /**
           * @type {number[][]}
           */
          var aes_enc;

          /**
           * @type {number[][]}
           */
          var aes_dec;

          /**
           * Init AES tables
           */
          function aes_init() {
            if (!ginit_done) ginit();

            // Calculates AES S-Box value
            function _s(a) {
              var c, s, x;
              s = x = ginv(a);
              for (c = 0; c < 4; c++) {
                s = ((s << 1) | (s >>> 7)) & 255;
                x ^= s;
              }
              x ^= 99;
              return x;
            }

            // Tables
            (aes_sbox = []),
              (aes_sinv = []),
              (aes_enc = [[], [], [], []]),
              (aes_dec = [[], [], [], []]);

            for (var i = 0; i < 256; i++) {
              var s = _s(i);

              // S-Box and its inverse
              aes_sbox[i] = s;
              aes_sinv[s] = i;

              // Ecryption and Decryption tables
              aes_enc[0][i] =
                (gmul(2, s) << 24) | (s << 16) | (s << 8) | gmul(3, s);
              aes_dec[0][s] =
                (gmul(14, i) << 24) |
                (gmul(9, i) << 16) |
                (gmul(13, i) << 8) |
                gmul(11, i);
              // Rotate tables
              for (var t = 1; t < 4; t++) {
                aes_enc[t][i] =
                  (aes_enc[t - 1][i] >>> 8) | (aes_enc[t - 1][i] << 24);
                aes_dec[t][s] =
                  (aes_dec[t - 1][s] >>> 8) | (aes_dec[t - 1][s] << 24);
              }
            }

            aes_init_done = true;
          }

          /**
           * Asm.js module constructor.
           *
           * <p>
           * Heap buffer layout by offset:
           * <pre>
           * 0x0000   encryption key schedule
           * 0x0400   decryption key schedule
           * 0x0800   sbox
           * 0x0c00   inv sbox
           * 0x1000   encryption tables
           * 0x2000   decryption tables
           * 0x3000   reserved (future GCM multiplication lookup table)
           * 0x4000   data
           * </pre>
           * Don't touch anything before <code>0x400</code>.
           * </p>
           *
           * @alias AES_asm
           * @class
           * @param foreign - <i>ignored</i>
           * @param buffer - heap buffer to link with
           */
          var wrapper = function (foreign, buffer) {
            // Init AES stuff for the first time
            if (!aes_init_done) aes_init();

            // Fill up AES tables
            var heap = new Uint32Array(buffer);
            heap.set(aes_sbox, 0x0800 >> 2);
            heap.set(aes_sinv, 0x0c00 >> 2);
            for (var i = 0; i < 4; i++) {
              heap.set(aes_enc[i], (0x1000 + 0x400 * i) >> 2);
              heap.set(aes_dec[i], (0x2000 + 0x400 * i) >> 2);
            }

            /**
             * Calculate AES key schedules.
             * @instance
             * @memberof AES_asm
             * @param {number} ks - key size, 4/6/8 (for 128/192/256-bit key correspondingly)
             * @param {number} k0 - key vector components
             * @param {number} k1 - key vector components
             * @param {number} k2 - key vector components
             * @param {number} k3 - key vector components
             * @param {number} k4 - key vector components
             * @param {number} k5 - key vector components
             * @param {number} k6 - key vector components
             * @param {number} k7 - key vector components
             */
            function set_key(ks, k0, k1, k2, k3, k4, k5, k6, k7) {
              var ekeys = heap.subarray(0x000, 60),
                dkeys = heap.subarray(0x100, 0x100 + 60);

              // Encryption key schedule
              ekeys.set([k0, k1, k2, k3, k4, k5, k6, k7]);
              for (var i = ks, rcon = 1; i < 4 * ks + 28; i++) {
                var k = ekeys[i - 1];
                if (i % ks === 0 || (ks === 8 && i % ks === 4)) {
                  k =
                    (aes_sbox[k >>> 24] << 24) ^
                    (aes_sbox[(k >>> 16) & 255] << 16) ^
                    (aes_sbox[(k >>> 8) & 255] << 8) ^
                    aes_sbox[k & 255];
                }
                if (i % ks === 0) {
                  k = (k << 8) ^ (k >>> 24) ^ (rcon << 24);
                  rcon = (rcon << 1) ^ (rcon & 0x80 ? 0x1b : 0);
                }
                ekeys[i] = ekeys[i - ks] ^ k;
              }

              // Decryption key schedule
              for (var j = 0; j < i; j += 4) {
                for (var jj = 0; jj < 4; jj++) {
                  var k = ekeys[i - (4 + j) + ((4 - jj) % 4)];
                  if (j < 4 || j >= i - 4) {
                    dkeys[j + jj] = k;
                  } else {
                    dkeys[j + jj] =
                      aes_dec[0][aes_sbox[k >>> 24]] ^
                      aes_dec[1][aes_sbox[(k >>> 16) & 255]] ^
                      aes_dec[2][aes_sbox[(k >>> 8) & 255]] ^
                      aes_dec[3][aes_sbox[k & 255]];
                  }
                }
              }

              // Set rounds number
              asm.set_rounds(ks + 5);
            }

            // create library object with necessary properties
            var stdlib = { Uint8Array: Uint8Array, Uint32Array: Uint32Array };

            var asm = (function (stdlib, foreign, buffer) {
              "use asm";

              var S0 = 0,
                S1 = 0,
                S2 = 0,
                S3 = 0,
                I0 = 0,
                I1 = 0,
                I2 = 0,
                I3 = 0,
                N0 = 0,
                N1 = 0,
                N2 = 0,
                N3 = 0,
                M0 = 0,
                M1 = 0,
                M2 = 0,
                M3 = 0,
                H0 = 0,
                H1 = 0,
                H2 = 0,
                H3 = 0,
                R = 0;

              var HEAP = new stdlib.Uint32Array(buffer),
                DATA = new stdlib.Uint8Array(buffer);

              /**
               * AES core
               * @param {number} k - precomputed key schedule offset
               * @param {number} s - precomputed sbox table offset
               * @param {number} t - precomputed round table offset
               * @param {number} r - number of inner rounds to perform
               * @param {number} x0 - 128-bit input block vector
               * @param {number} x1 - 128-bit input block vector
               * @param {number} x2 - 128-bit input block vector
               * @param {number} x3 - 128-bit input block vector
               */
              function _core(k, s, t, r, x0, x1, x2, x3) {
                k = k | 0;
                s = s | 0;
                t = t | 0;
                r = r | 0;
                x0 = x0 | 0;
                x1 = x1 | 0;
                x2 = x2 | 0;
                x3 = x3 | 0;

                var t1 = 0,
                  t2 = 0,
                  t3 = 0,
                  y0 = 0,
                  y1 = 0,
                  y2 = 0,
                  y3 = 0,
                  i = 0;

                (t1 = t | 0x400), (t2 = t | 0x800), (t3 = t | 0xc00);

                // round 0
                (x0 = x0 ^ HEAP[(k | 0) >> 2]),
                  (x1 = x1 ^ HEAP[(k | 4) >> 2]),
                  (x2 = x2 ^ HEAP[(k | 8) >> 2]),
                  (x3 = x3 ^ HEAP[(k | 12) >> 2]);

                // round 1..r
                for (i = 16; (i | 0) <= r << 4; i = (i + 16) | 0) {
                  (y0 =
                    HEAP[(t | ((x0 >> 22) & 1020)) >> 2] ^
                    HEAP[(t1 | ((x1 >> 14) & 1020)) >> 2] ^
                    HEAP[(t2 | ((x2 >> 6) & 1020)) >> 2] ^
                    HEAP[(t3 | ((x3 << 2) & 1020)) >> 2] ^
                    HEAP[(k | i | 0) >> 2]),
                    (y1 =
                      HEAP[(t | ((x1 >> 22) & 1020)) >> 2] ^
                      HEAP[(t1 | ((x2 >> 14) & 1020)) >> 2] ^
                      HEAP[(t2 | ((x3 >> 6) & 1020)) >> 2] ^
                      HEAP[(t3 | ((x0 << 2) & 1020)) >> 2] ^
                      HEAP[(k | i | 4) >> 2]),
                    (y2 =
                      HEAP[(t | ((x2 >> 22) & 1020)) >> 2] ^
                      HEAP[(t1 | ((x3 >> 14) & 1020)) >> 2] ^
                      HEAP[(t2 | ((x0 >> 6) & 1020)) >> 2] ^
                      HEAP[(t3 | ((x1 << 2) & 1020)) >> 2] ^
                      HEAP[(k | i | 8) >> 2]),
                    (y3 =
                      HEAP[(t | ((x3 >> 22) & 1020)) >> 2] ^
                      HEAP[(t1 | ((x0 >> 14) & 1020)) >> 2] ^
                      HEAP[(t2 | ((x1 >> 6) & 1020)) >> 2] ^
                      HEAP[(t3 | ((x2 << 2) & 1020)) >> 2] ^
                      HEAP[(k | i | 12) >> 2]);
                  (x0 = y0), (x1 = y1), (x2 = y2), (x3 = y3);
                }

                // final round
                (S0 =
                  (HEAP[(s | ((x0 >> 22) & 1020)) >> 2] << 24) ^
                  (HEAP[(s | ((x1 >> 14) & 1020)) >> 2] << 16) ^
                  (HEAP[(s | ((x2 >> 6) & 1020)) >> 2] << 8) ^
                  HEAP[(s | ((x3 << 2) & 1020)) >> 2] ^
                  HEAP[(k | i | 0) >> 2]),
                  (S1 =
                    (HEAP[(s | ((x1 >> 22) & 1020)) >> 2] << 24) ^
                    (HEAP[(s | ((x2 >> 14) & 1020)) >> 2] << 16) ^
                    (HEAP[(s | ((x3 >> 6) & 1020)) >> 2] << 8) ^
                    HEAP[(s | ((x0 << 2) & 1020)) >> 2] ^
                    HEAP[(k | i | 4) >> 2]),
                  (S2 =
                    (HEAP[(s | ((x2 >> 22) & 1020)) >> 2] << 24) ^
                    (HEAP[(s | ((x3 >> 14) & 1020)) >> 2] << 16) ^
                    (HEAP[(s | ((x0 >> 6) & 1020)) >> 2] << 8) ^
                    HEAP[(s | ((x1 << 2) & 1020)) >> 2] ^
                    HEAP[(k | i | 8) >> 2]),
                  (S3 =
                    (HEAP[(s | ((x3 >> 22) & 1020)) >> 2] << 24) ^
                    (HEAP[(s | ((x0 >> 14) & 1020)) >> 2] << 16) ^
                    (HEAP[(s | ((x1 >> 6) & 1020)) >> 2] << 8) ^
                    HEAP[(s | ((x2 << 2) & 1020)) >> 2] ^
                    HEAP[(k | i | 12) >> 2]);
              }

              /**
               * ECB mode encryption
               * @param {number} x0 - 128-bit input block vector
               * @param {number} x1 - 128-bit input block vector
               * @param {number} x2 - 128-bit input block vector
               * @param {number} x3 - 128-bit input block vector
               */
              function _ecb_enc(x0, x1, x2, x3) {
                x0 = x0 | 0;
                x1 = x1 | 0;
                x2 = x2 | 0;
                x3 = x3 | 0;

                _core(0x0000, 0x0800, 0x1000, R, x0, x1, x2, x3);
              }

              /**
               * ECB mode decryption
               * @param {number} x0 - 128-bit input block vector
               * @param {number} x1 - 128-bit input block vector
               * @param {number} x2 - 128-bit input block vector
               * @param {number} x3 - 128-bit input block vector
               */
              function _ecb_dec(x0, x1, x2, x3) {
                x0 = x0 | 0;
                x1 = x1 | 0;
                x2 = x2 | 0;
                x3 = x3 | 0;

                var t = 0;

                _core(0x0400, 0x0c00, 0x2000, R, x0, x3, x2, x1);

                (t = S1), (S1 = S3), (S3 = t);
              }

              /**
               * CBC mode encryption
               * @param {number} x0 - 128-bit input block vector
               * @param {number} x1 - 128-bit input block vector
               * @param {number} x2 - 128-bit input block vector
               * @param {number} x3 - 128-bit input block vector
               */
              function _cbc_enc(x0, x1, x2, x3) {
                x0 = x0 | 0;
                x1 = x1 | 0;
                x2 = x2 | 0;
                x3 = x3 | 0;

                _core(
                  0x0000,
                  0x0800,
                  0x1000,
                  R,
                  I0 ^ x0,
                  I1 ^ x1,
                  I2 ^ x2,
                  I3 ^ x3
                );

                (I0 = S0), (I1 = S1), (I2 = S2), (I3 = S3);
              }

              /**
               * CBC mode decryption
               * @param {number} x0 - 128-bit input block vector
               * @param {number} x1 - 128-bit input block vector
               * @param {number} x2 - 128-bit input block vector
               * @param {number} x3 - 128-bit input block vector
               */
              function _cbc_dec(x0, x1, x2, x3) {
                x0 = x0 | 0;
                x1 = x1 | 0;
                x2 = x2 | 0;
                x3 = x3 | 0;

                var t = 0;

                _core(0x0400, 0x0c00, 0x2000, R, x0, x3, x2, x1);

                (t = S1), (S1 = S3), (S3 = t);

                (S0 = S0 ^ I0), (S1 = S1 ^ I1), (S2 = S2 ^ I2), (S3 = S3 ^ I3);

                (I0 = x0), (I1 = x1), (I2 = x2), (I3 = x3);
              }

              /**
               * CFB mode encryption
               * @param {number} x0 - 128-bit input block vector
               * @param {number} x1 - 128-bit input block vector
               * @param {number} x2 - 128-bit input block vector
               * @param {number} x3 - 128-bit input block vector
               */
              function _cfb_enc(x0, x1, x2, x3) {
                x0 = x0 | 0;
                x1 = x1 | 0;
                x2 = x2 | 0;
                x3 = x3 | 0;

                _core(0x0000, 0x0800, 0x1000, R, I0, I1, I2, I3);

                (I0 = S0 = S0 ^ x0),
                  (I1 = S1 = S1 ^ x1),
                  (I2 = S2 = S2 ^ x2),
                  (I3 = S3 = S3 ^ x3);
              }

              /**
               * CFB mode decryption
               * @param {number} x0 - 128-bit input block vector
               * @param {number} x1 - 128-bit input block vector
               * @param {number} x2 - 128-bit input block vector
               * @param {number} x3 - 128-bit input block vector
               */
              function _cfb_dec(x0, x1, x2, x3) {
                x0 = x0 | 0;
                x1 = x1 | 0;
                x2 = x2 | 0;
                x3 = x3 | 0;

                _core(0x0000, 0x0800, 0x1000, R, I0, I1, I2, I3);

                (S0 = S0 ^ x0), (S1 = S1 ^ x1), (S2 = S2 ^ x2), (S3 = S3 ^ x3);

                (I0 = x0), (I1 = x1), (I2 = x2), (I3 = x3);
              }

              /**
               * OFB mode encryption / decryption
               * @param {number} x0 - 128-bit input block vector
               * @param {number} x1 - 128-bit input block vector
               * @param {number} x2 - 128-bit input block vector
               * @param {number} x3 - 128-bit input block vector
               */
              function _ofb(x0, x1, x2, x3) {
                x0 = x0 | 0;
                x1 = x1 | 0;
                x2 = x2 | 0;
                x3 = x3 | 0;

                _core(0x0000, 0x0800, 0x1000, R, I0, I1, I2, I3);

                (I0 = S0), (I1 = S1), (I2 = S2), (I3 = S3);

                (S0 = S0 ^ x0), (S1 = S1 ^ x1), (S2 = S2 ^ x2), (S3 = S3 ^ x3);
              }

              /**
               * CTR mode encryption / decryption
               * @param {number} x0 - 128-bit input block vector
               * @param {number} x1 - 128-bit input block vector
               * @param {number} x2 - 128-bit input block vector
               * @param {number} x3 - 128-bit input block vector
               */
              function _ctr(x0, x1, x2, x3) {
                x0 = x0 | 0;
                x1 = x1 | 0;
                x2 = x2 | 0;
                x3 = x3 | 0;

                _core(0x0000, 0x0800, 0x1000, R, N0, N1, N2, N3);

                N3 = (~M3 & N3) | (M3 & (N3 + 1));
                N2 = (~M2 & N2) | (M2 & (N2 + ((N3 | 0) == 0)));
                N1 = (~M1 & N1) | (M1 & (N1 + ((N2 | 0) == 0)));
                N0 = (~M0 & N0) | (M0 & (N0 + ((N1 | 0) == 0)));

                S0 = S0 ^ x0;
                S1 = S1 ^ x1;
                S2 = S2 ^ x2;
                S3 = S3 ^ x3;
              }

              /**
               * GCM mode MAC calculation
               * @param {number} x0 - 128-bit input block vector
               * @param {number} x1 - 128-bit input block vector
               * @param {number} x2 - 128-bit input block vector
               * @param {number} x3 - 128-bit input block vector
               */
              function _gcm_mac(x0, x1, x2, x3) {
                x0 = x0 | 0;
                x1 = x1 | 0;
                x2 = x2 | 0;
                x3 = x3 | 0;

                var y0 = 0,
                  y1 = 0,
                  y2 = 0,
                  y3 = 0,
                  z0 = 0,
                  z1 = 0,
                  z2 = 0,
                  z3 = 0,
                  i = 0,
                  c = 0;

                (x0 = x0 ^ I0), (x1 = x1 ^ I1), (x2 = x2 ^ I2), (x3 = x3 ^ I3);

                (y0 = H0 | 0), (y1 = H1 | 0), (y2 = H2 | 0), (y3 = H3 | 0);

                for (; (i | 0) < 128; i = (i + 1) | 0) {
                  if (y0 >>> 31) {
                    (z0 = z0 ^ x0),
                      (z1 = z1 ^ x1),
                      (z2 = z2 ^ x2),
                      (z3 = z3 ^ x3);
                  }

                  (y0 = (y0 << 1) | (y1 >>> 31)),
                    (y1 = (y1 << 1) | (y2 >>> 31)),
                    (y2 = (y2 << 1) | (y3 >>> 31)),
                    (y3 = y3 << 1);

                  c = x3 & 1;

                  (x3 = (x3 >>> 1) | (x2 << 31)),
                    (x2 = (x2 >>> 1) | (x1 << 31)),
                    (x1 = (x1 >>> 1) | (x0 << 31)),
                    (x0 = x0 >>> 1);

                  if (c) x0 = x0 ^ 0xe1000000;
                }

                (I0 = z0), (I1 = z1), (I2 = z2), (I3 = z3);
              }

              /**
               * Set the internal rounds number.
               * @instance
               * @memberof AES_asm
               * @param {number} r - number if inner AES rounds
               */
              function set_rounds(r) {
                r = r | 0;
                R = r;
              }

              /**
               * Populate the internal state of the module.
               * @instance
               * @memberof AES_asm
               * @param {number} s0 - state vector
               * @param {number} s1 - state vector
               * @param {number} s2 - state vector
               * @param {number} s3 - state vector
               */
              function set_state(s0, s1, s2, s3) {
                s0 = s0 | 0;
                s1 = s1 | 0;
                s2 = s2 | 0;
                s3 = s3 | 0;

                (S0 = s0), (S1 = s1), (S2 = s2), (S3 = s3);
              }

              /**
               * Populate the internal iv of the module.
               * @instance
               * @memberof AES_asm
               * @param {number} i0 - iv vector
               * @param {number} i1 - iv vector
               * @param {number} i2 - iv vector
               * @param {number} i3 - iv vector
               */
              function set_iv(i0, i1, i2, i3) {
                i0 = i0 | 0;
                i1 = i1 | 0;
                i2 = i2 | 0;
                i3 = i3 | 0;

                (I0 = i0), (I1 = i1), (I2 = i2), (I3 = i3);
              }

              /**
               * Set nonce for CTR-family modes.
               * @instance
               * @memberof AES_asm
               * @param {number} n0 - nonce vector
               * @param {number} n1 - nonce vector
               * @param {number} n2 - nonce vector
               * @param {number} n3 - nonce vector
               */
              function set_nonce(n0, n1, n2, n3) {
                n0 = n0 | 0;
                n1 = n1 | 0;
                n2 = n2 | 0;
                n3 = n3 | 0;

                (N0 = n0), (N1 = n1), (N2 = n2), (N3 = n3);
              }

              /**
               * Set counter mask for CTR-family modes.
               * @instance
               * @memberof AES_asm
               * @param {number} m0 - counter mask vector
               * @param {number} m1 - counter mask vector
               * @param {number} m2 - counter mask vector
               * @param {number} m3 - counter mask vector
               */
              function set_mask(m0, m1, m2, m3) {
                m0 = m0 | 0;
                m1 = m1 | 0;
                m2 = m2 | 0;
                m3 = m3 | 0;

                (M0 = m0), (M1 = m1), (M2 = m2), (M3 = m3);
              }

              /**
               * Set counter for CTR-family modes.
               * @instance
               * @memberof AES_asm
               * @param {number} c0 - counter vector
               * @param {number} c1 - counter vector
               * @param {number} c2 - counter vector
               * @param {number} c3 - counter vector
               */
              function set_counter(c0, c1, c2, c3) {
                c0 = c0 | 0;
                c1 = c1 | 0;
                c2 = c2 | 0;
                c3 = c3 | 0;

                (N3 = (~M3 & N3) | (M3 & c3)),
                  (N2 = (~M2 & N2) | (M2 & c2)),
                  (N1 = (~M1 & N1) | (M1 & c1)),
                  (N0 = (~M0 & N0) | (M0 & c0));
              }

              /**
               * Store the internal state vector into the heap.
               * @instance
               * @memberof AES_asm
               * @param {number} pos - offset where to put the data
               * @return {number} The number of bytes have been written into the heap, always 16.
               */
              function get_state(pos) {
                pos = pos | 0;

                if (pos & 15) return -1;

                (DATA[pos | 0] = S0 >>> 24),
                  (DATA[pos | 1] = (S0 >>> 16) & 255),
                  (DATA[pos | 2] = (S0 >>> 8) & 255),
                  (DATA[pos | 3] = S0 & 255),
                  (DATA[pos | 4] = S1 >>> 24),
                  (DATA[pos | 5] = (S1 >>> 16) & 255),
                  (DATA[pos | 6] = (S1 >>> 8) & 255),
                  (DATA[pos | 7] = S1 & 255),
                  (DATA[pos | 8] = S2 >>> 24),
                  (DATA[pos | 9] = (S2 >>> 16) & 255),
                  (DATA[pos | 10] = (S2 >>> 8) & 255),
                  (DATA[pos | 11] = S2 & 255),
                  (DATA[pos | 12] = S3 >>> 24),
                  (DATA[pos | 13] = (S3 >>> 16) & 255),
                  (DATA[pos | 14] = (S3 >>> 8) & 255),
                  (DATA[pos | 15] = S3 & 255);

                return 16;
              }

              /**
               * Store the internal iv vector into the heap.
               * @instance
               * @memberof AES_asm
               * @param {number} pos - offset where to put the data
               * @return {number} The number of bytes have been written into the heap, always 16.
               */
              function get_iv(pos) {
                pos = pos | 0;

                if (pos & 15) return -1;

                (DATA[pos | 0] = I0 >>> 24),
                  (DATA[pos | 1] = (I0 >>> 16) & 255),
                  (DATA[pos | 2] = (I0 >>> 8) & 255),
                  (DATA[pos | 3] = I0 & 255),
                  (DATA[pos | 4] = I1 >>> 24),
                  (DATA[pos | 5] = (I1 >>> 16) & 255),
                  (DATA[pos | 6] = (I1 >>> 8) & 255),
                  (DATA[pos | 7] = I1 & 255),
                  (DATA[pos | 8] = I2 >>> 24),
                  (DATA[pos | 9] = (I2 >>> 16) & 255),
                  (DATA[pos | 10] = (I2 >>> 8) & 255),
                  (DATA[pos | 11] = I2 & 255),
                  (DATA[pos | 12] = I3 >>> 24),
                  (DATA[pos | 13] = (I3 >>> 16) & 255),
                  (DATA[pos | 14] = (I3 >>> 8) & 255),
                  (DATA[pos | 15] = I3 & 255);

                return 16;
              }

              /**
               * GCM initialization.
               * @instance
               * @memberof AES_asm
               */
              function gcm_init() {
                _ecb_enc(0, 0, 0, 0);
                (H0 = S0), (H1 = S1), (H2 = S2), (H3 = S3);
              }

              /**
               * Perform ciphering operation on the supplied data.
               * @instance
               * @memberof AES_asm
               * @param {number} mode - block cipher mode (see {@link AES_asm} mode constants)
               * @param {number} pos - offset of the data being processed
               * @param {number} len - length of the data being processed
               * @return {number} Actual amount of data have been processed.
               */
              function cipher(mode, pos, len) {
                mode = mode | 0;
                pos = pos | 0;
                len = len | 0;

                var ret = 0;

                if (pos & 15) return -1;

                while ((len | 0) >= 16) {
                  _cipher_modes[mode & 7](
                    (DATA[pos | 0] << 24) |
                      (DATA[pos | 1] << 16) |
                      (DATA[pos | 2] << 8) |
                      DATA[pos | 3],
                    (DATA[pos | 4] << 24) |
                      (DATA[pos | 5] << 16) |
                      (DATA[pos | 6] << 8) |
                      DATA[pos | 7],
                    (DATA[pos | 8] << 24) |
                      (DATA[pos | 9] << 16) |
                      (DATA[pos | 10] << 8) |
                      DATA[pos | 11],
                    (DATA[pos | 12] << 24) |
                      (DATA[pos | 13] << 16) |
                      (DATA[pos | 14] << 8) |
                      DATA[pos | 15]
                  );

                  (DATA[pos | 0] = S0 >>> 24),
                    (DATA[pos | 1] = (S0 >>> 16) & 255),
                    (DATA[pos | 2] = (S0 >>> 8) & 255),
                    (DATA[pos | 3] = S0 & 255),
                    (DATA[pos | 4] = S1 >>> 24),
                    (DATA[pos | 5] = (S1 >>> 16) & 255),
                    (DATA[pos | 6] = (S1 >>> 8) & 255),
                    (DATA[pos | 7] = S1 & 255),
                    (DATA[pos | 8] = S2 >>> 24),
                    (DATA[pos | 9] = (S2 >>> 16) & 255),
                    (DATA[pos | 10] = (S2 >>> 8) & 255),
                    (DATA[pos | 11] = S2 & 255),
                    (DATA[pos | 12] = S3 >>> 24),
                    (DATA[pos | 13] = (S3 >>> 16) & 255),
                    (DATA[pos | 14] = (S3 >>> 8) & 255),
                    (DATA[pos | 15] = S3 & 255);

                  (ret = (ret + 16) | 0),
                    (pos = (pos + 16) | 0),
                    (len = (len - 16) | 0);
                }

                return ret | 0;
              }

              /**
               * Calculates MAC of the supplied data.
               * @instance
               * @memberof AES_asm
               * @param {number} mode - block cipher mode (see {@link AES_asm} mode constants)
               * @param {number} pos - offset of the data being processed
               * @param {number} len - length of the data being processed
               * @return {number} Actual amount of data have been processed.
               */
              function mac(mode, pos, len) {
                mode = mode | 0;
                pos = pos | 0;
                len = len | 0;

                var ret = 0;

                if (pos & 15) return -1;

                while ((len | 0) >= 16) {
                  _mac_modes[mode & 1](
                    (DATA[pos | 0] << 24) |
                      (DATA[pos | 1] << 16) |
                      (DATA[pos | 2] << 8) |
                      DATA[pos | 3],
                    (DATA[pos | 4] << 24) |
                      (DATA[pos | 5] << 16) |
                      (DATA[pos | 6] << 8) |
                      DATA[pos | 7],
                    (DATA[pos | 8] << 24) |
                      (DATA[pos | 9] << 16) |
                      (DATA[pos | 10] << 8) |
                      DATA[pos | 11],
                    (DATA[pos | 12] << 24) |
                      (DATA[pos | 13] << 16) |
                      (DATA[pos | 14] << 8) |
                      DATA[pos | 15]
                  );

                  (ret = (ret + 16) | 0),
                    (pos = (pos + 16) | 0),
                    (len = (len - 16) | 0);
                }

                return ret | 0;
              }

              /**
               * AES cipher modes table (virual methods)
               */
              var _cipher_modes = [
                _ecb_enc,
                _ecb_dec,
                _cbc_enc,
                _cbc_dec,
                _cfb_enc,
                _cfb_dec,
                _ofb,
                _ctr,
              ];

              /**
               * AES MAC modes table (virual methods)
               */
              var _mac_modes = [_cbc_enc, _gcm_mac];

              /**
               * Asm.js module exports
               */
              return {
                set_rounds: set_rounds,
                set_state: set_state,
                set_iv: set_iv,
                set_nonce: set_nonce,
                set_mask: set_mask,
                set_counter: set_counter,
                get_state: get_state,
                get_iv: get_iv,
                gcm_init: gcm_init,
                cipher: cipher,
                mac: mac,
              };
            })(stdlib, foreign, buffer);

            asm.set_key = set_key;

            return asm;
          };

          /**
           * AES enciphering mode constants
           * @enum {number}
           * @const
           */
          (wrapper.ENC = {
            ECB: 0,
            CBC: 2,
            CFB: 4,
            OFB: 6,
            CTR: 7,
          }),
            /**
             * AES deciphering mode constants
             * @enum {number}
             * @const
             */
            (wrapper.DEC = {
              ECB: 1,
              CBC: 3,
              CFB: 5,
              OFB: 6,
              CTR: 7,
            }),
            /**
             * AES MAC mode constants
             * @enum {number}
             * @const
             */
            (wrapper.MAC = {
              CBC: 0,
              GCM: 1,
            });

          /**
           * Heap data offset
           * @type {number}
           * @const
           */
          wrapper.HEAP_DATA = 0x4000;

          return wrapper;
        })();

        class AES {
          constructor(key, iv, padding = true, mode) {
            this.pos = 0;
            this.len = 0;
            this.mode = mode;
            // The AES "worker"
            this.heap = _heap_init().subarray(AES_asm.HEAP_DATA);
            this.asm = new AES_asm(null, this.heap.buffer);
            // The AES object state
            this.pos = 0;
            this.len = 0;
            // Key
            const keylen = key.length;
            if (keylen !== 16 && keylen !== 24 && keylen !== 32)
              throw new IllegalArgumentError("illegal key size");
            const keyview = new DataView(
              key.buffer,
              key.byteOffset,
              key.byteLength
            );
            this.asm.set_key(
              keylen >> 2,
              keyview.getUint32(0),
              keyview.getUint32(4),
              keyview.getUint32(8),
              keyview.getUint32(12),
              keylen > 16 ? keyview.getUint32(16) : 0,
              keylen > 16 ? keyview.getUint32(20) : 0,
              keylen > 24 ? keyview.getUint32(24) : 0,
              keylen > 24 ? keyview.getUint32(28) : 0
            );
            // IV
            if (iv !== undefined) {
              if (iv.length !== 16)
                throw new IllegalArgumentError("illegal iv size");
              let ivview = new DataView(
                iv.buffer,
                iv.byteOffset,
                iv.byteLength
              );
              this.asm.set_iv(
                ivview.getUint32(0),
                ivview.getUint32(4),
                ivview.getUint32(8),
                ivview.getUint32(12)
              );
            } else {
              this.asm.set_iv(0, 0, 0, 0);
            }
            this.padding = padding;
          }
          AES_Encrypt_process(data) {
            if (!is_bytes(data))
              throw new TypeError("data isn't of expected type");
            let asm = this.asm;
            let heap = this.heap;
            let amode = AES_asm.ENC[this.mode];
            let hpos = AES_asm.HEAP_DATA;
            let pos = this.pos;
            let len = this.len;
            let dpos = 0;
            let dlen = data.length || 0;
            let rpos = 0;
            let rlen = (len + dlen) & -16;
            let wlen = 0;
            let result = new Uint8Array(rlen);
            while (dlen > 0) {
              wlen = _heap_write(heap, pos + len, data, dpos, dlen);
              len += wlen;
              dpos += wlen;
              dlen -= wlen;
              wlen = asm.cipher(amode, hpos + pos, len);
              if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
              rpos += wlen;
              if (wlen < len) {
                pos += wlen;
                len -= wlen;
              } else {
                pos = 0;
                len = 0;
              }
            }
            this.pos = pos;
            this.len = len;
            return result;
          }
          AES_Encrypt_finish() {
            let asm = this.asm;
            let heap = this.heap;
            let amode = AES_asm.ENC[this.mode];
            let hpos = AES_asm.HEAP_DATA;
            let pos = this.pos;
            let len = this.len;
            let plen = 16 - (len % 16);
            let rlen = len;
            if (this.hasOwnProperty("padding")) {
              if (this.padding) {
                for (let p = 0; p < plen; ++p) {
                  heap[pos + len + p] = plen;
                }
                len += plen;
                rlen = len;
              } else if (len % 16) {
                throw new IllegalArgumentError(
                  "data length must be a multiple of the block size"
                );
              }
            } else {
              len += plen;
            }
            const result = new Uint8Array(rlen);
            if (len) asm.cipher(amode, hpos + pos, len);
            if (rlen) result.set(heap.subarray(pos, pos + rlen));
            this.pos = 0;
            this.len = 0;
            return result;
          }
          AES_Decrypt_process(data) {
            if (!is_bytes(data))
              throw new TypeError("data isn't of expected type");
            let asm = this.asm;
            let heap = this.heap;
            let amode = AES_asm.DEC[this.mode];
            let hpos = AES_asm.HEAP_DATA;
            let pos = this.pos;
            let len = this.len;
            let dpos = 0;
            let dlen = data.length || 0;
            let rpos = 0;
            let rlen = (len + dlen) & -16;
            let plen = 0;
            let wlen = 0;
            if (this.padding) {
              plen = len + dlen - rlen || 16;
              rlen -= plen;
            }
            const result = new Uint8Array(rlen);
            while (dlen > 0) {
              wlen = _heap_write(heap, pos + len, data, dpos, dlen);
              len += wlen;
              dpos += wlen;
              dlen -= wlen;
              wlen = asm.cipher(amode, hpos + pos, len - (!dlen ? plen : 0));
              if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
              rpos += wlen;
              if (wlen < len) {
                pos += wlen;
                len -= wlen;
              } else {
                pos = 0;
                len = 0;
              }
            }
            this.pos = pos;
            this.len = len;
            return result;
          }
          AES_Decrypt_finish() {
            let asm = this.asm;
            let heap = this.heap;
            let amode = AES_asm.DEC[this.mode];
            let hpos = AES_asm.HEAP_DATA;
            let pos = this.pos;
            let len = this.len;
            let rlen = len;
            if (len > 0) {
              if (len % 16) {
                if (this.hasOwnProperty("padding")) {
                  throw new IllegalArgumentError(
                    "data length must be a multiple of the block size"
                  );
                } else {
                  len += 16 - (len % 16);
                }
              }
              asm.cipher(amode, hpos + pos, len);
              if (this.hasOwnProperty("padding") && this.padding) {
                let pad = heap[pos + rlen - 1];
                if (pad < 1 || pad > 16 || pad > rlen)
                  throw new SecurityError("bad padding");
                let pcheck = 0;
                for (let i = pad; i > 1; i--)
                  pcheck |= pad ^ heap[pos + rlen - i];
                if (pcheck) throw new SecurityError("bad padding");
                rlen -= pad;
              }
            }
            const result = new Uint8Array(rlen);
            if (rlen > 0) {
              result.set(heap.subarray(pos, pos + rlen));
            }
            this.pos = 0;
            this.len = 0;
            return result;
          }
        }

        class AES_CBC extends AES {
          static encrypt(data, key, padding = true, iv) {
            return new AES_CBC(key, iv, padding).encrypt(data);
          }
          static decrypt(data, key, padding = true, iv) {
            return new AES_CBC(key, iv, padding).decrypt(data);
          }
          constructor(key, iv, padding = true) {
            super(key, iv, padding, "CBC");
          }
          encrypt(data) {
            const r1 = this.AES_Encrypt_process(data);
            const r2 = this.AES_Encrypt_finish();
            return joinBytes(r1, r2);
          }
          decrypt(data) {
            const r1 = this.AES_Decrypt_process(data);
            const r2 = this.AES_Decrypt_finish();
            return joinBytes(r1, r2);
          }
        }

        /**
         * Counter with CBC-MAC (CCM)
         *
         * Due to JS limitations (52 bits of Number precision) maximum encrypted message length
         * is limited to ~4 PiB ( 2^52 - 16 ) per `nonce`-`key` pair.
         * That also limits `lengthSize` parameter maximum value to 7 (not 8 as described in RFC3610).
         *
         * Additional authenticated data `adata` maximum length is chosen to be no more than 65279 bytes ( 2^16 - 2^8 ),
         * which is considered enough for the most of use-cases.
         *
         * And one more important thing: in case of progressive ciphering of a data stream (in other
         * words when data can't be held in-memory at a whole and are ciphered chunk-by-chunk)
         * you have to know the `dataLength` in advance and pass that value to the cipher options.
         */
        const _AES_CCM_adata_maxLength = 65279; // 2^16 - 2^8
        const _AES_CCM_data_maxLength = 4503599627370480; // 2^52 - 2^4
        class AES_CCM extends AES {
          constructor(key, nonce, adata, tagSize = 16, dataLength) {
            super(key, undefined, undefined, "CCM");
            this.counter = 1;
            this.dataLength = -1;
            // Tag size
            if (tagSize < 4 || tagSize > 16 || tagSize & 1)
              throw new IllegalArgumentError("illegal tagSize value");
            this.tagSize = tagSize;
            // Nonce
            this.nonce = nonce;
            if (nonce.length < 8 || nonce.length > 13)
              throw new IllegalArgumentError("illegal nonce length");
            this.lengthSize = 15 - nonce.length;
            nonce = new Uint8Array(nonce.length + 1);
            nonce[0] = this.lengthSize - 1;
            nonce.set(this.nonce, 1);
            if (
              dataLength < 0 ||
              dataLength > _AES_CCM_data_maxLength ||
              dataLength > Math.pow(2, 8 * this.lengthSize) - 16
            )
              throw new IllegalArgumentError("illegal dataLength value");
            if (adata !== undefined) {
              if (adata.length > _AES_CCM_adata_maxLength)
                throw new IllegalArgumentError("illegal adata length");
              this.adata = adata.length ? adata : undefined;
            }
            this.dataLength = dataLength;
            this.counter = 1;
            this.AES_CCM_calculate_iv();
            this.AES_CTR_set_options(nonce, this.counter, 8 * this.lengthSize);
          }
          static encrypt(clear, key, nonce, adata, tagsize = 16) {
            return new AES_CCM(
              key,
              nonce,
              adata,
              tagsize,
              clear.length
            ).encrypt(clear);
          }
          static decrypt(cipher, key, nonce, adata, tagsize = 16) {
            return new AES_CCM(
              key,
              nonce,
              adata,
              tagsize,
              cipher.length - tagsize
            ).decrypt(cipher);
          }
          encrypt(data) {
            this.dataLength = data.length || 0;
            const result1 = this.AES_CCM_Encrypt_process(data);
            const result2 = this.AES_CCM_Encrypt_finish();
            const result = new Uint8Array(result1.length + result2.length);
            if (result1.length) result.set(result1);
            if (result2.length) result.set(result2, result1.length);
            return result;
          }
          decrypt(data) {
            this.dataLength = data.length || 0;
            const result1 = this.AES_CCM_Decrypt_process(data);
            const result2 = this.AES_CCM_Decrypt_finish();
            const result = new Uint8Array(result1.length + result2.length);
            if (result1.length) result.set(result1);
            if (result2.length) result.set(result2, result1.length);
            return result;
          }
          AES_CCM_calculate_iv() {
            const nonce = this.nonce;
            const adata = this.adata;
            const tagSize = this.tagSize;
            const lengthSize = this.lengthSize;
            const dataLength = this.dataLength;
            const data = new Uint8Array(16 + (adata ? 2 + adata.length : 0));
            // B0: flags(adata?, M', L'), nonce, len(data)
            data[0] =
              (adata ? 64 : 0) | ((tagSize - 2) << 2) | (lengthSize - 1);
            data.set(nonce, 1);
            if (lengthSize > 6)
              data[9] = ((dataLength / 0x100000000) >>> 16) & 15;
            if (lengthSize > 5)
              data[10] = ((dataLength / 0x100000000) >>> 8) & 255;
            if (lengthSize > 4) data[11] = (dataLength / 0x100000000) & 255;
            if (lengthSize > 3) data[12] = dataLength >>> 24;
            if (lengthSize > 2) data[13] = (dataLength >>> 16) & 255;
            data[14] = (dataLength >>> 8) & 255;
            data[15] = dataLength & 255;
            // B*: len(adata), adata
            if (adata) {
              data[16] = (adata.length >>> 8) & 255;
              data[17] = adata.length & 255;
              data.set(adata, 18);
            }
            this._cbc_mac_process(data);
            this.asm.get_state(AES_asm.HEAP_DATA);
            const iv = new Uint8Array(this.heap.subarray(0, 16));
            const ivview = new DataView(
              iv.buffer,
              iv.byteOffset,
              iv.byteLength
            );
            this.asm.set_iv(
              ivview.getUint32(0),
              ivview.getUint32(4),
              ivview.getUint32(8),
              ivview.getUint32(12)
            );
          }
          _cbc_mac_process(data) {
            const heap = this.heap;
            const asm = this.asm;
            let dpos = 0;
            let dlen = data.length || 0;
            let wlen = 0;
            while (dlen > 0) {
              wlen = _heap_write(heap, 0, data, dpos, dlen);
              while (wlen & 15) heap[wlen++] = 0;
              dpos += wlen;
              dlen -= wlen;
              asm.mac(AES_asm.MAC.CBC, AES_asm.HEAP_DATA, wlen);
            }
          }
          AES_CCM_Encrypt_process(data) {
            const asm = this.asm;
            const heap = this.heap;
            let dpos = 0;
            let dlen = data.length || 0;
            let counter = this.counter;
            let pos = this.pos;
            let len = this.len;
            const rlen = (len + dlen) & -16;
            let rpos = 0;
            let wlen = 0;
            if (((counter - 1) << 4) + len + dlen > _AES_CCM_data_maxLength)
              // ??? should check against lengthSize
              throw new RangeError("counter overflow");
            const result = new Uint8Array(rlen);
            while (dlen > 0) {
              wlen = _heap_write(heap, pos + len, data, dpos, dlen);
              len += wlen;
              dpos += wlen;
              dlen -= wlen;
              wlen = asm.mac(AES_asm.MAC.CBC, AES_asm.HEAP_DATA + pos, len);
              wlen = asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA + pos, wlen);
              if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
              counter += wlen >>> 4;
              rpos += wlen;
              if (wlen < len) {
                pos += wlen;
                len -= wlen;
              } else {
                pos = 0;
                len = 0;
              }
            }
            this.counter = counter;
            this.pos = pos;
            this.len = len;
            return result;
          }
          AES_CCM_Encrypt_finish() {
            const asm = this.asm;
            const heap = this.heap;
            const tagSize = this.tagSize;
            const pos = this.pos;
            const len = this.len;
            const result = new Uint8Array(len + tagSize);
            let i = len;
            for (; i & 15; i++) heap[pos + i] = 0;
            asm.mac(AES_asm.MAC.CBC, AES_asm.HEAP_DATA + pos, i);
            asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA + pos, i);
            if (len) result.set(heap.subarray(pos, pos + len));
            asm.set_counter(0, 0, 0, 0);
            asm.get_iv(AES_asm.HEAP_DATA);
            asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA, 16);
            result.set(heap.subarray(0, tagSize), len);
            this.counter = 1;
            this.pos = 0;
            this.len = 0;
            return result;
          }
          AES_CCM_Decrypt_process(data) {
            let dpos = 0;
            let dlen = data.length || 0;
            const asm = this.asm;
            const heap = this.heap;
            let counter = this.counter;
            const tagSize = this.tagSize;
            let pos = this.pos;
            let len = this.len;
            let rpos = 0;
            const rlen =
              len + dlen > tagSize ? (len + dlen - tagSize) & -16 : 0;
            const tlen = len + dlen - rlen;
            let wlen = 0;
            if (((counter - 1) << 4) + len + dlen > _AES_CCM_data_maxLength)
              throw new RangeError("counter overflow");
            const result = new Uint8Array(rlen);
            while (dlen > tlen) {
              wlen = _heap_write(heap, pos + len, data, dpos, dlen - tlen);
              len += wlen;
              dpos += wlen;
              dlen -= wlen;
              wlen = asm.cipher(AES_asm.DEC.CTR, AES_asm.HEAP_DATA + pos, wlen);
              wlen = asm.mac(AES_asm.MAC.CBC, AES_asm.HEAP_DATA + pos, wlen);
              if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
              counter += wlen >>> 4;
              rpos += wlen;
              pos = 0;
              len = 0;
            }
            if (dlen > 0) {
              len += _heap_write(heap, 0, data, dpos, dlen);
            }
            this.counter = counter;
            this.pos = pos;
            this.len = len;
            return result;
          }
          AES_CCM_Decrypt_finish() {
            const asm = this.asm;
            const heap = this.heap;
            const tagSize = this.tagSize;
            const pos = this.pos;
            const len = this.len;
            const rlen = len - tagSize;
            if (len < tagSize)
              throw new IllegalStateError("authentication tag not found");
            const result = new Uint8Array(rlen);
            const atag = new Uint8Array(heap.subarray(pos + rlen, pos + len));
            asm.cipher(
              AES_asm.DEC.CTR,
              AES_asm.HEAP_DATA + pos,
              (rlen + 15) & -16
            );
            result.set(heap.subarray(pos, pos + rlen));
            let i = rlen;
            for (; i & 15; i++) heap[pos + i] = 0;
            asm.mac(AES_asm.MAC.CBC, AES_asm.HEAP_DATA + pos, i);
            asm.set_counter(0, 0, 0, 0);
            asm.get_iv(AES_asm.HEAP_DATA);
            asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA, 16);
            let acheck = 0;
            for (let j = 0; j < tagSize; ++j) acheck |= atag[j] ^ heap[j];
            if (acheck) throw new SecurityError("data integrity check failed");
            this.counter = 1;
            this.pos = 0;
            this.len = 0;
            return result;
          }
          AES_CTR_set_options(nonce, counter, size) {
            if (size < 8 || size > 48)
              throw new IllegalArgumentError("illegal counter size");
            const mask = Math.pow(2, size) - 1;
            this.asm.set_mask(0, 0, (mask / 0x100000000) | 0, mask | 0);
            const len = nonce.length;
            if (!len || len > 16)
              throw new IllegalArgumentError("illegal nonce size");
            this.nonce = nonce;
            const view = new DataView(new ArrayBuffer(16));
            new Uint8Array(view.buffer).set(nonce);
            this.asm.set_nonce(
              view.getUint32(0),
              view.getUint32(4),
              view.getUint32(8),
              view.getUint32(12)
            );
            if (counter < 0 || counter >= Math.pow(2, size))
              throw new IllegalArgumentError("illegal counter value");
            this.counter = counter;
            this.asm.set_counter(
              0,
              0,
              (counter / 0x100000000) | 0,
              counter | 0
            );
          }
        }

        class AES_CFB extends AES {
          static encrypt(data, key, iv) {
            return new AES_CFB(key, iv).encrypt(data);
          }
          static decrypt(data, key, iv) {
            return new AES_CFB(key, iv).decrypt(data);
          }
          constructor(key, iv) {
            super(key, iv, true, "CFB");
            delete this.padding;
          }
          encrypt(data) {
            const r1 = this.AES_Encrypt_process(data);
            const r2 = this.AES_Encrypt_finish();
            return joinBytes(r1, r2);
          }
          decrypt(data) {
            const r1 = this.AES_Decrypt_process(data);
            const r2 = this.AES_Decrypt_finish();
            return joinBytes(r1, r2);
          }
        }

        class AES_ECB extends AES {
          static encrypt(data, key, padding = false) {
            return new AES_ECB(key, padding).encrypt(data);
          }
          static decrypt(data, key, padding = false) {
            return new AES_ECB(key, padding).decrypt(data);
          }
          constructor(key, padding = false) {
            super(key, undefined, padding, "ECB");
          }
          encrypt(data) {
            const r1 = this.AES_Encrypt_process(data);
            const r2 = this.AES_Encrypt_finish();
            return joinBytes(r1, r2);
          }
          decrypt(data) {
            const r1 = this.AES_Decrypt_process(data);
            const r2 = this.AES_Decrypt_finish();
            return joinBytes(r1, r2);
          }
        }

        function mul2(data) {
          const t = data[0] & 0x80;
          for (let i = 0; i < 15; i++) {
            data[i] = (data[i] << 1) ^ (data[i + 1] & 0x80 ? 1 : 0);
          }
          data[15] = (data[15] << 1) ^ (t ? 0x87 : 0);
        }
        class AES_CMAC {
          constructor(key) {
            this.bufferLength = 0;
            this.k = new AES_ECB(key).encrypt(new Uint8Array(16));
            mul2(this.k);
            this.cbc = new AES_CBC(key, new Uint8Array(16), false);
            this.buffer = new Uint8Array(16);
            this.result = null;
          }
          static bytes(data, key) {
            return new AES_CMAC(key).process(data).finish().result;
          }
          process(data) {
            if (this.bufferLength + data.length > 16) {
              this.cbc.encrypt(this.buffer.subarray(0, this.bufferLength));
              const offset =
                ((this.bufferLength + data.length - 1) & ~15) -
                this.bufferLength;
              this.cbc.encrypt(data.subarray(0, offset));
              this.buffer.set(data.subarray(offset));
              this.bufferLength = data.length - offset;
            } else {
              this.buffer.set(data, this.bufferLength);
              this.bufferLength += data.length;
            }
            return this;
          }
          finish() {
            if (this.bufferLength !== 16) {
              this.buffer[this.bufferLength] = 0x80;
              for (let i = this.bufferLength + 1; i < 16; i++) {
                this.buffer[i] = 0;
              }
              mul2(this.k);
            }
            for (let i = 0; i < 16; i++) {
              this.buffer[i] ^= this.k[i];
            }
            this.result = this.cbc.encrypt(this.buffer);
            return this;
          }
        }

        class AES_CTR extends AES {
          static encrypt(data, key, nonce) {
            return new AES_CTR(key, nonce).encrypt(data);
          }
          static decrypt(data, key, nonce) {
            return new AES_CTR(key, nonce).encrypt(data);
          }
          constructor(key, nonce) {
            super(key, undefined, false, "CTR");
            delete this.padding;
            this.AES_CTR_set_options(nonce);
          }
          encrypt(data) {
            const r1 = this.AES_Encrypt_process(data);
            const r2 = this.AES_Encrypt_finish();
            return joinBytes(r1, r2);
          }
          decrypt(data) {
            const r1 = this.AES_Encrypt_process(data);
            const r2 = this.AES_Encrypt_finish();
            return joinBytes(r1, r2);
          }
          AES_CTR_set_options(nonce, counter, size) {
            if (size !== undefined) {
              if (size < 8 || size > 48)
                throw new IllegalArgumentError("illegal counter size");
              let mask = Math.pow(2, size) - 1;
              this.asm.set_mask(0, 0, (mask / 0x100000000) | 0, mask | 0);
            } else {
              size = 48;
              this.asm.set_mask(0, 0, 0xffff, 0xffffffff);
            }
            if (nonce !== undefined) {
              let len = nonce.length;
              if (!len || len > 16)
                throw new IllegalArgumentError("illegal nonce size");
              let view = new DataView(new ArrayBuffer(16));
              new Uint8Array(view.buffer).set(nonce);
              this.asm.set_nonce(
                view.getUint32(0),
                view.getUint32(4),
                view.getUint32(8),
                view.getUint32(12)
              );
            } else {
              throw new Error("nonce is required");
            }
            if (counter !== undefined) {
              if (counter < 0 || counter >= Math.pow(2, size))
                throw new IllegalArgumentError("illegal counter value");
              this.asm.set_counter(
                0,
                0,
                (counter / 0x100000000) | 0,
                counter | 0
              );
            }
          }
        }

        const _AES_GCM_data_maxLength = 68719476704; // 2^36 - 2^5
        class AES_GCM extends AES {
          constructor(key, nonce, adata, tagSize = 16) {
            super(key, undefined, false, "CTR");
            this.tagSize = tagSize;
            this.gamma0 = 0;
            this.counter = 1;
            // Init GCM
            this.asm.gcm_init();
            // Tag size
            if (this.tagSize < 4 || this.tagSize > 16)
              throw new IllegalArgumentError("illegal tagSize value");
            // Nonce
            const noncelen = nonce.length || 0;
            const noncebuf = new Uint8Array(16);
            if (noncelen !== 12) {
              this._gcm_mac_process(nonce);
              this.heap[0] = 0;
              this.heap[1] = 0;
              this.heap[2] = 0;
              this.heap[3] = 0;
              this.heap[4] = 0;
              this.heap[5] = 0;
              this.heap[6] = 0;
              this.heap[7] = 0;
              this.heap[8] = 0;
              this.heap[9] = 0;
              this.heap[10] = 0;
              this.heap[11] = noncelen >>> 29;
              this.heap[12] = (noncelen >>> 21) & 255;
              this.heap[13] = (noncelen >>> 13) & 255;
              this.heap[14] = (noncelen >>> 5) & 255;
              this.heap[15] = (noncelen << 3) & 255;
              this.asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA, 16);
              this.asm.get_iv(AES_asm.HEAP_DATA);
              this.asm.set_iv(0, 0, 0, 0);
              noncebuf.set(this.heap.subarray(0, 16));
            } else {
              noncebuf.set(nonce);
              noncebuf[15] = 1;
            }
            const nonceview = new DataView(noncebuf.buffer);
            this.gamma0 = nonceview.getUint32(12);
            this.asm.set_nonce(
              nonceview.getUint32(0),
              nonceview.getUint32(4),
              nonceview.getUint32(8),
              0
            );
            this.asm.set_mask(0, 0, 0, 0xffffffff);
            // Associated data
            if (adata !== undefined) {
              if (adata.length > _AES_GCM_data_maxLength)
                throw new IllegalArgumentError("illegal adata length");
              if (adata.length) {
                this.adata = adata;
                this._gcm_mac_process(adata);
              } else {
                this.adata = undefined;
              }
            } else {
              this.adata = undefined;
            }
            // Counter
            if (this.counter < 1 || this.counter > 0xffffffff)
              throw new RangeError("counter must be a positive 32-bit integer");
            this.asm.set_counter(0, 0, 0, (this.gamma0 + this.counter) | 0);
          }
          static encrypt(cleartext, key, nonce, adata, tagsize) {
            return new AES_GCM(key, nonce, adata, tagsize).encrypt(cleartext);
          }
          static decrypt(ciphertext, key, nonce, adata, tagsize) {
            return new AES_GCM(key, nonce, adata, tagsize).decrypt(ciphertext);
          }
          encrypt(data) {
            return this.AES_GCM_encrypt(data);
          }
          decrypt(data) {
            return this.AES_GCM_decrypt(data);
          }
          AES_GCM_Encrypt_process(data) {
            let dpos = 0;
            let dlen = data.length || 0;
            let asm = this.asm;
            let heap = this.heap;
            let counter = this.counter;
            let pos = this.pos;
            let len = this.len;
            let rpos = 0;
            let rlen = (len + dlen) & -16;
            let wlen = 0;
            if (((counter - 1) << 4) + len + dlen > _AES_GCM_data_maxLength)
              throw new RangeError("counter overflow");
            const result = new Uint8Array(rlen);
            while (dlen > 0) {
              wlen = _heap_write(heap, pos + len, data, dpos, dlen);
              len += wlen;
              dpos += wlen;
              dlen -= wlen;
              wlen = asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA + pos, len);
              wlen = asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA + pos, wlen);
              if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
              counter += wlen >>> 4;
              rpos += wlen;
              if (wlen < len) {
                pos += wlen;
                len -= wlen;
              } else {
                pos = 0;
                len = 0;
              }
            }
            this.counter = counter;
            this.pos = pos;
            this.len = len;
            return result;
          }
          AES_GCM_Encrypt_finish() {
            let asm = this.asm;
            let heap = this.heap;
            let counter = this.counter;
            let tagSize = this.tagSize;
            let adata = this.adata;
            let pos = this.pos;
            let len = this.len;
            const result = new Uint8Array(len + tagSize);
            asm.cipher(
              AES_asm.ENC.CTR,
              AES_asm.HEAP_DATA + pos,
              (len + 15) & -16
            );
            if (len) result.set(heap.subarray(pos, pos + len));
            let i = len;
            for (; i & 15; i++) heap[pos + i] = 0;
            asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA + pos, i);
            const alen = adata !== undefined ? adata.length : 0;
            const clen = ((counter - 1) << 4) + len;
            heap[0] = 0;
            heap[1] = 0;
            heap[2] = 0;
            heap[3] = alen >>> 29;
            heap[4] = alen >>> 21;
            heap[5] = (alen >>> 13) & 255;
            heap[6] = (alen >>> 5) & 255;
            heap[7] = (alen << 3) & 255;
            heap[8] = heap[9] = heap[10] = 0;
            heap[11] = clen >>> 29;
            heap[12] = (clen >>> 21) & 255;
            heap[13] = (clen >>> 13) & 255;
            heap[14] = (clen >>> 5) & 255;
            heap[15] = (clen << 3) & 255;
            asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA, 16);
            asm.get_iv(AES_asm.HEAP_DATA);
            asm.set_counter(0, 0, 0, this.gamma0);
            asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA, 16);
            result.set(heap.subarray(0, tagSize), len);
            this.counter = 1;
            this.pos = 0;
            this.len = 0;
            return result;
          }
          AES_GCM_Decrypt_process(data) {
            let dpos = 0;
            let dlen = data.length || 0;
            let asm = this.asm;
            let heap = this.heap;
            let counter = this.counter;
            let tagSize = this.tagSize;
            let pos = this.pos;
            let len = this.len;
            let rpos = 0;
            let rlen = len + dlen > tagSize ? (len + dlen - tagSize) & -16 : 0;
            let tlen = len + dlen - rlen;
            let wlen = 0;
            if (((counter - 1) << 4) + len + dlen > _AES_GCM_data_maxLength)
              throw new RangeError("counter overflow");
            const result = new Uint8Array(rlen);
            while (dlen > tlen) {
              wlen = _heap_write(heap, pos + len, data, dpos, dlen - tlen);
              len += wlen;
              dpos += wlen;
              dlen -= wlen;
              wlen = asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA + pos, wlen);
              wlen = asm.cipher(AES_asm.DEC.CTR, AES_asm.HEAP_DATA + pos, wlen);
              if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
              counter += wlen >>> 4;
              rpos += wlen;
              pos = 0;
              len = 0;
            }
            if (dlen > 0) {
              len += _heap_write(heap, 0, data, dpos, dlen);
            }
            this.counter = counter;
            this.pos = pos;
            this.len = len;
            return result;
          }
          AES_GCM_Decrypt_finish() {
            let asm = this.asm;
            let heap = this.heap;
            let tagSize = this.tagSize;
            let adata = this.adata;
            let counter = this.counter;
            let pos = this.pos;
            let len = this.len;
            let rlen = len - tagSize;
            if (len < tagSize)
              throw new IllegalStateError("authentication tag not found");
            const result = new Uint8Array(rlen);
            const atag = new Uint8Array(heap.subarray(pos + rlen, pos + len));
            let i = rlen;
            for (; i & 15; i++) heap[pos + i] = 0;
            asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA + pos, i);
            asm.cipher(AES_asm.DEC.CTR, AES_asm.HEAP_DATA + pos, i);
            if (rlen) result.set(heap.subarray(pos, pos + rlen));
            const alen = adata !== undefined ? adata.length : 0;
            const clen = ((counter - 1) << 4) + len - tagSize;
            heap[0] = 0;
            heap[1] = 0;
            heap[2] = 0;
            heap[3] = alen >>> 29;
            heap[4] = alen >>> 21;
            heap[5] = (alen >>> 13) & 255;
            heap[6] = (alen >>> 5) & 255;
            heap[7] = (alen << 3) & 255;
            heap[8] = heap[9] = heap[10] = 0;
            heap[11] = clen >>> 29;
            heap[12] = (clen >>> 21) & 255;
            heap[13] = (clen >>> 13) & 255;
            heap[14] = (clen >>> 5) & 255;
            heap[15] = (clen << 3) & 255;
            asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA, 16);
            asm.get_iv(AES_asm.HEAP_DATA);
            asm.set_counter(0, 0, 0, this.gamma0);
            asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA, 16);
            let acheck = 0;
            for (let i = 0; i < tagSize; ++i) acheck |= atag[i] ^ heap[i];
            if (acheck) throw new SecurityError("data integrity check failed");
            this.counter = 1;
            this.pos = 0;
            this.len = 0;
            return result;
          }
          AES_GCM_decrypt(data) {
            const result1 = this.AES_GCM_Decrypt_process(data);
            const result2 = this.AES_GCM_Decrypt_finish();
            const result = new Uint8Array(result1.length + result2.length);
            if (result1.length) result.set(result1);
            if (result2.length) result.set(result2, result1.length);
            return result;
          }
          AES_GCM_encrypt(data) {
            const result1 = this.AES_GCM_Encrypt_process(data);
            const result2 = this.AES_GCM_Encrypt_finish();
            const result = new Uint8Array(result1.length + result2.length);
            if (result1.length) result.set(result1);
            if (result2.length) result.set(result2, result1.length);
            return result;
          }
          _gcm_mac_process(data) {
            const heap = this.heap;
            const asm = this.asm;
            let dpos = 0;
            let dlen = data.length || 0;
            let wlen = 0;
            while (dlen > 0) {
              wlen = _heap_write(heap, 0, data, dpos, dlen);
              dpos += wlen;
              dlen -= wlen;
              while (wlen & 15) heap[wlen++] = 0;
              asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA, wlen);
            }
          }
        }

        class AES_OFB extends AES {
          static encrypt(data, key, iv) {
            return new AES_OFB(key, iv).encrypt(data);
          }
          static decrypt(data, key, iv) {
            return new AES_OFB(key, iv).decrypt(data);
          }
          constructor(key, iv) {
            super(key, iv, false, "OFB");
          }
          encrypt(data) {
            const r1 = this.AES_Encrypt_process(data);
            const r2 = this.AES_Encrypt_finish();
            return joinBytes(r1, r2);
          }
          decrypt(data) {
            const r1 = this.AES_Decrypt_process(data);
            const r2 = this.AES_Decrypt_finish();
            return joinBytes(r1, r2);
          }
        }

        /**
         * Integers are represented as little endian array of 32-bit limbs.
         * Limbs number is a power of 2 and a multiple of 8 (256 bits).
         * Negative values use two's complement representation.
         */
        var bigint_asm = function (stdlib, foreign, buffer) {
          "use asm";

          var SP = 0;

          var HEAP32 = new stdlib.Uint32Array(buffer);

          var imul = stdlib.Math.imul;

          /**
           * Simple stack memory allocator
           *
           * Methods:
           *  sreset
           *  salloc
           *  sfree
           */

          function sreset(p) {
            p = p | 0;
            SP = p = (p + 31) & -32;
            return p | 0;
          }

          function salloc(l) {
            l = l | 0;
            var p = 0;
            p = SP;
            SP = (p + ((l + 31) & -32)) | 0;
            return p | 0;
          }

          function sfree(l) {
            l = l | 0;
            SP = (SP - ((l + 31) & -32)) | 0;
          }

          /**
           * Utility functions:
           *  cp
           *  z
           */

          function cp(l, A, B) {
            l = l | 0;
            A = A | 0;
            B = B | 0;

            var i = 0;

            if ((A | 0) > (B | 0)) {
              for (; (i | 0) < (l | 0); i = (i + 4) | 0) {
                HEAP32[(B + i) >> 2] = HEAP32[(A + i) >> 2];
              }
            } else {
              for (i = (l - 4) | 0; (i | 0) >= 0; i = (i - 4) | 0) {
                HEAP32[(B + i) >> 2] = HEAP32[(A + i) >> 2];
              }
            }
          }

          function z(l, z, A) {
            l = l | 0;
            z = z | 0;
            A = A | 0;

            var i = 0;

            for (; (i | 0) < (l | 0); i = (i + 4) | 0) {
              HEAP32[(A + i) >> 2] = z;
            }
          }

          /**
           * Negate the argument
           *
           * Perform two's complement transformation:
           *
           *  -A = ~A + 1
           *
           * @param A offset of the argment being negated, 32-byte aligned
           * @param lA length of the argument, multiple of 32
           *
           * @param R offset where to place the result to, 32-byte aligned
           * @param lR length to truncate the result to, multiple of 32
           */
          function neg(A, lA, R, lR) {
            A = A | 0;
            lA = lA | 0;
            R = R | 0;
            lR = lR | 0;

            var a = 0,
              c = 0,
              t = 0,
              r = 0,
              i = 0;

            if ((lR | 0) <= 0) lR = lA;

            if ((lR | 0) < (lA | 0)) lA = lR;

            c = 1;
            for (; (i | 0) < (lA | 0); i = (i + 4) | 0) {
              a = ~HEAP32[(A + i) >> 2];
              t = ((a & 0xffff) + c) | 0;
              r = ((a >>> 16) + (t >>> 16)) | 0;
              HEAP32[(R + i) >> 2] = (r << 16) | (t & 0xffff);
              c = r >>> 16;
            }

            for (; (i | 0) < (lR | 0); i = (i + 4) | 0) {
              HEAP32[(R + i) >> 2] = (c - 1) | 0;
            }

            return c | 0;
          }

          function cmp(A, lA, B, lB) {
            A = A | 0;
            lA = lA | 0;
            B = B | 0;
            lB = lB | 0;

            var a = 0,
              b = 0,
              i = 0;

            if ((lA | 0) > (lB | 0)) {
              for (i = (lA - 4) | 0; (i | 0) >= (lB | 0); i = (i - 4) | 0) {
                if (HEAP32[(A + i) >> 2] | 0) return 1;
              }
            } else {
              for (i = (lB - 4) | 0; (i | 0) >= (lA | 0); i = (i - 4) | 0) {
                if (HEAP32[(B + i) >> 2] | 0) return -1;
              }
            }

            for (; (i | 0) >= 0; i = (i - 4) | 0) {
              (a = HEAP32[(A + i) >> 2] | 0), (b = HEAP32[(B + i) >> 2] | 0);
              if (a >>> 0 < b >>> 0) return -1;
              if (a >>> 0 > b >>> 0) return 1;
            }

            return 0;
          }

          /**
           * Test the argument
           *
           * Same as `cmp` with zero.
           */
          function tst(A, lA) {
            A = A | 0;
            lA = lA | 0;

            var i = 0;

            for (i = (lA - 4) | 0; (i | 0) >= 0; i = (i - 4) | 0) {
              if (HEAP32[(A + i) >> 2] | 0) return (i + 4) | 0;
            }

            return 0;
          }

          /**
           * Conventional addition
           *
           * @param A offset of the first argument, 32-byte aligned
           * @param lA length of the first argument, multiple of 32
           *
           * @param B offset of the second argument, 32-bit aligned
           * @param lB length of the second argument, multiple of 32
           *
           * @param R offset where to place the result to, 32-byte aligned
           * @param lR length to truncate the result to, multiple of 32
           */
          function add(A, lA, B, lB, R, lR) {
            A = A | 0;
            lA = lA | 0;
            B = B | 0;
            lB = lB | 0;
            R = R | 0;
            lR = lR | 0;

            var a = 0,
              b = 0,
              c = 0,
              t = 0,
              r = 0,
              i = 0;

            if ((lA | 0) < (lB | 0)) {
              (t = A), (A = B), (B = t);
              (t = lA), (lA = lB), (lB = t);
            }

            if ((lR | 0) <= 0) lR = (lA + 4) | 0;

            if ((lR | 0) < (lB | 0)) lA = lB = lR;

            for (; (i | 0) < (lB | 0); i = (i + 4) | 0) {
              a = HEAP32[(A + i) >> 2] | 0;
              b = HEAP32[(B + i) >> 2] | 0;
              t = ((((a & 0xffff) + (b & 0xffff)) | 0) + c) | 0;
              r = ((((a >>> 16) + (b >>> 16)) | 0) + (t >>> 16)) | 0;
              HEAP32[(R + i) >> 2] = (t & 0xffff) | (r << 16);
              c = r >>> 16;
            }

            for (; (i | 0) < (lA | 0); i = (i + 4) | 0) {
              a = HEAP32[(A + i) >> 2] | 0;
              t = ((a & 0xffff) + c) | 0;
              r = ((a >>> 16) + (t >>> 16)) | 0;
              HEAP32[(R + i) >> 2] = (t & 0xffff) | (r << 16);
              c = r >>> 16;
            }

            for (; (i | 0) < (lR | 0); i = (i + 4) | 0) {
              HEAP32[(R + i) >> 2] = c | 0;
              c = 0;
            }

            return c | 0;
          }

          /**
           * Conventional subtraction
           *
           * @param A offset of the first argument, 32-byte aligned
           * @param lA length of the first argument, multiple of 32
           *
           * @param B offset of the second argument, 32-bit aligned
           * @param lB length of the second argument, multiple of 32
           *
           * @param R offset where to place the result to, 32-byte aligned
           * @param lR length to truncate the result to, multiple of 32
           */
          function sub(A, lA, B, lB, R, lR) {
            A = A | 0;
            lA = lA | 0;
            B = B | 0;
            lB = lB | 0;
            R = R | 0;
            lR = lR | 0;

            var a = 0,
              b = 0,
              c = 0,
              t = 0,
              r = 0,
              i = 0;

            if ((lR | 0) <= 0)
              lR = (lA | 0) > (lB | 0) ? (lA + 4) | 0 : (lB + 4) | 0;

            if ((lR | 0) < (lA | 0)) lA = lR;

            if ((lR | 0) < (lB | 0)) lB = lR;

            if ((lA | 0) < (lB | 0)) {
              for (; (i | 0) < (lA | 0); i = (i + 4) | 0) {
                a = HEAP32[(A + i) >> 2] | 0;
                b = HEAP32[(B + i) >> 2] | 0;
                t = ((((a & 0xffff) - (b & 0xffff)) | 0) + c) | 0;
                r = ((((a >>> 16) - (b >>> 16)) | 0) + (t >> 16)) | 0;
                HEAP32[(R + i) >> 2] = (t & 0xffff) | (r << 16);
                c = r >> 16;
              }

              for (; (i | 0) < (lB | 0); i = (i + 4) | 0) {
                b = HEAP32[(B + i) >> 2] | 0;
                t = (c - (b & 0xffff)) | 0;
                r = ((t >> 16) - (b >>> 16)) | 0;
                HEAP32[(R + i) >> 2] = (t & 0xffff) | (r << 16);
                c = r >> 16;
              }
            } else {
              for (; (i | 0) < (lB | 0); i = (i + 4) | 0) {
                a = HEAP32[(A + i) >> 2] | 0;
                b = HEAP32[(B + i) >> 2] | 0;
                t = ((((a & 0xffff) - (b & 0xffff)) | 0) + c) | 0;
                r = ((((a >>> 16) - (b >>> 16)) | 0) + (t >> 16)) | 0;
                HEAP32[(R + i) >> 2] = (t & 0xffff) | (r << 16);
                c = r >> 16;
              }

              for (; (i | 0) < (lA | 0); i = (i + 4) | 0) {
                a = HEAP32[(A + i) >> 2] | 0;
                t = ((a & 0xffff) + c) | 0;
                r = ((a >>> 16) + (t >> 16)) | 0;
                HEAP32[(R + i) >> 2] = (t & 0xffff) | (r << 16);
                c = r >> 16;
              }
            }

            for (; (i | 0) < (lR | 0); i = (i + 4) | 0) {
              HEAP32[(R + i) >> 2] = c | 0;
            }

            return c | 0;
          }

          /**
           * Conventional multiplication
           *
           * TODO implement Karatsuba algorithm for large multiplicands
           *
           * @param A offset of the first argument, 32-byte aligned
           * @param lA length of the first argument, multiple of 32
           *
           * @param B offset of the second argument, 32-byte aligned
           * @param lB length of the second argument, multiple of 32
           *
           * @param R offset where to place the result to, 32-byte aligned
           * @param lR length to truncate the result to, multiple of 32
           */
          function mul(A, lA, B, lB, R, lR) {
            A = A | 0;
            lA = lA | 0;
            B = B | 0;
            lB = lB | 0;
            R = R | 0;
            lR = lR | 0;

            var al0 = 0,
              al1 = 0,
              al2 = 0,
              al3 = 0,
              al4 = 0,
              al5 = 0,
              al6 = 0,
              al7 = 0,
              ah0 = 0,
              ah1 = 0,
              ah2 = 0,
              ah3 = 0,
              ah4 = 0,
              ah5 = 0,
              ah6 = 0,
              ah7 = 0,
              bl0 = 0,
              bl1 = 0,
              bl2 = 0,
              bl3 = 0,
              bl4 = 0,
              bl5 = 0,
              bl6 = 0,
              bl7 = 0,
              bh0 = 0,
              bh1 = 0,
              bh2 = 0,
              bh3 = 0,
              bh4 = 0,
              bh5 = 0,
              bh6 = 0,
              bh7 = 0,
              r0 = 0,
              r1 = 0,
              r2 = 0,
              r3 = 0,
              r4 = 0,
              r5 = 0,
              r6 = 0,
              r7 = 0,
              r8 = 0,
              r9 = 0,
              r10 = 0,
              r11 = 0,
              r12 = 0,
              r13 = 0,
              r14 = 0,
              r15 = 0,
              u = 0,
              v = 0,
              w = 0,
              m = 0,
              i = 0,
              Ai = 0,
              j = 0,
              Bj = 0,
              Rk = 0;

            if ((lA | 0) > (lB | 0)) {
              (u = A), (v = lA);
              (A = B), (lA = lB);
              (B = u), (lB = v);
            }

            m = (lA + lB) | 0;
            if (((lR | 0) > (m | 0)) | ((lR | 0) <= 0)) lR = m;

            if ((lR | 0) < (lA | 0)) lA = lR;

            if ((lR | 0) < (lB | 0)) lB = lR;

            for (; (i | 0) < (lA | 0); i = (i + 32) | 0) {
              Ai = (A + i) | 0;

              (ah0 = HEAP32[(Ai | 0) >> 2] | 0),
                (ah1 = HEAP32[(Ai | 4) >> 2] | 0),
                (ah2 = HEAP32[(Ai | 8) >> 2] | 0),
                (ah3 = HEAP32[(Ai | 12) >> 2] | 0),
                (ah4 = HEAP32[(Ai | 16) >> 2] | 0),
                (ah5 = HEAP32[(Ai | 20) >> 2] | 0),
                (ah6 = HEAP32[(Ai | 24) >> 2] | 0),
                (ah7 = HEAP32[(Ai | 28) >> 2] | 0),
                (al0 = ah0 & 0xffff),
                (al1 = ah1 & 0xffff),
                (al2 = ah2 & 0xffff),
                (al3 = ah3 & 0xffff),
                (al4 = ah4 & 0xffff),
                (al5 = ah5 & 0xffff),
                (al6 = ah6 & 0xffff),
                (al7 = ah7 & 0xffff),
                (ah0 = ah0 >>> 16),
                (ah1 = ah1 >>> 16),
                (ah2 = ah2 >>> 16),
                (ah3 = ah3 >>> 16),
                (ah4 = ah4 >>> 16),
                (ah5 = ah5 >>> 16),
                (ah6 = ah6 >>> 16),
                (ah7 = ah7 >>> 16);

              r8 = r9 = r10 = r11 = r12 = r13 = r14 = r15 = 0;

              for (j = 0; (j | 0) < (lB | 0); j = (j + 32) | 0) {
                Bj = (B + j) | 0;
                Rk = (R + ((i + j) | 0)) | 0;

                (bh0 = HEAP32[(Bj | 0) >> 2] | 0),
                  (bh1 = HEAP32[(Bj | 4) >> 2] | 0),
                  (bh2 = HEAP32[(Bj | 8) >> 2] | 0),
                  (bh3 = HEAP32[(Bj | 12) >> 2] | 0),
                  (bh4 = HEAP32[(Bj | 16) >> 2] | 0),
                  (bh5 = HEAP32[(Bj | 20) >> 2] | 0),
                  (bh6 = HEAP32[(Bj | 24) >> 2] | 0),
                  (bh7 = HEAP32[(Bj | 28) >> 2] | 0),
                  (bl0 = bh0 & 0xffff),
                  (bl1 = bh1 & 0xffff),
                  (bl2 = bh2 & 0xffff),
                  (bl3 = bh3 & 0xffff),
                  (bl4 = bh4 & 0xffff),
                  (bl5 = bh5 & 0xffff),
                  (bl6 = bh6 & 0xffff),
                  (bl7 = bh7 & 0xffff),
                  (bh0 = bh0 >>> 16),
                  (bh1 = bh1 >>> 16),
                  (bh2 = bh2 >>> 16),
                  (bh3 = bh3 >>> 16),
                  (bh4 = bh4 >>> 16),
                  (bh5 = bh5 >>> 16),
                  (bh6 = bh6 >>> 16),
                  (bh7 = bh7 >>> 16);

                (r0 = HEAP32[(Rk | 0) >> 2] | 0),
                  (r1 = HEAP32[(Rk | 4) >> 2] | 0),
                  (r2 = HEAP32[(Rk | 8) >> 2] | 0),
                  (r3 = HEAP32[(Rk | 12) >> 2] | 0),
                  (r4 = HEAP32[(Rk | 16) >> 2] | 0),
                  (r5 = HEAP32[(Rk | 20) >> 2] | 0),
                  (r6 = HEAP32[(Rk | 24) >> 2] | 0),
                  (r7 = HEAP32[(Rk | 28) >> 2] | 0);

                u =
                  ((((imul(al0, bl0) | 0) + (r8 & 0xffff)) | 0) +
                    (r0 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah0, bl0) | 0) + (r8 >>> 16)) | 0) + (r0 >>> 16)) |
                  0;
                w =
                  ((((imul(al0, bh0) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah0, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r0 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al0, bl1) | 0) + (m & 0xffff)) | 0) +
                    (r1 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah0, bl1) | 0) + (m >>> 16)) | 0) + (r1 >>> 16)) | 0;
                w =
                  ((((imul(al0, bh1) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah0, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r1 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al0, bl2) | 0) + (m & 0xffff)) | 0) +
                    (r2 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah0, bl2) | 0) + (m >>> 16)) | 0) + (r2 >>> 16)) | 0;
                w =
                  ((((imul(al0, bh2) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah0, bh2) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r2 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al0, bl3) | 0) + (m & 0xffff)) | 0) +
                    (r3 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah0, bl3) | 0) + (m >>> 16)) | 0) + (r3 >>> 16)) | 0;
                w =
                  ((((imul(al0, bh3) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah0, bh3) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r3 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al0, bl4) | 0) + (m & 0xffff)) | 0) +
                    (r4 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah0, bl4) | 0) + (m >>> 16)) | 0) + (r4 >>> 16)) | 0;
                w =
                  ((((imul(al0, bh4) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah0, bh4) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r4 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al0, bl5) | 0) + (m & 0xffff)) | 0) +
                    (r5 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah0, bl5) | 0) + (m >>> 16)) | 0) + (r5 >>> 16)) | 0;
                w =
                  ((((imul(al0, bh5) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah0, bh5) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r5 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al0, bl6) | 0) + (m & 0xffff)) | 0) +
                    (r6 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah0, bl6) | 0) + (m >>> 16)) | 0) + (r6 >>> 16)) | 0;
                w =
                  ((((imul(al0, bh6) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah0, bh6) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r6 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al0, bl7) | 0) + (m & 0xffff)) | 0) +
                    (r7 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah0, bl7) | 0) + (m >>> 16)) | 0) + (r7 >>> 16)) | 0;
                w =
                  ((((imul(al0, bh7) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah0, bh7) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r7 = (w << 16) | (u & 0xffff);

                r8 = m;

                u =
                  ((((imul(al1, bl0) | 0) + (r9 & 0xffff)) | 0) +
                    (r1 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah1, bl0) | 0) + (r9 >>> 16)) | 0) + (r1 >>> 16)) |
                  0;
                w =
                  ((((imul(al1, bh0) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah1, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r1 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al1, bl1) | 0) + (m & 0xffff)) | 0) +
                    (r2 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah1, bl1) | 0) + (m >>> 16)) | 0) + (r2 >>> 16)) | 0;
                w =
                  ((((imul(al1, bh1) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah1, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r2 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al1, bl2) | 0) + (m & 0xffff)) | 0) +
                    (r3 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah1, bl2) | 0) + (m >>> 16)) | 0) + (r3 >>> 16)) | 0;
                w =
                  ((((imul(al1, bh2) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah1, bh2) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r3 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al1, bl3) | 0) + (m & 0xffff)) | 0) +
                    (r4 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah1, bl3) | 0) + (m >>> 16)) | 0) + (r4 >>> 16)) | 0;
                w =
                  ((((imul(al1, bh3) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah1, bh3) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r4 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al1, bl4) | 0) + (m & 0xffff)) | 0) +
                    (r5 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah1, bl4) | 0) + (m >>> 16)) | 0) + (r5 >>> 16)) | 0;
                w =
                  ((((imul(al1, bh4) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah1, bh4) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r5 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al1, bl5) | 0) + (m & 0xffff)) | 0) +
                    (r6 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah1, bl5) | 0) + (m >>> 16)) | 0) + (r6 >>> 16)) | 0;
                w =
                  ((((imul(al1, bh5) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah1, bh5) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r6 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al1, bl6) | 0) + (m & 0xffff)) | 0) +
                    (r7 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah1, bl6) | 0) + (m >>> 16)) | 0) + (r7 >>> 16)) | 0;
                w =
                  ((((imul(al1, bh6) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah1, bh6) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r7 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al1, bl7) | 0) + (m & 0xffff)) | 0) +
                    (r8 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah1, bl7) | 0) + (m >>> 16)) | 0) + (r8 >>> 16)) | 0;
                w =
                  ((((imul(al1, bh7) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah1, bh7) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r8 = (w << 16) | (u & 0xffff);

                r9 = m;

                u =
                  ((((imul(al2, bl0) | 0) + (r10 & 0xffff)) | 0) +
                    (r2 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah2, bl0) | 0) + (r10 >>> 16)) | 0) + (r2 >>> 16)) |
                  0;
                w =
                  ((((imul(al2, bh0) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah2, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r2 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al2, bl1) | 0) + (m & 0xffff)) | 0) +
                    (r3 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah2, bl1) | 0) + (m >>> 16)) | 0) + (r3 >>> 16)) | 0;
                w =
                  ((((imul(al2, bh1) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah2, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r3 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al2, bl2) | 0) + (m & 0xffff)) | 0) +
                    (r4 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah2, bl2) | 0) + (m >>> 16)) | 0) + (r4 >>> 16)) | 0;
                w =
                  ((((imul(al2, bh2) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah2, bh2) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r4 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al2, bl3) | 0) + (m & 0xffff)) | 0) +
                    (r5 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah2, bl3) | 0) + (m >>> 16)) | 0) + (r5 >>> 16)) | 0;
                w =
                  ((((imul(al2, bh3) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah2, bh3) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r5 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al2, bl4) | 0) + (m & 0xffff)) | 0) +
                    (r6 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah2, bl4) | 0) + (m >>> 16)) | 0) + (r6 >>> 16)) | 0;
                w =
                  ((((imul(al2, bh4) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah2, bh4) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r6 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al2, bl5) | 0) + (m & 0xffff)) | 0) +
                    (r7 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah2, bl5) | 0) + (m >>> 16)) | 0) + (r7 >>> 16)) | 0;
                w =
                  ((((imul(al2, bh5) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah2, bh5) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r7 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al2, bl6) | 0) + (m & 0xffff)) | 0) +
                    (r8 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah2, bl6) | 0) + (m >>> 16)) | 0) + (r8 >>> 16)) | 0;
                w =
                  ((((imul(al2, bh6) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah2, bh6) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r8 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al2, bl7) | 0) + (m & 0xffff)) | 0) +
                    (r9 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah2, bl7) | 0) + (m >>> 16)) | 0) + (r9 >>> 16)) | 0;
                w =
                  ((((imul(al2, bh7) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah2, bh7) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r9 = (w << 16) | (u & 0xffff);

                r10 = m;

                u =
                  ((((imul(al3, bl0) | 0) + (r11 & 0xffff)) | 0) +
                    (r3 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah3, bl0) | 0) + (r11 >>> 16)) | 0) + (r3 >>> 16)) |
                  0;
                w =
                  ((((imul(al3, bh0) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah3, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r3 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al3, bl1) | 0) + (m & 0xffff)) | 0) +
                    (r4 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah3, bl1) | 0) + (m >>> 16)) | 0) + (r4 >>> 16)) | 0;
                w =
                  ((((imul(al3, bh1) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah3, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r4 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al3, bl2) | 0) + (m & 0xffff)) | 0) +
                    (r5 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah3, bl2) | 0) + (m >>> 16)) | 0) + (r5 >>> 16)) | 0;
                w =
                  ((((imul(al3, bh2) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah3, bh2) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r5 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al3, bl3) | 0) + (m & 0xffff)) | 0) +
                    (r6 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah3, bl3) | 0) + (m >>> 16)) | 0) + (r6 >>> 16)) | 0;
                w =
                  ((((imul(al3, bh3) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah3, bh3) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r6 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al3, bl4) | 0) + (m & 0xffff)) | 0) +
                    (r7 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah3, bl4) | 0) + (m >>> 16)) | 0) + (r7 >>> 16)) | 0;
                w =
                  ((((imul(al3, bh4) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah3, bh4) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r7 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al3, bl5) | 0) + (m & 0xffff)) | 0) +
                    (r8 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah3, bl5) | 0) + (m >>> 16)) | 0) + (r8 >>> 16)) | 0;
                w =
                  ((((imul(al3, bh5) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah3, bh5) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r8 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al3, bl6) | 0) + (m & 0xffff)) | 0) +
                    (r9 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah3, bl6) | 0) + (m >>> 16)) | 0) + (r9 >>> 16)) | 0;
                w =
                  ((((imul(al3, bh6) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah3, bh6) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r9 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al3, bl7) | 0) + (m & 0xffff)) | 0) +
                    (r10 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah3, bl7) | 0) + (m >>> 16)) | 0) + (r10 >>> 16)) |
                  0;
                w =
                  ((((imul(al3, bh7) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah3, bh7) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r10 = (w << 16) | (u & 0xffff);

                r11 = m;

                u =
                  ((((imul(al4, bl0) | 0) + (r12 & 0xffff)) | 0) +
                    (r4 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah4, bl0) | 0) + (r12 >>> 16)) | 0) + (r4 >>> 16)) |
                  0;
                w =
                  ((((imul(al4, bh0) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah4, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r4 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al4, bl1) | 0) + (m & 0xffff)) | 0) +
                    (r5 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah4, bl1) | 0) + (m >>> 16)) | 0) + (r5 >>> 16)) | 0;
                w =
                  ((((imul(al4, bh1) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah4, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r5 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al4, bl2) | 0) + (m & 0xffff)) | 0) +
                    (r6 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah4, bl2) | 0) + (m >>> 16)) | 0) + (r6 >>> 16)) | 0;
                w =
                  ((((imul(al4, bh2) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah4, bh2) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r6 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al4, bl3) | 0) + (m & 0xffff)) | 0) +
                    (r7 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah4, bl3) | 0) + (m >>> 16)) | 0) + (r7 >>> 16)) | 0;
                w =
                  ((((imul(al4, bh3) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah4, bh3) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r7 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al4, bl4) | 0) + (m & 0xffff)) | 0) +
                    (r8 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah4, bl4) | 0) + (m >>> 16)) | 0) + (r8 >>> 16)) | 0;
                w =
                  ((((imul(al4, bh4) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah4, bh4) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r8 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al4, bl5) | 0) + (m & 0xffff)) | 0) +
                    (r9 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah4, bl5) | 0) + (m >>> 16)) | 0) + (r9 >>> 16)) | 0;
                w =
                  ((((imul(al4, bh5) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah4, bh5) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r9 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al4, bl6) | 0) + (m & 0xffff)) | 0) +
                    (r10 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah4, bl6) | 0) + (m >>> 16)) | 0) + (r10 >>> 16)) |
                  0;
                w =
                  ((((imul(al4, bh6) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah4, bh6) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r10 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al4, bl7) | 0) + (m & 0xffff)) | 0) +
                    (r11 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah4, bl7) | 0) + (m >>> 16)) | 0) + (r11 >>> 16)) |
                  0;
                w =
                  ((((imul(al4, bh7) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah4, bh7) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r11 = (w << 16) | (u & 0xffff);

                r12 = m;

                u =
                  ((((imul(al5, bl0) | 0) + (r13 & 0xffff)) | 0) +
                    (r5 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah5, bl0) | 0) + (r13 >>> 16)) | 0) + (r5 >>> 16)) |
                  0;
                w =
                  ((((imul(al5, bh0) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah5, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r5 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al5, bl1) | 0) + (m & 0xffff)) | 0) +
                    (r6 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah5, bl1) | 0) + (m >>> 16)) | 0) + (r6 >>> 16)) | 0;
                w =
                  ((((imul(al5, bh1) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah5, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r6 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al5, bl2) | 0) + (m & 0xffff)) | 0) +
                    (r7 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah5, bl2) | 0) + (m >>> 16)) | 0) + (r7 >>> 16)) | 0;
                w =
                  ((((imul(al5, bh2) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah5, bh2) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r7 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al5, bl3) | 0) + (m & 0xffff)) | 0) +
                    (r8 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah5, bl3) | 0) + (m >>> 16)) | 0) + (r8 >>> 16)) | 0;
                w =
                  ((((imul(al5, bh3) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah5, bh3) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r8 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al5, bl4) | 0) + (m & 0xffff)) | 0) +
                    (r9 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah5, bl4) | 0) + (m >>> 16)) | 0) + (r9 >>> 16)) | 0;
                w =
                  ((((imul(al5, bh4) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah5, bh4) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r9 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al5, bl5) | 0) + (m & 0xffff)) | 0) +
                    (r10 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah5, bl5) | 0) + (m >>> 16)) | 0) + (r10 >>> 16)) |
                  0;
                w =
                  ((((imul(al5, bh5) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah5, bh5) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r10 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al5, bl6) | 0) + (m & 0xffff)) | 0) +
                    (r11 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah5, bl6) | 0) + (m >>> 16)) | 0) + (r11 >>> 16)) |
                  0;
                w =
                  ((((imul(al5, bh6) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah5, bh6) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r11 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al5, bl7) | 0) + (m & 0xffff)) | 0) +
                    (r12 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah5, bl7) | 0) + (m >>> 16)) | 0) + (r12 >>> 16)) |
                  0;
                w =
                  ((((imul(al5, bh7) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah5, bh7) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r12 = (w << 16) | (u & 0xffff);

                r13 = m;

                u =
                  ((((imul(al6, bl0) | 0) + (r14 & 0xffff)) | 0) +
                    (r6 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah6, bl0) | 0) + (r14 >>> 16)) | 0) + (r6 >>> 16)) |
                  0;
                w =
                  ((((imul(al6, bh0) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah6, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r6 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al6, bl1) | 0) + (m & 0xffff)) | 0) +
                    (r7 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah6, bl1) | 0) + (m >>> 16)) | 0) + (r7 >>> 16)) | 0;
                w =
                  ((((imul(al6, bh1) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah6, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r7 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al6, bl2) | 0) + (m & 0xffff)) | 0) +
                    (r8 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah6, bl2) | 0) + (m >>> 16)) | 0) + (r8 >>> 16)) | 0;
                w =
                  ((((imul(al6, bh2) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah6, bh2) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r8 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al6, bl3) | 0) + (m & 0xffff)) | 0) +
                    (r9 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah6, bl3) | 0) + (m >>> 16)) | 0) + (r9 >>> 16)) | 0;
                w =
                  ((((imul(al6, bh3) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah6, bh3) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r9 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al6, bl4) | 0) + (m & 0xffff)) | 0) +
                    (r10 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah6, bl4) | 0) + (m >>> 16)) | 0) + (r10 >>> 16)) |
                  0;
                w =
                  ((((imul(al6, bh4) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah6, bh4) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r10 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al6, bl5) | 0) + (m & 0xffff)) | 0) +
                    (r11 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah6, bl5) | 0) + (m >>> 16)) | 0) + (r11 >>> 16)) |
                  0;
                w =
                  ((((imul(al6, bh5) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah6, bh5) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r11 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al6, bl6) | 0) + (m & 0xffff)) | 0) +
                    (r12 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah6, bl6) | 0) + (m >>> 16)) | 0) + (r12 >>> 16)) |
                  0;
                w =
                  ((((imul(al6, bh6) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah6, bh6) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r12 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al6, bl7) | 0) + (m & 0xffff)) | 0) +
                    (r13 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah6, bl7) | 0) + (m >>> 16)) | 0) + (r13 >>> 16)) |
                  0;
                w =
                  ((((imul(al6, bh7) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah6, bh7) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r13 = (w << 16) | (u & 0xffff);

                r14 = m;

                u =
                  ((((imul(al7, bl0) | 0) + (r15 & 0xffff)) | 0) +
                    (r7 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah7, bl0) | 0) + (r15 >>> 16)) | 0) + (r7 >>> 16)) |
                  0;
                w =
                  ((((imul(al7, bh0) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah7, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r7 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al7, bl1) | 0) + (m & 0xffff)) | 0) +
                    (r8 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah7, bl1) | 0) + (m >>> 16)) | 0) + (r8 >>> 16)) | 0;
                w =
                  ((((imul(al7, bh1) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah7, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r8 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al7, bl2) | 0) + (m & 0xffff)) | 0) +
                    (r9 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah7, bl2) | 0) + (m >>> 16)) | 0) + (r9 >>> 16)) | 0;
                w =
                  ((((imul(al7, bh2) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah7, bh2) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r9 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al7, bl3) | 0) + (m & 0xffff)) | 0) +
                    (r10 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah7, bl3) | 0) + (m >>> 16)) | 0) + (r10 >>> 16)) |
                  0;
                w =
                  ((((imul(al7, bh3) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah7, bh3) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r10 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al7, bl4) | 0) + (m & 0xffff)) | 0) +
                    (r11 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah7, bl4) | 0) + (m >>> 16)) | 0) + (r11 >>> 16)) |
                  0;
                w =
                  ((((imul(al7, bh4) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah7, bh4) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r11 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al7, bl5) | 0) + (m & 0xffff)) | 0) +
                    (r12 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah7, bl5) | 0) + (m >>> 16)) | 0) + (r12 >>> 16)) |
                  0;
                w =
                  ((((imul(al7, bh5) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah7, bh5) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r12 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al7, bl6) | 0) + (m & 0xffff)) | 0) +
                    (r13 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah7, bl6) | 0) + (m >>> 16)) | 0) + (r13 >>> 16)) |
                  0;
                w =
                  ((((imul(al7, bh6) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah7, bh6) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r13 = (w << 16) | (u & 0xffff);

                u =
                  ((((imul(al7, bl7) | 0) + (m & 0xffff)) | 0) +
                    (r14 & 0xffff)) |
                  0;
                v =
                  ((((imul(ah7, bl7) | 0) + (m >>> 16)) | 0) + (r14 >>> 16)) |
                  0;
                w =
                  ((((imul(al7, bh7) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) |
                  0;
                m =
                  ((((imul(ah7, bh7) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
                r14 = (w << 16) | (u & 0xffff);

                r15 = m;

                (HEAP32[(Rk | 0) >> 2] = r0),
                  (HEAP32[(Rk | 4) >> 2] = r1),
                  (HEAP32[(Rk | 8) >> 2] = r2),
                  (HEAP32[(Rk | 12) >> 2] = r3),
                  (HEAP32[(Rk | 16) >> 2] = r4),
                  (HEAP32[(Rk | 20) >> 2] = r5),
                  (HEAP32[(Rk | 24) >> 2] = r6),
                  (HEAP32[(Rk | 28) >> 2] = r7);
              }

              Rk = (R + ((i + j) | 0)) | 0;
              (HEAP32[(Rk | 0) >> 2] = r8),
                (HEAP32[(Rk | 4) >> 2] = r9),
                (HEAP32[(Rk | 8) >> 2] = r10),
                (HEAP32[(Rk | 12) >> 2] = r11),
                (HEAP32[(Rk | 16) >> 2] = r12),
                (HEAP32[(Rk | 20) >> 2] = r13),
                (HEAP32[(Rk | 24) >> 2] = r14),
                (HEAP32[(Rk | 28) >> 2] = r15);
            }
            /*
        for ( i = lA & -32; (i|0) < (lA|0); i = (i+4)|0 ) {
            Ai = (A+i)|0;

            ah0 = HEAP32[Ai>>2]|0,
            al0 = ah0 & 0xffff,
            ah0 = ah0 >>> 16;

            r1 = 0;

            for ( j = 0; (j|0) < (lB|0); j = (j+4)|0 ) {
                Bj = (B+j)|0;
                Rk = (R+(i+j|0))|0;

                bh0 = HEAP32[Bj>>2]|0,
                bl0 = bh0 & 0xffff,
                bh0 = bh0 >>> 16;

                r0 = HEAP32[Rk>>2]|0;

                u = ((imul(al0, bl0)|0) + (r1 & 0xffff)|0) + (r0 & 0xffff)|0;
                v = ((imul(ah0, bl0)|0) + (r1 >>> 16)|0) + (r0 >>> 16)|0;
                w = ((imul(al0, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;
                m = ((imul(ah0, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;
                r0 = (w << 16) | (u & 0xffff);

                r1 = m;

                HEAP32[Rk>>2] = r0;
            }

            Rk = (R+(i+j|0))|0;
            HEAP32[Rk>>2] = r1;
        }
*/
          }

          /**
           * Fast squaring
           *
           * Exploits the fact:
           *
           *  X² = ( X0 + X1*B )² = X0² + 2*X0*X1*B + X1²*B²,
           *
           * where B is a power of 2, so:
           *
           *  2*X0*X1*B = (X0*X1 << 1)*B
           *
           * @param A offset of the argument being squared, 32-byte aligned
           * @param lA length of the argument, multiple of 32
           *
           * @param R offset where to place the result to, 32-byte aligned
           */
          function sqr(A, lA, R) {
            A = A | 0;
            lA = lA | 0;
            R = R | 0;

            var al0 = 0,
              al1 = 0,
              al2 = 0,
              al3 = 0,
              al4 = 0,
              al5 = 0,
              al6 = 0,
              al7 = 0,
              ah0 = 0,
              ah1 = 0,
              ah2 = 0,
              ah3 = 0,
              ah4 = 0,
              ah5 = 0,
              ah6 = 0,
              ah7 = 0,
              bl0 = 0,
              bl1 = 0,
              bl2 = 0,
              bl3 = 0,
              bl4 = 0,
              bl5 = 0,
              bl6 = 0,
              bl7 = 0,
              bh0 = 0,
              bh1 = 0,
              bh2 = 0,
              bh3 = 0,
              bh4 = 0,
              bh5 = 0,
              bh6 = 0,
              bh7 = 0,
              r0 = 0,
              r1 = 0,
              r2 = 0,
              r3 = 0,
              r4 = 0,
              r5 = 0,
              r6 = 0,
              r7 = 0,
              r8 = 0,
              r9 = 0,
              r10 = 0,
              r11 = 0,
              r12 = 0,
              r13 = 0,
              r14 = 0,
              r15 = 0,
              u = 0,
              v = 0,
              w = 0,
              c = 0,
              h = 0,
              m = 0,
              r = 0,
              d = 0,
              dd = 0,
              p = 0,
              i = 0,
              j = 0,
              k = 0,
              Ai = 0,
              Aj = 0,
              Rk = 0;

            // prepare for iterations
            for (; (i | 0) < (lA | 0); i = (i + 4) | 0) {
              Rk = (R + (i << 1)) | 0;
              (ah0 = HEAP32[(A + i) >> 2] | 0),
                (al0 = ah0 & 0xffff),
                (ah0 = ah0 >>> 16);
              u = imul(al0, al0) | 0;
              v = ((imul(al0, ah0) | 0) + (u >>> 17)) | 0;
              w = ((imul(ah0, ah0) | 0) + (v >>> 15)) | 0;
              HEAP32[Rk >> 2] = (v << 17) | (u & 0x1ffff);
              HEAP32[(Rk | 4) >> 2] = w;
            }

            // unrolled 1st iteration
            for (p = 0; (p | 0) < (lA | 0); p = (p + 8) | 0) {
              (Ai = (A + p) | 0), (Rk = (R + (p << 1)) | 0);

              (ah0 = HEAP32[Ai >> 2] | 0),
                (al0 = ah0 & 0xffff),
                (ah0 = ah0 >>> 16);

              (bh0 = HEAP32[(Ai | 4) >> 2] | 0),
                (bl0 = bh0 & 0xffff),
                (bh0 = bh0 >>> 16);

              u = imul(al0, bl0) | 0;
              v = ((imul(al0, bh0) | 0) + (u >>> 16)) | 0;
              w = ((imul(ah0, bl0) | 0) + (v & 0xffff)) | 0;
              m = ((((imul(ah0, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;

              r = HEAP32[(Rk | 4) >> 2] | 0;
              u = ((r & 0xffff) + ((u & 0xffff) << 1)) | 0;
              w = ((((r >>> 16) + ((w & 0xffff) << 1)) | 0) + (u >>> 16)) | 0;
              HEAP32[(Rk | 4) >> 2] = (w << 16) | (u & 0xffff);
              c = w >>> 16;

              r = HEAP32[(Rk | 8) >> 2] | 0;
              u = ((((r & 0xffff) + ((m & 0xffff) << 1)) | 0) + c) | 0;
              w = ((((r >>> 16) + ((m >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
              HEAP32[(Rk | 8) >> 2] = (w << 16) | (u & 0xffff);
              c = w >>> 16;

              if (c) {
                r = HEAP32[(Rk | 12) >> 2] | 0;
                u = ((r & 0xffff) + c) | 0;
                w = ((r >>> 16) + (u >>> 16)) | 0;
                HEAP32[(Rk | 12) >> 2] = (w << 16) | (u & 0xffff);
              }
            }

            // unrolled 2nd iteration
            for (p = 0; (p | 0) < (lA | 0); p = (p + 16) | 0) {
              (Ai = (A + p) | 0), (Rk = (R + (p << 1)) | 0);

              (ah0 = HEAP32[Ai >> 2] | 0),
                (al0 = ah0 & 0xffff),
                (ah0 = ah0 >>> 16),
                (ah1 = HEAP32[(Ai | 4) >> 2] | 0),
                (al1 = ah1 & 0xffff),
                (ah1 = ah1 >>> 16);

              (bh0 = HEAP32[(Ai | 8) >> 2] | 0),
                (bl0 = bh0 & 0xffff),
                (bh0 = bh0 >>> 16),
                (bh1 = HEAP32[(Ai | 12) >> 2] | 0),
                (bl1 = bh1 & 0xffff),
                (bh1 = bh1 >>> 16);

              u = imul(al0, bl0) | 0;
              v = imul(ah0, bl0) | 0;
              w =
                ((((imul(al0, bh0) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) | 0;
              m = ((((imul(ah0, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
              r0 = (w << 16) | (u & 0xffff);

              u = ((imul(al0, bl1) | 0) + (m & 0xffff)) | 0;
              v = ((imul(ah0, bl1) | 0) + (m >>> 16)) | 0;
              w =
                ((((imul(al0, bh1) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) | 0;
              m = ((((imul(ah0, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
              r1 = (w << 16) | (u & 0xffff);

              r2 = m;

              u = ((imul(al1, bl0) | 0) + (r1 & 0xffff)) | 0;
              v = ((imul(ah1, bl0) | 0) + (r1 >>> 16)) | 0;
              w =
                ((((imul(al1, bh0) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) | 0;
              m = ((((imul(ah1, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
              r1 = (w << 16) | (u & 0xffff);

              u =
                ((((imul(al1, bl1) | 0) + (r2 & 0xffff)) | 0) + (m & 0xffff)) |
                0;
              v = ((((imul(ah1, bl1) | 0) + (r2 >>> 16)) | 0) + (m >>> 16)) | 0;
              w =
                ((((imul(al1, bh1) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) | 0;
              m = ((((imul(ah1, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
              r2 = (w << 16) | (u & 0xffff);

              r3 = m;

              r = HEAP32[(Rk | 8) >> 2] | 0;
              u = ((r & 0xffff) + ((r0 & 0xffff) << 1)) | 0;
              w = ((((r >>> 16) + ((r0 >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
              HEAP32[(Rk | 8) >> 2] = (w << 16) | (u & 0xffff);
              c = w >>> 16;

              r = HEAP32[(Rk | 12) >> 2] | 0;
              u = ((((r & 0xffff) + ((r1 & 0xffff) << 1)) | 0) + c) | 0;
              w = ((((r >>> 16) + ((r1 >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
              HEAP32[(Rk | 12) >> 2] = (w << 16) | (u & 0xffff);
              c = w >>> 16;

              r = HEAP32[(Rk | 16) >> 2] | 0;
              u = ((((r & 0xffff) + ((r2 & 0xffff) << 1)) | 0) + c) | 0;
              w = ((((r >>> 16) + ((r2 >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
              HEAP32[(Rk | 16) >> 2] = (w << 16) | (u & 0xffff);
              c = w >>> 16;

              r = HEAP32[(Rk | 20) >> 2] | 0;
              u = ((((r & 0xffff) + ((r3 & 0xffff) << 1)) | 0) + c) | 0;
              w = ((((r >>> 16) + ((r3 >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
              HEAP32[(Rk | 20) >> 2] = (w << 16) | (u & 0xffff);
              c = w >>> 16;

              for (k = 24; !!c & ((k | 0) < 32); k = (k + 4) | 0) {
                r = HEAP32[(Rk | k) >> 2] | 0;
                u = ((r & 0xffff) + c) | 0;
                w = ((r >>> 16) + (u >>> 16)) | 0;
                HEAP32[(Rk | k) >> 2] = (w << 16) | (u & 0xffff);
                c = w >>> 16;
              }
            }

            // unrolled 3rd iteration
            for (p = 0; (p | 0) < (lA | 0); p = (p + 32) | 0) {
              (Ai = (A + p) | 0), (Rk = (R + (p << 1)) | 0);

              (ah0 = HEAP32[Ai >> 2] | 0),
                (al0 = ah0 & 0xffff),
                (ah0 = ah0 >>> 16),
                (ah1 = HEAP32[(Ai | 4) >> 2] | 0),
                (al1 = ah1 & 0xffff),
                (ah1 = ah1 >>> 16),
                (ah2 = HEAP32[(Ai | 8) >> 2] | 0),
                (al2 = ah2 & 0xffff),
                (ah2 = ah2 >>> 16),
                (ah3 = HEAP32[(Ai | 12) >> 2] | 0),
                (al3 = ah3 & 0xffff),
                (ah3 = ah3 >>> 16);

              (bh0 = HEAP32[(Ai | 16) >> 2] | 0),
                (bl0 = bh0 & 0xffff),
                (bh0 = bh0 >>> 16),
                (bh1 = HEAP32[(Ai | 20) >> 2] | 0),
                (bl1 = bh1 & 0xffff),
                (bh1 = bh1 >>> 16),
                (bh2 = HEAP32[(Ai | 24) >> 2] | 0),
                (bl2 = bh2 & 0xffff),
                (bh2 = bh2 >>> 16),
                (bh3 = HEAP32[(Ai | 28) >> 2] | 0),
                (bl3 = bh3 & 0xffff),
                (bh3 = bh3 >>> 16);

              u = imul(al0, bl0) | 0;
              v = imul(ah0, bl0) | 0;
              w =
                ((((imul(al0, bh0) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) | 0;
              m = ((((imul(ah0, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
              r0 = (w << 16) | (u & 0xffff);

              u = ((imul(al0, bl1) | 0) + (m & 0xffff)) | 0;
              v = ((imul(ah0, bl1) | 0) + (m >>> 16)) | 0;
              w =
                ((((imul(al0, bh1) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) | 0;
              m = ((((imul(ah0, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
              r1 = (w << 16) | (u & 0xffff);

              u = ((imul(al0, bl2) | 0) + (m & 0xffff)) | 0;
              v = ((imul(ah0, bl2) | 0) + (m >>> 16)) | 0;
              w =
                ((((imul(al0, bh2) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) | 0;
              m = ((((imul(ah0, bh2) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
              r2 = (w << 16) | (u & 0xffff);

              u = ((imul(al0, bl3) | 0) + (m & 0xffff)) | 0;
              v = ((imul(ah0, bl3) | 0) + (m >>> 16)) | 0;
              w =
                ((((imul(al0, bh3) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) | 0;
              m = ((((imul(ah0, bh3) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
              r3 = (w << 16) | (u & 0xffff);

              r4 = m;

              u = ((imul(al1, bl0) | 0) + (r1 & 0xffff)) | 0;
              v = ((imul(ah1, bl0) | 0) + (r1 >>> 16)) | 0;
              w =
                ((((imul(al1, bh0) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) | 0;
              m = ((((imul(ah1, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
              r1 = (w << 16) | (u & 0xffff);

              u =
                ((((imul(al1, bl1) | 0) + (r2 & 0xffff)) | 0) + (m & 0xffff)) |
                0;
              v = ((((imul(ah1, bl1) | 0) + (r2 >>> 16)) | 0) + (m >>> 16)) | 0;
              w =
                ((((imul(al1, bh1) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) | 0;
              m = ((((imul(ah1, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
              r2 = (w << 16) | (u & 0xffff);

              u =
                ((((imul(al1, bl2) | 0) + (r3 & 0xffff)) | 0) + (m & 0xffff)) |
                0;
              v = ((((imul(ah1, bl2) | 0) + (r3 >>> 16)) | 0) + (m >>> 16)) | 0;
              w =
                ((((imul(al1, bh2) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) | 0;
              m = ((((imul(ah1, bh2) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
              r3 = (w << 16) | (u & 0xffff);

              u =
                ((((imul(al1, bl3) | 0) + (r4 & 0xffff)) | 0) + (m & 0xffff)) |
                0;
              v = ((((imul(ah1, bl3) | 0) + (r4 >>> 16)) | 0) + (m >>> 16)) | 0;
              w =
                ((((imul(al1, bh3) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) | 0;
              m = ((((imul(ah1, bh3) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
              r4 = (w << 16) | (u & 0xffff);

              r5 = m;

              u = ((imul(al2, bl0) | 0) + (r2 & 0xffff)) | 0;
              v = ((imul(ah2, bl0) | 0) + (r2 >>> 16)) | 0;
              w =
                ((((imul(al2, bh0) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) | 0;
              m = ((((imul(ah2, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
              r2 = (w << 16) | (u & 0xffff);

              u =
                ((((imul(al2, bl1) | 0) + (r3 & 0xffff)) | 0) + (m & 0xffff)) |
                0;
              v = ((((imul(ah2, bl1) | 0) + (r3 >>> 16)) | 0) + (m >>> 16)) | 0;
              w =
                ((((imul(al2, bh1) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) | 0;
              m = ((((imul(ah2, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
              r3 = (w << 16) | (u & 0xffff);

              u =
                ((((imul(al2, bl2) | 0) + (r4 & 0xffff)) | 0) + (m & 0xffff)) |
                0;
              v = ((((imul(ah2, bl2) | 0) + (r4 >>> 16)) | 0) + (m >>> 16)) | 0;
              w =
                ((((imul(al2, bh2) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) | 0;
              m = ((((imul(ah2, bh2) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
              r4 = (w << 16) | (u & 0xffff);

              u =
                ((((imul(al2, bl3) | 0) + (r5 & 0xffff)) | 0) + (m & 0xffff)) |
                0;
              v = ((((imul(ah2, bl3) | 0) + (r5 >>> 16)) | 0) + (m >>> 16)) | 0;
              w =
                ((((imul(al2, bh3) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) | 0;
              m = ((((imul(ah2, bh3) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
              r5 = (w << 16) | (u & 0xffff);

              r6 = m;

              u = ((imul(al3, bl0) | 0) + (r3 & 0xffff)) | 0;
              v = ((imul(ah3, bl0) | 0) + (r3 >>> 16)) | 0;
              w =
                ((((imul(al3, bh0) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) | 0;
              m = ((((imul(ah3, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
              r3 = (w << 16) | (u & 0xffff);

              u =
                ((((imul(al3, bl1) | 0) + (r4 & 0xffff)) | 0) + (m & 0xffff)) |
                0;
              v = ((((imul(ah3, bl1) | 0) + (r4 >>> 16)) | 0) + (m >>> 16)) | 0;
              w =
                ((((imul(al3, bh1) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) | 0;
              m = ((((imul(ah3, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
              r4 = (w << 16) | (u & 0xffff);

              u =
                ((((imul(al3, bl2) | 0) + (r5 & 0xffff)) | 0) + (m & 0xffff)) |
                0;
              v = ((((imul(ah3, bl2) | 0) + (r5 >>> 16)) | 0) + (m >>> 16)) | 0;
              w =
                ((((imul(al3, bh2) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) | 0;
              m = ((((imul(ah3, bh2) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
              r5 = (w << 16) | (u & 0xffff);

              u =
                ((((imul(al3, bl3) | 0) + (r6 & 0xffff)) | 0) + (m & 0xffff)) |
                0;
              v = ((((imul(ah3, bl3) | 0) + (r6 >>> 16)) | 0) + (m >>> 16)) | 0;
              w =
                ((((imul(al3, bh3) | 0) + (v & 0xffff)) | 0) + (u >>> 16)) | 0;
              m = ((((imul(ah3, bh3) | 0) + (v >>> 16)) | 0) + (w >>> 16)) | 0;
              r6 = (w << 16) | (u & 0xffff);

              r7 = m;

              r = HEAP32[(Rk | 16) >> 2] | 0;
              u = ((r & 0xffff) + ((r0 & 0xffff) << 1)) | 0;
              w = ((((r >>> 16) + ((r0 >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
              HEAP32[(Rk | 16) >> 2] = (w << 16) | (u & 0xffff);
              c = w >>> 16;

              r = HEAP32[(Rk | 20) >> 2] | 0;
              u = ((((r & 0xffff) + ((r1 & 0xffff) << 1)) | 0) + c) | 0;
              w = ((((r >>> 16) + ((r1 >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
              HEAP32[(Rk | 20) >> 2] = (w << 16) | (u & 0xffff);
              c = w >>> 16;

              r = HEAP32[(Rk | 24) >> 2] | 0;
              u = ((((r & 0xffff) + ((r2 & 0xffff) << 1)) | 0) + c) | 0;
              w = ((((r >>> 16) + ((r2 >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
              HEAP32[(Rk | 24) >> 2] = (w << 16) | (u & 0xffff);
              c = w >>> 16;

              r = HEAP32[(Rk | 28) >> 2] | 0;
              u = ((((r & 0xffff) + ((r3 & 0xffff) << 1)) | 0) + c) | 0;
              w = ((((r >>> 16) + ((r3 >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
              HEAP32[(Rk | 28) >> 2] = (w << 16) | (u & 0xffff);
              c = w >>> 16;

              r = HEAP32[(Rk + 32) >> 2] | 0;
              u = ((((r & 0xffff) + ((r4 & 0xffff) << 1)) | 0) + c) | 0;
              w = ((((r >>> 16) + ((r4 >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
              HEAP32[(Rk + 32) >> 2] = (w << 16) | (u & 0xffff);
              c = w >>> 16;

              r = HEAP32[(Rk + 36) >> 2] | 0;
              u = ((((r & 0xffff) + ((r5 & 0xffff) << 1)) | 0) + c) | 0;
              w = ((((r >>> 16) + ((r5 >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
              HEAP32[(Rk + 36) >> 2] = (w << 16) | (u & 0xffff);
              c = w >>> 16;

              r = HEAP32[(Rk + 40) >> 2] | 0;
              u = ((((r & 0xffff) + ((r6 & 0xffff) << 1)) | 0) + c) | 0;
              w = ((((r >>> 16) + ((r6 >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
              HEAP32[(Rk + 40) >> 2] = (w << 16) | (u & 0xffff);
              c = w >>> 16;

              r = HEAP32[(Rk + 44) >> 2] | 0;
              u = ((((r & 0xffff) + ((r7 & 0xffff) << 1)) | 0) + c) | 0;
              w = ((((r >>> 16) + ((r7 >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
              HEAP32[(Rk + 44) >> 2] = (w << 16) | (u & 0xffff);
              c = w >>> 16;

              for (k = 48; !!c & ((k | 0) < 64); k = (k + 4) | 0) {
                r = HEAP32[(Rk + k) >> 2] | 0;
                u = ((r & 0xffff) + c) | 0;
                w = ((r >>> 16) + (u >>> 16)) | 0;
                HEAP32[(Rk + k) >> 2] = (w << 16) | (u & 0xffff);
                c = w >>> 16;
              }
            }

            // perform iterations
            for (d = 32; (d | 0) < (lA | 0); d = d << 1) {
              // depth loop
              dd = d << 1;

              for (p = 0; (p | 0) < (lA | 0); p = (p + dd) | 0) {
                // part loop
                Rk = (R + (p << 1)) | 0;

                h = 0;
                for (i = 0; (i | 0) < (d | 0); i = (i + 32) | 0) {
                  // multiply-and-add loop
                  Ai = (((A + p) | 0) + i) | 0;

                  (ah0 = HEAP32[Ai >> 2] | 0),
                    (al0 = ah0 & 0xffff),
                    (ah0 = ah0 >>> 16),
                    (ah1 = HEAP32[(Ai | 4) >> 2] | 0),
                    (al1 = ah1 & 0xffff),
                    (ah1 = ah1 >>> 16),
                    (ah2 = HEAP32[(Ai | 8) >> 2] | 0),
                    (al2 = ah2 & 0xffff),
                    (ah2 = ah2 >>> 16),
                    (ah3 = HEAP32[(Ai | 12) >> 2] | 0),
                    (al3 = ah3 & 0xffff),
                    (ah3 = ah3 >>> 16),
                    (ah4 = HEAP32[(Ai | 16) >> 2] | 0),
                    (al4 = ah4 & 0xffff),
                    (ah4 = ah4 >>> 16),
                    (ah5 = HEAP32[(Ai | 20) >> 2] | 0),
                    (al5 = ah5 & 0xffff),
                    (ah5 = ah5 >>> 16),
                    (ah6 = HEAP32[(Ai | 24) >> 2] | 0),
                    (al6 = ah6 & 0xffff),
                    (ah6 = ah6 >>> 16),
                    (ah7 = HEAP32[(Ai | 28) >> 2] | 0),
                    (al7 = ah7 & 0xffff),
                    (ah7 = ah7 >>> 16);

                  r8 = r9 = r10 = r11 = r12 = r13 = r14 = r15 = c = 0;

                  for (j = 0; (j | 0) < (d | 0); j = (j + 32) | 0) {
                    Aj = (((((A + p) | 0) + d) | 0) + j) | 0;

                    (bh0 = HEAP32[Aj >> 2] | 0),
                      (bl0 = bh0 & 0xffff),
                      (bh0 = bh0 >>> 16),
                      (bh1 = HEAP32[(Aj | 4) >> 2] | 0),
                      (bl1 = bh1 & 0xffff),
                      (bh1 = bh1 >>> 16),
                      (bh2 = HEAP32[(Aj | 8) >> 2] | 0),
                      (bl2 = bh2 & 0xffff),
                      (bh2 = bh2 >>> 16),
                      (bh3 = HEAP32[(Aj | 12) >> 2] | 0),
                      (bl3 = bh3 & 0xffff),
                      (bh3 = bh3 >>> 16),
                      (bh4 = HEAP32[(Aj | 16) >> 2] | 0),
                      (bl4 = bh4 & 0xffff),
                      (bh4 = bh4 >>> 16),
                      (bh5 = HEAP32[(Aj | 20) >> 2] | 0),
                      (bl5 = bh5 & 0xffff),
                      (bh5 = bh5 >>> 16),
                      (bh6 = HEAP32[(Aj | 24) >> 2] | 0),
                      (bl6 = bh6 & 0xffff),
                      (bh6 = bh6 >>> 16),
                      (bh7 = HEAP32[(Aj | 28) >> 2] | 0),
                      (bl7 = bh7 & 0xffff),
                      (bh7 = bh7 >>> 16);

                    r0 = r1 = r2 = r3 = r4 = r5 = r6 = r7 = 0;

                    u =
                      ((((imul(al0, bl0) | 0) + (r0 & 0xffff)) | 0) +
                        (r8 & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah0, bl0) | 0) + (r0 >>> 16)) | 0) +
                        (r8 >>> 16)) |
                      0;
                    w =
                      ((((imul(al0, bh0) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah0, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r0 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al0, bl1) | 0) + (r1 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah0, bl1) | 0) + (r1 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al0, bh1) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah0, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r1 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al0, bl2) | 0) + (r2 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah0, bl2) | 0) + (r2 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al0, bh2) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah0, bh2) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r2 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al0, bl3) | 0) + (r3 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah0, bl3) | 0) + (r3 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al0, bh3) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah0, bh3) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r3 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al0, bl4) | 0) + (r4 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah0, bl4) | 0) + (r4 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al0, bh4) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah0, bh4) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r4 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al0, bl5) | 0) + (r5 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah0, bl5) | 0) + (r5 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al0, bh5) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah0, bh5) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r5 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al0, bl6) | 0) + (r6 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah0, bl6) | 0) + (r6 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al0, bh6) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah0, bh6) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r6 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al0, bl7) | 0) + (r7 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah0, bl7) | 0) + (r7 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al0, bh7) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah0, bh7) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r7 = (w << 16) | (u & 0xffff);

                    r8 = m;

                    u =
                      ((((imul(al1, bl0) | 0) + (r1 & 0xffff)) | 0) +
                        (r9 & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah1, bl0) | 0) + (r1 >>> 16)) | 0) +
                        (r9 >>> 16)) |
                      0;
                    w =
                      ((((imul(al1, bh0) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah1, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r1 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al1, bl1) | 0) + (r2 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah1, bl1) | 0) + (r2 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al1, bh1) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah1, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r2 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al1, bl2) | 0) + (r3 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah1, bl2) | 0) + (r3 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al1, bh2) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah1, bh2) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r3 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al1, bl3) | 0) + (r4 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah1, bl3) | 0) + (r4 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al1, bh3) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah1, bh3) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r4 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al1, bl4) | 0) + (r5 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah1, bl4) | 0) + (r5 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al1, bh4) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah1, bh4) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r5 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al1, bl5) | 0) + (r6 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah1, bl5) | 0) + (r6 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al1, bh5) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah1, bh5) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r6 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al1, bl6) | 0) + (r7 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah1, bl6) | 0) + (r7 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al1, bh6) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah1, bh6) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r7 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al1, bl7) | 0) + (r8 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah1, bl7) | 0) + (r8 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al1, bh7) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah1, bh7) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r8 = (w << 16) | (u & 0xffff);

                    r9 = m;

                    u =
                      ((((imul(al2, bl0) | 0) + (r2 & 0xffff)) | 0) +
                        (r10 & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah2, bl0) | 0) + (r2 >>> 16)) | 0) +
                        (r10 >>> 16)) |
                      0;
                    w =
                      ((((imul(al2, bh0) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah2, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r2 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al2, bl1) | 0) + (r3 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah2, bl1) | 0) + (r3 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al2, bh1) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah2, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r3 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al2, bl2) | 0) + (r4 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah2, bl2) | 0) + (r4 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al2, bh2) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah2, bh2) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r4 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al2, bl3) | 0) + (r5 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah2, bl3) | 0) + (r5 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al2, bh3) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah2, bh3) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r5 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al2, bl4) | 0) + (r6 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah2, bl4) | 0) + (r6 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al2, bh4) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah2, bh4) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r6 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al2, bl5) | 0) + (r7 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah2, bl5) | 0) + (r7 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al2, bh5) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah2, bh5) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r7 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al2, bl6) | 0) + (r8 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah2, bl6) | 0) + (r8 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al2, bh6) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah2, bh6) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r8 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al2, bl7) | 0) + (r9 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah2, bl7) | 0) + (r9 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al2, bh7) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah2, bh7) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r9 = (w << 16) | (u & 0xffff);

                    r10 = m;

                    u =
                      ((((imul(al3, bl0) | 0) + (r3 & 0xffff)) | 0) +
                        (r11 & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah3, bl0) | 0) + (r3 >>> 16)) | 0) +
                        (r11 >>> 16)) |
                      0;
                    w =
                      ((((imul(al3, bh0) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah3, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r3 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al3, bl1) | 0) + (r4 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah3, bl1) | 0) + (r4 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al3, bh1) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah3, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r4 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al3, bl2) | 0) + (r5 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah3, bl2) | 0) + (r5 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al3, bh2) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah3, bh2) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r5 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al3, bl3) | 0) + (r6 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah3, bl3) | 0) + (r6 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al3, bh3) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah3, bh3) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r6 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al3, bl4) | 0) + (r7 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah3, bl4) | 0) + (r7 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al3, bh4) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah3, bh4) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r7 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al3, bl5) | 0) + (r8 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah3, bl5) | 0) + (r8 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al3, bh5) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah3, bh5) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r8 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al3, bl6) | 0) + (r9 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah3, bl6) | 0) + (r9 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al3, bh6) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah3, bh6) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r9 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al3, bl7) | 0) + (r10 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah3, bl7) | 0) + (r10 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al3, bh7) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah3, bh7) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r10 = (w << 16) | (u & 0xffff);

                    r11 = m;

                    u =
                      ((((imul(al4, bl0) | 0) + (r4 & 0xffff)) | 0) +
                        (r12 & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah4, bl0) | 0) + (r4 >>> 16)) | 0) +
                        (r12 >>> 16)) |
                      0;
                    w =
                      ((((imul(al4, bh0) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah4, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r4 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al4, bl1) | 0) + (r5 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah4, bl1) | 0) + (r5 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al4, bh1) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah4, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r5 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al4, bl2) | 0) + (r6 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah4, bl2) | 0) + (r6 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al4, bh2) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah4, bh2) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r6 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al4, bl3) | 0) + (r7 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah4, bl3) | 0) + (r7 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al4, bh3) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah4, bh3) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r7 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al4, bl4) | 0) + (r8 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah4, bl4) | 0) + (r8 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al4, bh4) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah4, bh4) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r8 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al4, bl5) | 0) + (r9 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah4, bl5) | 0) + (r9 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al4, bh5) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah4, bh5) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r9 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al4, bl6) | 0) + (r10 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah4, bl6) | 0) + (r10 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al4, bh6) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah4, bh6) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r10 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al4, bl7) | 0) + (r11 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah4, bl7) | 0) + (r11 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al4, bh7) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah4, bh7) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r11 = (w << 16) | (u & 0xffff);

                    r12 = m;

                    u =
                      ((((imul(al5, bl0) | 0) + (r5 & 0xffff)) | 0) +
                        (r13 & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah5, bl0) | 0) + (r5 >>> 16)) | 0) +
                        (r13 >>> 16)) |
                      0;
                    w =
                      ((((imul(al5, bh0) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah5, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r5 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al5, bl1) | 0) + (r6 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah5, bl1) | 0) + (r6 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al5, bh1) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah5, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r6 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al5, bl2) | 0) + (r7 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah5, bl2) | 0) + (r7 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al5, bh2) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah5, bh2) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r7 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al5, bl3) | 0) + (r8 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah5, bl3) | 0) + (r8 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al5, bh3) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah5, bh3) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r8 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al5, bl4) | 0) + (r9 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah5, bl4) | 0) + (r9 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al5, bh4) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah5, bh4) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r9 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al5, bl5) | 0) + (r10 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah5, bl5) | 0) + (r10 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al5, bh5) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah5, bh5) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r10 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al5, bl6) | 0) + (r11 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah5, bl6) | 0) + (r11 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al5, bh6) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah5, bh6) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r11 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al5, bl7) | 0) + (r12 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah5, bl7) | 0) + (r12 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al5, bh7) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah5, bh7) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r12 = (w << 16) | (u & 0xffff);

                    r13 = m;

                    u =
                      ((((imul(al6, bl0) | 0) + (r6 & 0xffff)) | 0) +
                        (r14 & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah6, bl0) | 0) + (r6 >>> 16)) | 0) +
                        (r14 >>> 16)) |
                      0;
                    w =
                      ((((imul(al6, bh0) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah6, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r6 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al6, bl1) | 0) + (r7 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah6, bl1) | 0) + (r7 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al6, bh1) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah6, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r7 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al6, bl2) | 0) + (r8 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah6, bl2) | 0) + (r8 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al6, bh2) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah6, bh2) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r8 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al6, bl3) | 0) + (r9 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah6, bl3) | 0) + (r9 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al6, bh3) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah6, bh3) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r9 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al6, bl4) | 0) + (r10 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah6, bl4) | 0) + (r10 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al6, bh4) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah6, bh4) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r10 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al6, bl5) | 0) + (r11 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah6, bl5) | 0) + (r11 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al6, bh5) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah6, bh5) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r11 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al6, bl6) | 0) + (r12 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah6, bl6) | 0) + (r12 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al6, bh6) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah6, bh6) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r12 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al6, bl7) | 0) + (r13 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah6, bl7) | 0) + (r13 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al6, bh7) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah6, bh7) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r13 = (w << 16) | (u & 0xffff);

                    r14 = m;

                    u =
                      ((((imul(al7, bl0) | 0) + (r7 & 0xffff)) | 0) +
                        (r15 & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah7, bl0) | 0) + (r7 >>> 16)) | 0) +
                        (r15 >>> 16)) |
                      0;
                    w =
                      ((((imul(al7, bh0) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah7, bh0) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r7 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al7, bl1) | 0) + (r8 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah7, bl1) | 0) + (r8 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al7, bh1) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah7, bh1) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r8 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al7, bl2) | 0) + (r9 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah7, bl2) | 0) + (r9 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al7, bh2) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah7, bh2) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r9 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al7, bl3) | 0) + (r10 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah7, bl3) | 0) + (r10 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al7, bh3) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah7, bh3) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r10 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al7, bl4) | 0) + (r11 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah7, bl4) | 0) + (r11 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al7, bh4) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah7, bh4) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r11 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al7, bl5) | 0) + (r12 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah7, bl5) | 0) + (r12 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al7, bh5) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah7, bh5) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r12 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al7, bl6) | 0) + (r13 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah7, bl6) | 0) + (r13 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al7, bh6) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah7, bh6) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r13 = (w << 16) | (u & 0xffff);

                    u =
                      ((((imul(al7, bl7) | 0) + (r14 & 0xffff)) | 0) +
                        (m & 0xffff)) |
                      0;
                    v =
                      ((((imul(ah7, bl7) | 0) + (r14 >>> 16)) | 0) +
                        (m >>> 16)) |
                      0;
                    w =
                      ((((imul(al7, bh7) | 0) + (v & 0xffff)) | 0) +
                        (u >>> 16)) |
                      0;
                    m =
                      ((((imul(ah7, bh7) | 0) + (v >>> 16)) | 0) + (w >>> 16)) |
                      0;
                    r14 = (w << 16) | (u & 0xffff);

                    r15 = m;

                    k = (d + ((i + j) | 0)) | 0;
                    r = HEAP32[(Rk + k) >> 2] | 0;
                    u = ((((r & 0xffff) + ((r0 & 0xffff) << 1)) | 0) + c) | 0;
                    w =
                      ((((r >>> 16) + ((r0 >>> 16) << 1)) | 0) + (u >>> 16)) |
                      0;
                    HEAP32[(Rk + k) >> 2] = (w << 16) | (u & 0xffff);
                    c = w >>> 16;

                    k = (k + 4) | 0;
                    r = HEAP32[(Rk + k) >> 2] | 0;
                    u = ((((r & 0xffff) + ((r1 & 0xffff) << 1)) | 0) + c) | 0;
                    w =
                      ((((r >>> 16) + ((r1 >>> 16) << 1)) | 0) + (u >>> 16)) |
                      0;
                    HEAP32[(Rk + k) >> 2] = (w << 16) | (u & 0xffff);
                    c = w >>> 16;

                    k = (k + 4) | 0;
                    r = HEAP32[(Rk + k) >> 2] | 0;
                    u = ((((r & 0xffff) + ((r2 & 0xffff) << 1)) | 0) + c) | 0;
                    w =
                      ((((r >>> 16) + ((r2 >>> 16) << 1)) | 0) + (u >>> 16)) |
                      0;
                    HEAP32[(Rk + k) >> 2] = (w << 16) | (u & 0xffff);
                    c = w >>> 16;

                    k = (k + 4) | 0;
                    r = HEAP32[(Rk + k) >> 2] | 0;
                    u = ((((r & 0xffff) + ((r3 & 0xffff) << 1)) | 0) + c) | 0;
                    w =
                      ((((r >>> 16) + ((r3 >>> 16) << 1)) | 0) + (u >>> 16)) |
                      0;
                    HEAP32[(Rk + k) >> 2] = (w << 16) | (u & 0xffff);
                    c = w >>> 16;

                    k = (k + 4) | 0;
                    r = HEAP32[(Rk + k) >> 2] | 0;
                    u = ((((r & 0xffff) + ((r4 & 0xffff) << 1)) | 0) + c) | 0;
                    w =
                      ((((r >>> 16) + ((r4 >>> 16) << 1)) | 0) + (u >>> 16)) |
                      0;
                    HEAP32[(Rk + k) >> 2] = (w << 16) | (u & 0xffff);
                    c = w >>> 16;

                    k = (k + 4) | 0;
                    r = HEAP32[(Rk + k) >> 2] | 0;
                    u = ((((r & 0xffff) + ((r5 & 0xffff) << 1)) | 0) + c) | 0;
                    w =
                      ((((r >>> 16) + ((r5 >>> 16) << 1)) | 0) + (u >>> 16)) |
                      0;
                    HEAP32[(Rk + k) >> 2] = (w << 16) | (u & 0xffff);
                    c = w >>> 16;

                    k = (k + 4) | 0;
                    r = HEAP32[(Rk + k) >> 2] | 0;
                    u = ((((r & 0xffff) + ((r6 & 0xffff) << 1)) | 0) + c) | 0;
                    w =
                      ((((r >>> 16) + ((r6 >>> 16) << 1)) | 0) + (u >>> 16)) |
                      0;
                    HEAP32[(Rk + k) >> 2] = (w << 16) | (u & 0xffff);
                    c = w >>> 16;

                    k = (k + 4) | 0;
                    r = HEAP32[(Rk + k) >> 2] | 0;
                    u = ((((r & 0xffff) + ((r7 & 0xffff) << 1)) | 0) + c) | 0;
                    w =
                      ((((r >>> 16) + ((r7 >>> 16) << 1)) | 0) + (u >>> 16)) |
                      0;
                    HEAP32[(Rk + k) >> 2] = (w << 16) | (u & 0xffff);
                    c = w >>> 16;
                  }

                  k = (d + ((i + j) | 0)) | 0;
                  r = HEAP32[(Rk + k) >> 2] | 0;
                  u =
                    ((((((r & 0xffff) + ((r8 & 0xffff) << 1)) | 0) + c) | 0) +
                      h) |
                    0;
                  w =
                    ((((r >>> 16) + ((r8 >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
                  HEAP32[(Rk + k) >> 2] = (w << 16) | (u & 0xffff);
                  c = w >>> 16;

                  k = (k + 4) | 0;
                  r = HEAP32[(Rk + k) >> 2] | 0;
                  u = ((((r & 0xffff) + ((r9 & 0xffff) << 1)) | 0) + c) | 0;
                  w =
                    ((((r >>> 16) + ((r9 >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
                  HEAP32[(Rk + k) >> 2] = (w << 16) | (u & 0xffff);
                  c = w >>> 16;

                  k = (k + 4) | 0;
                  r = HEAP32[(Rk + k) >> 2] | 0;
                  u = ((((r & 0xffff) + ((r10 & 0xffff) << 1)) | 0) + c) | 0;
                  w =
                    ((((r >>> 16) + ((r10 >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
                  HEAP32[(Rk + k) >> 2] = (w << 16) | (u & 0xffff);
                  c = w >>> 16;

                  k = (k + 4) | 0;
                  r = HEAP32[(Rk + k) >> 2] | 0;
                  u = ((((r & 0xffff) + ((r11 & 0xffff) << 1)) | 0) + c) | 0;
                  w =
                    ((((r >>> 16) + ((r11 >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
                  HEAP32[(Rk + k) >> 2] = (w << 16) | (u & 0xffff);
                  c = w >>> 16;

                  k = (k + 4) | 0;
                  r = HEAP32[(Rk + k) >> 2] | 0;
                  u = ((((r & 0xffff) + ((r12 & 0xffff) << 1)) | 0) + c) | 0;
                  w =
                    ((((r >>> 16) + ((r12 >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
                  HEAP32[(Rk + k) >> 2] = (w << 16) | (u & 0xffff);
                  c = w >>> 16;

                  k = (k + 4) | 0;
                  r = HEAP32[(Rk + k) >> 2] | 0;
                  u = ((((r & 0xffff) + ((r13 & 0xffff) << 1)) | 0) + c) | 0;
                  w =
                    ((((r >>> 16) + ((r13 >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
                  HEAP32[(Rk + k) >> 2] = (w << 16) | (u & 0xffff);
                  c = w >>> 16;

                  k = (k + 4) | 0;
                  r = HEAP32[(Rk + k) >> 2] | 0;
                  u = ((((r & 0xffff) + ((r14 & 0xffff) << 1)) | 0) + c) | 0;
                  w =
                    ((((r >>> 16) + ((r14 >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
                  HEAP32[(Rk + k) >> 2] = (w << 16) | (u & 0xffff);
                  c = w >>> 16;

                  k = (k + 4) | 0;
                  r = HEAP32[(Rk + k) >> 2] | 0;
                  u = ((((r & 0xffff) + ((r15 & 0xffff) << 1)) | 0) + c) | 0;
                  w =
                    ((((r >>> 16) + ((r15 >>> 16) << 1)) | 0) + (u >>> 16)) | 0;
                  HEAP32[(Rk + k) >> 2] = (w << 16) | (u & 0xffff);
                  h = w >>> 16;
                }

                for (
                  k = (k + 4) | 0;
                  !!h & ((k | 0) < dd << 1);
                  k = (k + 4) | 0
                ) {
                  // carry propagation loop
                  r = HEAP32[(Rk + k) >> 2] | 0;
                  u = ((r & 0xffff) + h) | 0;
                  w = ((r >>> 16) + (u >>> 16)) | 0;
                  HEAP32[(Rk + k) >> 2] = (w << 16) | (u & 0xffff);
                  h = w >>> 16;
                }
              }
            }
          }

          /**
           * Conventional division
           *
           * @param A offset of the numerator, 32-byte aligned
           * @param lA length of the numerator, multiple of 32
           *
           * @param B offset of the divisor, 32-byte aligned
           * @param lB length of the divisor, multiple of 32
           *
           * @param R offset where to place the remainder to, 32-byte aligned
           *
           * @param Q offser where to place the quotient to, 32-byte aligned
           */

          function div(N, lN, D, lD, Q) {
            N = N | 0;
            lN = lN | 0;
            D = D | 0;
            lD = lD | 0;
            Q = Q | 0;

            var n = 0,
              d = 0,
              e = 0,
              u1 = 0,
              u0 = 0,
              v0 = 0,
              vh = 0,
              vl = 0,
              qh = 0,
              ql = 0,
              rh = 0,
              rl = 0,
              t1 = 0,
              t2 = 0,
              m = 0,
              c = 0,
              i = 0,
              j = 0,
              k = 0;

            // number of significant limbs in `N` (multiplied by 4)
            for (i = (lN - 1) & -4; (i | 0) >= 0; i = (i - 4) | 0) {
              n = HEAP32[(N + i) >> 2] | 0;
              if (n) {
                lN = i;
                break;
              }
            }

            // number of significant limbs in `D` (multiplied by 4)
            for (i = (lD - 1) & -4; (i | 0) >= 0; i = (i - 4) | 0) {
              d = HEAP32[(D + i) >> 2] | 0;
              if (d) {
                lD = i;
                break;
              }
            }

            // `D` is zero? WTF?!

            // calculate `e` — the power of 2 of the normalization factor
            while ((d & 0x80000000) == 0) {
              d = d << 1;
              e = (e + 1) | 0;
            }

            // normalize `N` in place
            u0 = HEAP32[(N + lN) >> 2] | 0;
            if (e) {
              u1 = u0 >>> ((32 - e) | 0);
              for (i = (lN - 4) | 0; (i | 0) >= 0; i = (i - 4) | 0) {
                n = HEAP32[(N + i) >> 2] | 0;
                HEAP32[(N + i + 4) >> 2] =
                  (u0 << e) | (e ? n >>> ((32 - e) | 0) : 0);
                u0 = n;
              }
              HEAP32[N >> 2] = u0 << e;
            }

            // normalize `D` in place
            if (e) {
              v0 = HEAP32[(D + lD) >> 2] | 0;
              for (i = (lD - 4) | 0; (i | 0) >= 0; i = (i - 4) | 0) {
                d = HEAP32[(D + i) >> 2] | 0;
                HEAP32[(D + i + 4) >> 2] = (v0 << e) | (d >>> ((32 - e) | 0));
                v0 = d;
              }
              HEAP32[D >> 2] = v0 << e;
            }

            // divisor parts won't change
            v0 = HEAP32[(D + lD) >> 2] | 0;
            (vh = v0 >>> 16), (vl = v0 & 0xffff);

            // perform division
            for (i = lN; (i | 0) >= (lD | 0); i = (i - 4) | 0) {
              j = (i - lD) | 0;

              // estimate high part of the quotient
              u0 = HEAP32[(N + i) >> 2] | 0;
              (qh = ((u1 >>> 0) / (vh >>> 0)) | 0),
                (rh = (u1 >>> 0) % (vh >>> 0) | 0),
                (t1 = imul(qh, vl) | 0);
              while (
                ((qh | 0) == 0x10000) |
                (t1 >>> 0 > ((rh << 16) | (u0 >>> 16)) >>> 0)
              ) {
                (qh = (qh - 1) | 0), (rh = (rh + vh) | 0), (t1 = (t1 - vl) | 0);
                if ((rh | 0) >= 0x10000) break;
              }

              // bulk multiply-and-subtract
              // m - multiplication carry, c - subtraction carry
              (m = 0), (c = 0);
              for (k = 0; (k | 0) <= (lD | 0); k = (k + 4) | 0) {
                d = HEAP32[(D + k) >> 2] | 0;
                t1 = ((imul(qh, d & 0xffff) | 0) + (m >>> 16)) | 0;
                t2 = ((imul(qh, d >>> 16) | 0) + (t1 >>> 16)) | 0;
                d = (m & 0xffff) | (t1 << 16);
                m = t2;
                n = HEAP32[(N + j + k) >> 2] | 0;
                t1 = ((((n & 0xffff) - (d & 0xffff)) | 0) + c) | 0;
                t2 = ((((n >>> 16) - (d >>> 16)) | 0) + (t1 >> 16)) | 0;
                HEAP32[(N + j + k) >> 2] = (t2 << 16) | (t1 & 0xffff);
                c = t2 >> 16;
              }
              t1 = ((((u1 & 0xffff) - (m & 0xffff)) | 0) + c) | 0;
              t2 = ((((u1 >>> 16) - (m >>> 16)) | 0) + (t1 >> 16)) | 0;
              u1 = (t2 << 16) | (t1 & 0xffff);
              c = t2 >> 16;

              // add `D` back if got carry-out
              if (c) {
                qh = (qh - 1) | 0;
                c = 0;
                for (k = 0; (k | 0) <= (lD | 0); k = (k + 4) | 0) {
                  d = HEAP32[(D + k) >> 2] | 0;
                  n = HEAP32[(N + j + k) >> 2] | 0;
                  t1 = ((n & 0xffff) + c) | 0;
                  t2 = ((n >>> 16) + d + (t1 >>> 16)) | 0;
                  HEAP32[(N + j + k) >> 2] = (t2 << 16) | (t1 & 0xffff);
                  c = t2 >>> 16;
                }
                u1 = (u1 + c) | 0;
              }

              // estimate low part of the quotient
              u0 = HEAP32[(N + i) >> 2] | 0;
              n = (u1 << 16) | (u0 >>> 16);
              (ql = ((n >>> 0) / (vh >>> 0)) | 0),
                (rl = (n >>> 0) % (vh >>> 0) | 0),
                (t1 = imul(ql, vl) | 0);
              while (
                ((ql | 0) == 0x10000) |
                (t1 >>> 0 > ((rl << 16) | (u0 & 0xffff)) >>> 0)
              ) {
                (ql = (ql - 1) | 0), (rl = (rl + vh) | 0), (t1 = (t1 - vl) | 0);
                if ((rl | 0) >= 0x10000) break;
              }

              // bulk multiply-and-subtract
              // m - multiplication carry, c - subtraction carry
              (m = 0), (c = 0);
              for (k = 0; (k | 0) <= (lD | 0); k = (k + 4) | 0) {
                d = HEAP32[(D + k) >> 2] | 0;
                t1 = ((imul(ql, d & 0xffff) | 0) + (m & 0xffff)) | 0;
                t2 =
                  ((((imul(ql, d >>> 16) | 0) + (t1 >>> 16)) | 0) +
                    (m >>> 16)) |
                  0;
                d = (t1 & 0xffff) | (t2 << 16);
                m = t2 >>> 16;
                n = HEAP32[(N + j + k) >> 2] | 0;
                t1 = ((((n & 0xffff) - (d & 0xffff)) | 0) + c) | 0;
                t2 = ((((n >>> 16) - (d >>> 16)) | 0) + (t1 >> 16)) | 0;
                c = t2 >> 16;
                HEAP32[(N + j + k) >> 2] = (t2 << 16) | (t1 & 0xffff);
              }
              t1 = ((((u1 & 0xffff) - (m & 0xffff)) | 0) + c) | 0;
              t2 = ((((u1 >>> 16) - (m >>> 16)) | 0) + (t1 >> 16)) | 0;
              c = t2 >> 16;

              // add `D` back if got carry-out
              if (c) {
                ql = (ql - 1) | 0;
                c = 0;
                for (k = 0; (k | 0) <= (lD | 0); k = (k + 4) | 0) {
                  d = HEAP32[(D + k) >> 2] | 0;
                  n = HEAP32[(N + j + k) >> 2] | 0;
                  t1 = ((((n & 0xffff) + (d & 0xffff)) | 0) + c) | 0;
                  t2 = ((((n >>> 16) + (d >>> 16)) | 0) + (t1 >>> 16)) | 0;
                  c = t2 >>> 16;
                  HEAP32[(N + j + k) >> 2] = (t1 & 0xffff) | (t2 << 16);
                }
              }

              // got quotient limb
              HEAP32[(Q + j) >> 2] = (qh << 16) | ql;

              u1 = HEAP32[(N + i) >> 2] | 0;
            }

            if (e) {
              // TODO denormalize `D` in place

              // denormalize `N` in place
              u0 = HEAP32[N >> 2] | 0;
              for (i = 4; (i | 0) <= (lD | 0); i = (i + 4) | 0) {
                n = HEAP32[(N + i) >> 2] | 0;
                HEAP32[(N + i - 4) >> 2] = (n << ((32 - e) | 0)) | (u0 >>> e);
                u0 = n;
              }
              HEAP32[(N + lD) >> 2] = u0 >>> e;
            }
          }

          /**
           * Montgomery modular reduction
           *
           * Definition:
           *
           *  MREDC(A) = A × X (mod N),
           *  M × X = N × Y + 1,
           *
           * where M = 2^(32*m) such that N < M and A < N×M
           *
           * Numbers `X` and `Y` can be calculated using Extended Euclidean Algorithm.
           */
          function mredc(A, lA, N, lN, y, R) {
            A = A | 0;
            lA = lA | 0;
            N = N | 0;
            lN = lN | 0;
            y = y | 0;
            R = R | 0;

            var T = 0,
              c = 0,
              uh = 0,
              ul = 0,
              vl = 0,
              vh = 0,
              w0 = 0,
              w1 = 0,
              w2 = 0,
              r0 = 0,
              r1 = 0,
              i = 0,
              j = 0,
              k = 0;

            T = salloc(lN << 1) | 0;
            z(lN << 1, 0, T);

            cp(lA, A, T);

            // HAC 14.32
            for (i = 0; (i | 0) < (lN | 0); i = (i + 4) | 0) {
              (uh = HEAP32[(T + i) >> 2] | 0),
                (ul = uh & 0xffff),
                (uh = uh >>> 16);
              (vh = y >>> 16), (vl = y & 0xffff);
              (w0 = imul(ul, vl) | 0),
                (w1 =
                  ((((imul(ul, vh) | 0) + (imul(uh, vl) | 0)) | 0) +
                    (w0 >>> 16)) |
                  0);
              (ul = w0 & 0xffff), (uh = w1 & 0xffff);
              r1 = 0;
              for (j = 0; (j | 0) < (lN | 0); j = (j + 4) | 0) {
                k = (i + j) | 0;
                (vh = HEAP32[(N + j) >> 2] | 0),
                  (vl = vh & 0xffff),
                  (vh = vh >>> 16);
                r0 = HEAP32[(T + k) >> 2] | 0;
                w0 =
                  ((((imul(ul, vl) | 0) + (r1 & 0xffff)) | 0) + (r0 & 0xffff)) |
                  0;
                w1 =
                  ((((imul(ul, vh) | 0) + (r1 >>> 16)) | 0) + (r0 >>> 16)) | 0;
                w2 =
                  ((((imul(uh, vl) | 0) + (w1 & 0xffff)) | 0) + (w0 >>> 16)) |
                  0;
                r1 =
                  ((((imul(uh, vh) | 0) + (w2 >>> 16)) | 0) + (w1 >>> 16)) | 0;
                r0 = (w2 << 16) | (w0 & 0xffff);
                HEAP32[(T + k) >> 2] = r0;
              }
              k = (i + j) | 0;
              r0 = HEAP32[(T + k) >> 2] | 0;
              w0 = ((((r0 & 0xffff) + (r1 & 0xffff)) | 0) + c) | 0;
              w1 = ((((r0 >>> 16) + (r1 >>> 16)) | 0) + (w0 >>> 16)) | 0;
              HEAP32[(T + k) >> 2] = (w1 << 16) | (w0 & 0xffff);
              c = w1 >>> 16;
            }

            cp(lN, (T + lN) | 0, R);

            sfree(lN << 1);

            if (c | ((cmp(N, lN, R, lN) | 0) <= 0)) {
              sub(R, lN, N, lN, R, lN) | 0;
            }
          }

          return {
            sreset: sreset,
            salloc: salloc,
            sfree: sfree,
            z: z,
            tst: tst,
            neg: neg,
            cmp: cmp,
            add: add,
            sub: sub,
            mul: mul,
            sqr: sqr,
            div: div,
            mredc: mredc,
          };
        };

        function Number_extGCD(a, b) {
          var sa = a < 0 ? -1 : 1,
            sb = b < 0 ? -1 : 1,
            xi = 1,
            xj = 0,
            yi = 0,
            yj = 1,
            r,
            q,
            t,
            a_cmp_b;
          a *= sa;
          b *= sb;
          a_cmp_b = a < b;
          if (a_cmp_b) {
            t = a;
            (a = b), (b = t);
            t = sa;
            sa = sb;
            sb = t;
          }
          (q = Math.floor(a / b)), (r = a - q * b);
          while (r) {
            (t = xi - q * xj), (xi = xj), (xj = t);
            (t = yi - q * yj), (yi = yj), (yj = t);
            (a = b), (b = r);
            (q = Math.floor(a / b)), (r = a - q * b);
          }
          xj *= sa;
          yj *= sb;
          if (a_cmp_b) {
            t = xj;
            (xj = yj), (yj = t);
          }
          return {
            gcd: b,
            x: xj,
            y: yj,
          };
        }
        function BigNumber_extGCD(a, b) {
          let sa = a.sign;
          let sb = b.sign;
          if (sa < 0) a = a.negate();
          if (sb < 0) b = b.negate();
          const a_cmp_b = a.compare(b);
          if (a_cmp_b < 0) {
            let t = a;
            (a = b), (b = t);
            let t2 = sa;
            sa = sb;
            sb = t2;
          }
          var xi = BigNumber.ONE,
            xj = BigNumber.ZERO,
            lx = b.bitLength,
            yi = BigNumber.ZERO,
            yj = BigNumber.ONE,
            ly = a.bitLength,
            z,
            r,
            q;
          z = a.divide(b);
          while ((r = z.remainder) !== BigNumber.ZERO) {
            q = z.quotient;
            (z = xi.subtract(q.multiply(xj).clamp(lx)).clamp(lx)),
              (xi = xj),
              (xj = z);
            (z = yi.subtract(q.multiply(yj).clamp(ly)).clamp(ly)),
              (yi = yj),
              (yj = z);
            (a = b), (b = r);
            z = a.divide(b);
          }
          if (sa < 0) xj = xj.negate();
          if (sb < 0) yj = yj.negate();
          if (a_cmp_b < 0) {
            let t = xj;
            (xj = yj), (yj = t);
          }
          return {
            gcd: b,
            x: xj,
            y: yj,
          };
        }

        function getRandomValues(buf) {
          if (typeof process !== "undefined") {
            const nodeCrypto = __webpack_require__(/*! crypto */ "?4d2c");
            const bytes = nodeCrypto.randomBytes(buf.length);
            buf.set(bytes);
            return;
          }
          if (window.crypto && window.crypto.getRandomValues) {
            window.crypto.getRandomValues(buf);
            return;
          }
          if (self.crypto && self.crypto.getRandomValues) {
            self.crypto.getRandomValues(buf);
            return;
          }
          // @ts-ignore
          if (window.msCrypto && window.msCrypto.getRandomValues) {
            // @ts-ignore
            window.msCrypto.getRandomValues(buf);
            return;
          }
          throw new Error("No secure random number generator available.");
        }

        ///////////////////////////////////////////////////////////////////////////////
        const _bigint_stdlib = { Uint32Array: Uint32Array, Math: Math };
        const _bigint_heap = new Uint32Array(0x100000);
        let _bigint_asm;
        function _half_imul(a, b) {
          return (a * b) | 0;
        }
        if (_bigint_stdlib.Math.imul === undefined) {
          _bigint_stdlib.Math.imul = _half_imul;
          _bigint_asm = bigint_asm(_bigint_stdlib, null, _bigint_heap.buffer);
          delete _bigint_stdlib.Math.imul;
        } else {
          _bigint_asm = bigint_asm(_bigint_stdlib, null, _bigint_heap.buffer);
        }
        ///////////////////////////////////////////////////////////////////////////////
        const _BigNumber_ZERO_limbs = new Uint32Array(0);
        class BigNumber {
          constructor(num) {
            let limbs = _BigNumber_ZERO_limbs;
            let bitlen = 0;
            let sign = 0;
            if (num === undefined);
            else {
              for (var i = 0; !num[i]; i++);
              bitlen = (num.length - i) * 8;
              if (!bitlen) return BigNumber.ZERO;
              limbs = new Uint32Array((bitlen + 31) >> 5);
              for (var j = num.length - 4; j >= i; j -= 4) {
                limbs[(num.length - 4 - j) >> 2] =
                  (num[j] << 24) |
                  (num[j + 1] << 16) |
                  (num[j + 2] << 8) |
                  num[j + 3];
              }
              if (i - j === 3) {
                limbs[limbs.length - 1] = num[i];
              } else if (i - j === 2) {
                limbs[limbs.length - 1] = (num[i] << 8) | num[i + 1];
              } else if (i - j === 1) {
                limbs[limbs.length - 1] =
                  (num[i] << 16) | (num[i + 1] << 8) | num[i + 2];
              }
              sign = 1;
            }
            this.limbs = limbs;
            this.bitLength = bitlen;
            this.sign = sign;
          }
          static fromString(str) {
            const bytes = string_to_bytes(str);
            return new BigNumber(bytes);
          }
          static fromNumber(num) {
            let limbs = _BigNumber_ZERO_limbs;
            let bitlen = 0;
            let sign = 0;
            var absnum = Math.abs(num);
            if (absnum > 0xffffffff) {
              limbs = new Uint32Array(2);
              limbs[0] = absnum | 0;
              limbs[1] = (absnum / 0x100000000) | 0;
              bitlen = 52;
            } else if (absnum > 0) {
              limbs = new Uint32Array(1);
              limbs[0] = absnum;
              bitlen = 32;
            } else {
              limbs = _BigNumber_ZERO_limbs;
              bitlen = 0;
            }
            sign = num < 0 ? -1 : 1;
            return BigNumber.fromConfig({ limbs, bitLength: bitlen, sign });
          }
          static fromArrayBuffer(buffer) {
            return new BigNumber(new Uint8Array(buffer));
          }
          static fromConfig(obj) {
            const bn = new BigNumber();
            bn.limbs = new Uint32Array(obj.limbs);
            bn.bitLength = obj.bitLength;
            bn.sign = obj.sign;
            return bn;
          }
          toString(radix) {
            radix = radix || 16;
            const limbs = this.limbs;
            const bitlen = this.bitLength;
            let str = "";
            if (radix === 16) {
              // FIXME clamp last limb to (bitlen % 32)
              for (var i = ((bitlen + 31) >> 5) - 1; i >= 0; i--) {
                var h = limbs[i].toString(16);
                str += "00000000".substr(h.length);
                str += h;
              }
              str = str.replace(/^0+/, "");
              if (!str.length) str = "0";
            } else {
              throw new IllegalArgumentError("bad radix");
            }
            if (this.sign < 0) str = "-" + str;
            return str;
          }
          toBytes() {
            const bitlen = this.bitLength;
            const limbs = this.limbs;
            if (bitlen === 0) return new Uint8Array(0);
            const bytelen = (bitlen + 7) >> 3;
            const bytes = new Uint8Array(bytelen);
            for (let i = 0; i < bytelen; i++) {
              let j = bytelen - i - 1;
              bytes[i] = limbs[j >> 2] >> ((j & 3) << 3);
            }
            return bytes;
          }
          /**
           * Downgrade to Number
           */
          valueOf() {
            const limbs = this.limbs;
            const bits = this.bitLength;
            const sign = this.sign;
            if (!sign) return 0;
            if (bits <= 32) return sign * (limbs[0] >>> 0);
            if (bits <= 52)
              return sign * (0x100000000 * (limbs[1] >>> 0) + (limbs[0] >>> 0));
            // normalization
            let i,
              l,
              e = 0;
            for (i = limbs.length - 1; i >= 0; i--) {
              if ((l = limbs[i]) === 0) continue;
              while (((l << e) & 0x80000000) === 0) e++;
              break;
            }
            if (i === 0) return sign * (limbs[0] >>> 0);
            return (
              sign *
              (0x100000 *
                (((limbs[i] << e) | (e ? limbs[i - 1] >>> (32 - e) : 0)) >>>
                  0) +
                (((limbs[i - 1] << e) |
                  (e && i > 1 ? limbs[i - 2] >>> (32 - e) : 0)) >>>
                  12)) *
              Math.pow(2, 32 * i - e - 52)
            );
          }
          clamp(b) {
            const limbs = this.limbs;
            const bitlen = this.bitLength;
            // FIXME check b is number and in a valid range
            if (b >= bitlen) return this;
            const clamped = new BigNumber();
            let n = (b + 31) >> 5;
            let k = b % 32;
            clamped.limbs = new Uint32Array(limbs.subarray(0, n));
            clamped.bitLength = b;
            clamped.sign = this.sign;
            if (k) clamped.limbs[n - 1] &= -1 >>> (32 - k);
            return clamped;
          }
          slice(f, b) {
            const limbs = this.limbs;
            const bitlen = this.bitLength;
            if (f < 0) throw new RangeError("TODO");
            if (f >= bitlen) return BigNumber.ZERO;
            if (b === undefined || b > bitlen - f) b = bitlen - f;
            const sliced = new BigNumber();
            let n = f >> 5;
            let m = (f + b + 31) >> 5;
            let l = (b + 31) >> 5;
            let t = f % 32;
            let k = b % 32;
            const slimbs = new Uint32Array(l);
            if (t) {
              for (var i = 0; i < m - n - 1; i++) {
                slimbs[i] =
                  (limbs[n + i] >>> t) | (limbs[n + i + 1] << (32 - t));
              }
              slimbs[i] = limbs[n + i] >>> t;
            } else {
              slimbs.set(limbs.subarray(n, m));
            }
            if (k) {
              slimbs[l - 1] &= -1 >>> (32 - k);
            }
            sliced.limbs = slimbs;
            sliced.bitLength = b;
            sliced.sign = this.sign;
            return sliced;
          }
          negate() {
            const negative = new BigNumber();
            negative.limbs = this.limbs;
            negative.bitLength = this.bitLength;
            negative.sign = -1 * this.sign;
            return negative;
          }
          compare(that) {
            var alimbs = this.limbs,
              alimbcnt = alimbs.length,
              blimbs = that.limbs,
              blimbcnt = blimbs.length,
              z = 0;
            if (this.sign < that.sign) return -1;
            if (this.sign > that.sign) return 1;
            _bigint_heap.set(alimbs, 0);
            _bigint_heap.set(blimbs, alimbcnt);
            z = _bigint_asm.cmp(0, alimbcnt << 2, alimbcnt << 2, blimbcnt << 2);
            return z * this.sign;
          }
          add(that) {
            if (!this.sign) return that;
            if (!that.sign) return this;
            var abitlen = this.bitLength,
              alimbs = this.limbs,
              alimbcnt = alimbs.length,
              asign = this.sign,
              bbitlen = that.bitLength,
              blimbs = that.limbs,
              blimbcnt = blimbs.length,
              bsign = that.sign,
              rbitlen,
              rlimbcnt,
              rsign,
              rof,
              result = new BigNumber();
            rbitlen =
              (abitlen > bbitlen ? abitlen : bbitlen) +
              (asign * bsign > 0 ? 1 : 0);
            rlimbcnt = (rbitlen + 31) >> 5;
            _bigint_asm.sreset();
            var pA = _bigint_asm.salloc(alimbcnt << 2),
              pB = _bigint_asm.salloc(blimbcnt << 2),
              pR = _bigint_asm.salloc(rlimbcnt << 2);
            _bigint_asm.z(pR - pA + (rlimbcnt << 2), 0, pA);
            _bigint_heap.set(alimbs, pA >> 2);
            _bigint_heap.set(blimbs, pB >> 2);
            if (asign * bsign > 0) {
              _bigint_asm.add(
                pA,
                alimbcnt << 2,
                pB,
                blimbcnt << 2,
                pR,
                rlimbcnt << 2
              );
              rsign = asign;
            } else if (asign > bsign) {
              rof = _bigint_asm.sub(
                pA,
                alimbcnt << 2,
                pB,
                blimbcnt << 2,
                pR,
                rlimbcnt << 2
              );
              rsign = rof ? bsign : asign;
            } else {
              rof = _bigint_asm.sub(
                pB,
                blimbcnt << 2,
                pA,
                alimbcnt << 2,
                pR,
                rlimbcnt << 2
              );
              rsign = rof ? asign : bsign;
            }
            if (rof) _bigint_asm.neg(pR, rlimbcnt << 2, pR, rlimbcnt << 2);
            if (_bigint_asm.tst(pR, rlimbcnt << 2) === 0) return BigNumber.ZERO;
            result.limbs = new Uint32Array(
              _bigint_heap.subarray(pR >> 2, (pR >> 2) + rlimbcnt)
            );
            result.bitLength = rbitlen;
            result.sign = rsign;
            return result;
          }
          subtract(that) {
            return this.add(that.negate());
          }
          square() {
            if (!this.sign) return BigNumber.ZERO;
            var abitlen = this.bitLength,
              alimbs = this.limbs,
              alimbcnt = alimbs.length,
              rbitlen,
              rlimbcnt,
              result = new BigNumber();
            rbitlen = abitlen << 1;
            rlimbcnt = (rbitlen + 31) >> 5;
            _bigint_asm.sreset();
            var pA = _bigint_asm.salloc(alimbcnt << 2),
              pR = _bigint_asm.salloc(rlimbcnt << 2);
            _bigint_asm.z(pR - pA + (rlimbcnt << 2), 0, pA);
            _bigint_heap.set(alimbs, pA >> 2);
            _bigint_asm.sqr(pA, alimbcnt << 2, pR);
            result.limbs = new Uint32Array(
              _bigint_heap.subarray(pR >> 2, (pR >> 2) + rlimbcnt)
            );
            result.bitLength = rbitlen;
            result.sign = 1;
            return result;
          }
          divide(that) {
            var abitlen = this.bitLength,
              alimbs = this.limbs,
              alimbcnt = alimbs.length,
              bbitlen = that.bitLength,
              blimbs = that.limbs,
              blimbcnt = blimbs.length,
              qlimbcnt,
              rlimbcnt,
              quotient = BigNumber.ZERO,
              remainder = BigNumber.ZERO;
            _bigint_asm.sreset();
            var pA = _bigint_asm.salloc(alimbcnt << 2),
              pB = _bigint_asm.salloc(blimbcnt << 2),
              pQ = _bigint_asm.salloc(alimbcnt << 2);
            _bigint_asm.z(pQ - pA + (alimbcnt << 2), 0, pA);
            _bigint_heap.set(alimbs, pA >> 2);
            _bigint_heap.set(blimbs, pB >> 2);
            _bigint_asm.div(pA, alimbcnt << 2, pB, blimbcnt << 2, pQ);
            qlimbcnt = _bigint_asm.tst(pQ, alimbcnt << 2) >> 2;
            if (qlimbcnt) {
              quotient = new BigNumber();
              quotient.limbs = new Uint32Array(
                _bigint_heap.subarray(pQ >> 2, (pQ >> 2) + qlimbcnt)
              );
              quotient.bitLength =
                abitlen < qlimbcnt << 5 ? abitlen : qlimbcnt << 5;
              quotient.sign = this.sign * that.sign;
            }
            rlimbcnt = _bigint_asm.tst(pA, blimbcnt << 2) >> 2;
            if (rlimbcnt) {
              remainder = new BigNumber();
              remainder.limbs = new Uint32Array(
                _bigint_heap.subarray(pA >> 2, (pA >> 2) + rlimbcnt)
              );
              remainder.bitLength =
                bbitlen < rlimbcnt << 5 ? bbitlen : rlimbcnt << 5;
              remainder.sign = this.sign;
            }
            return {
              quotient: quotient,
              remainder: remainder,
            };
          }
          multiply(that) {
            if (!this.sign || !that.sign) return BigNumber.ZERO;
            var abitlen = this.bitLength,
              alimbs = this.limbs,
              alimbcnt = alimbs.length,
              bbitlen = that.bitLength,
              blimbs = that.limbs,
              blimbcnt = blimbs.length,
              rbitlen,
              rlimbcnt,
              result = new BigNumber();
            rbitlen = abitlen + bbitlen;
            rlimbcnt = (rbitlen + 31) >> 5;
            _bigint_asm.sreset();
            var pA = _bigint_asm.salloc(alimbcnt << 2),
              pB = _bigint_asm.salloc(blimbcnt << 2),
              pR = _bigint_asm.salloc(rlimbcnt << 2);
            _bigint_asm.z(pR - pA + (rlimbcnt << 2), 0, pA);
            _bigint_heap.set(alimbs, pA >> 2);
            _bigint_heap.set(blimbs, pB >> 2);
            _bigint_asm.mul(
              pA,
              alimbcnt << 2,
              pB,
              blimbcnt << 2,
              pR,
              rlimbcnt << 2
            );
            result.limbs = new Uint32Array(
              _bigint_heap.subarray(pR >> 2, (pR >> 2) + rlimbcnt)
            );
            result.sign = this.sign * that.sign;
            result.bitLength = rbitlen;
            return result;
          }
          isMillerRabinProbablePrime(rounds) {
            var t = BigNumber.fromConfig(this),
              s = 0;
            t.limbs[0] -= 1;
            while (t.limbs[s >> 5] === 0) s += 32;
            while (((t.limbs[s >> 5] >> (s & 31)) & 1) === 0) s++;
            t = t.slice(s);
            var m = new Modulus(this),
              m1 = this.subtract(BigNumber.ONE),
              a = BigNumber.fromConfig(this),
              l = this.limbs.length - 1;
            while (a.limbs[l] === 0) l--;
            while (--rounds >= 0) {
              getRandomValues(a.limbs);
              if (a.limbs[0] < 2) a.limbs[0] += 2;
              while (a.compare(m1) >= 0) a.limbs[l] >>>= 1;
              var x = m.power(a, t);
              if (x.compare(BigNumber.ONE) === 0) continue;
              if (x.compare(m1) === 0) continue;
              var c = s;
              while (--c > 0) {
                x = x.square().divide(m).remainder;
                if (x.compare(BigNumber.ONE) === 0) return false;
                if (x.compare(m1) === 0) break;
              }
              if (c === 0) return false;
            }
            return true;
          }
          isProbablePrime(paranoia = 80) {
            var limbs = this.limbs;
            var i = 0;
            // Oddity test
            // (50% false positive probability)
            if ((limbs[0] & 1) === 0) return false;
            if (paranoia <= 1) return true;
            // Magic divisors (3, 5, 17) test
            // (~25% false positive probability)
            var s3 = 0,
              s5 = 0,
              s17 = 0;
            for (i = 0; i < limbs.length; i++) {
              var l3 = limbs[i];
              while (l3) {
                s3 += l3 & 3;
                l3 >>>= 2;
              }
              var l5 = limbs[i];
              while (l5) {
                s5 += l5 & 3;
                l5 >>>= 2;
                s5 -= l5 & 3;
                l5 >>>= 2;
              }
              var l17 = limbs[i];
              while (l17) {
                s17 += l17 & 15;
                l17 >>>= 4;
                s17 -= l17 & 15;
                l17 >>>= 4;
              }
            }
            if (!(s3 % 3) || !(s5 % 5) || !(s17 % 17)) return false;
            if (paranoia <= 2) return true;
            // Miller-Rabin test
            // (≤ 4^(-k) false positive probability)
            return this.isMillerRabinProbablePrime(paranoia >>> 1);
          }
        }
        BigNumber.extGCD = BigNumber_extGCD;
        BigNumber.ZERO = BigNumber.fromNumber(0);
        BigNumber.ONE = BigNumber.fromNumber(1);
        class Modulus extends BigNumber {
          constructor(number) {
            super();
            this.limbs = number.limbs;
            this.bitLength = number.bitLength;
            this.sign = number.sign;
            if (this.valueOf() < 1) throw new RangeError();
            if (this.bitLength <= 32) return;
            let comodulus;
            if (this.limbs[0] & 1) {
              const bitlen = ((this.bitLength + 31) & -32) + 1;
              const limbs = new Uint32Array((bitlen + 31) >> 5);
              limbs[limbs.length - 1] = 1;
              comodulus = new BigNumber();
              comodulus.sign = 1;
              comodulus.bitLength = bitlen;
              comodulus.limbs = limbs;
              const k = Number_extGCD(0x100000000, this.limbs[0]).y;
              this.coefficient = k < 0 ? -k : 0x100000000 - k;
            } else {
              /**
               * TODO even modulus reduction
               * Modulus represented as `N = 2^U * V`, where `V` is odd and thus `GCD(2^U, V) = 1`.
               * Calculation `A = TR' mod V` is made as for odd modulo using Montgomery method.
               * Calculation `B = TR' mod 2^U` is easy as modulus is a power of 2.
               * Using Chinese Remainder Theorem and Garner's Algorithm restore `TR' mod N` from `A` and `B`.
               */
              return;
            }
            this.comodulus = comodulus;
            this.comodulusRemainder = comodulus.divide(this).remainder;
            this.comodulusRemainderSquare = comodulus
              .square()
              .divide(this).remainder;
          }
          /**
           * Modular reduction
           */
          reduce(a) {
            if (a.bitLength <= 32 && this.bitLength <= 32)
              return BigNumber.fromNumber(a.valueOf() % this.valueOf());
            if (a.compare(this) < 0) return a;
            return a.divide(this).remainder;
          }
          /**
           * Modular inverse
           */
          inverse(a) {
            a = this.reduce(a);
            const r = BigNumber_extGCD(this, a);
            if (r.gcd.valueOf() !== 1) throw new Error("GCD is not 1");
            if (r.y.sign < 0) return r.y.add(this).clamp(this.bitLength);
            return r.y;
          }
          /**
           * Modular exponentiation
           */
          power(g, e) {
            // count exponent set bits
            let c = 0;
            for (let i = 0; i < e.limbs.length; i++) {
              let t = e.limbs[i];
              while (t) {
                if (t & 1) c++;
                t >>>= 1;
              }
            }
            // window size parameter
            let k = 8;
            if (e.bitLength <= 4536) k = 7;
            if (e.bitLength <= 1736) k = 6;
            if (e.bitLength <= 630) k = 5;
            if (e.bitLength <= 210) k = 4;
            if (e.bitLength <= 60) k = 3;
            if (e.bitLength <= 12) k = 2;
            if (c <= 1 << (k - 1)) k = 1;
            // montgomerize base
            g = Modulus._Montgomery_reduce(
              this.reduce(g).multiply(this.comodulusRemainderSquare),
              this
            );
            // precompute odd powers
            const g2 = Modulus._Montgomery_reduce(g.square(), this),
              gn = new Array(1 << (k - 1));
            gn[0] = g;
            gn[1] = Modulus._Montgomery_reduce(g.multiply(g2), this);
            for (let i = 2; i < 1 << (k - 1); i++) {
              gn[i] = Modulus._Montgomery_reduce(gn[i - 1].multiply(g2), this);
            }
            // perform exponentiation
            const u = this.comodulusRemainder;
            let r = u;
            for (let i = e.limbs.length - 1; i >= 0; i--) {
              let t = e.limbs[i];
              for (let j = 32; j > 0; ) {
                if (t & 0x80000000) {
                  let n = t >>> (32 - k),
                    l = k;
                  while ((n & 1) === 0) {
                    n >>>= 1;
                    l--;
                  }
                  var m = gn[n >>> 1];
                  while (n) {
                    n >>>= 1;
                    if (r !== u)
                      r = Modulus._Montgomery_reduce(r.square(), this);
                  }
                  r =
                    r !== u
                      ? Modulus._Montgomery_reduce(r.multiply(m), this)
                      : m;
                  (t <<= l), (j -= l);
                } else {
                  if (r !== u) r = Modulus._Montgomery_reduce(r.square(), this);
                  (t <<= 1), j--;
                }
              }
            }
            // de-montgomerize result
            return Modulus._Montgomery_reduce(r, this);
          }
          static _Montgomery_reduce(a, n) {
            const alimbs = a.limbs;
            const alimbcnt = alimbs.length;
            const nlimbs = n.limbs;
            const nlimbcnt = nlimbs.length;
            const y = n.coefficient;
            _bigint_asm.sreset();
            const pA = _bigint_asm.salloc(alimbcnt << 2),
              pN = _bigint_asm.salloc(nlimbcnt << 2),
              pR = _bigint_asm.salloc(nlimbcnt << 2);
            _bigint_asm.z(pR - pA + (nlimbcnt << 2), 0, pA);
            _bigint_heap.set(alimbs, pA >> 2);
            _bigint_heap.set(nlimbs, pN >> 2);
            _bigint_asm.mredc(pA, alimbcnt << 2, pN, nlimbcnt << 2, y, pR);
            const result = new BigNumber();
            result.limbs = new Uint32Array(
              _bigint_heap.subarray(pR >> 2, (pR >> 2) + nlimbcnt)
            );
            result.bitLength = n.bitLength;
            result.sign = 1;
            return result;
          }
        }

        var sha1_asm = function (stdlib, foreign, buffer) {
          "use asm";

          // SHA256 state
          var H0 = 0,
            H1 = 0,
            H2 = 0,
            H3 = 0,
            H4 = 0,
            TOTAL0 = 0,
            TOTAL1 = 0;

          // HMAC state
          var I0 = 0,
            I1 = 0,
            I2 = 0,
            I3 = 0,
            I4 = 0,
            O0 = 0,
            O1 = 0,
            O2 = 0,
            O3 = 0,
            O4 = 0;

          // I/O buffer
          var HEAP = new stdlib.Uint8Array(buffer);

          function _core(
            w0,
            w1,
            w2,
            w3,
            w4,
            w5,
            w6,
            w7,
            w8,
            w9,
            w10,
            w11,
            w12,
            w13,
            w14,
            w15
          ) {
            w0 = w0 | 0;
            w1 = w1 | 0;
            w2 = w2 | 0;
            w3 = w3 | 0;
            w4 = w4 | 0;
            w5 = w5 | 0;
            w6 = w6 | 0;
            w7 = w7 | 0;
            w8 = w8 | 0;
            w9 = w9 | 0;
            w10 = w10 | 0;
            w11 = w11 | 0;
            w12 = w12 | 0;
            w13 = w13 | 0;
            w14 = w14 | 0;
            w15 = w15 | 0;

            var a = 0,
              b = 0,
              c = 0,
              d = 0,
              e = 0,
              n = 0,
              t = 0,
              w16 = 0,
              w17 = 0,
              w18 = 0,
              w19 = 0,
              w20 = 0,
              w21 = 0,
              w22 = 0,
              w23 = 0,
              w24 = 0,
              w25 = 0,
              w26 = 0,
              w27 = 0,
              w28 = 0,
              w29 = 0,
              w30 = 0,
              w31 = 0,
              w32 = 0,
              w33 = 0,
              w34 = 0,
              w35 = 0,
              w36 = 0,
              w37 = 0,
              w38 = 0,
              w39 = 0,
              w40 = 0,
              w41 = 0,
              w42 = 0,
              w43 = 0,
              w44 = 0,
              w45 = 0,
              w46 = 0,
              w47 = 0,
              w48 = 0,
              w49 = 0,
              w50 = 0,
              w51 = 0,
              w52 = 0,
              w53 = 0,
              w54 = 0,
              w55 = 0,
              w56 = 0,
              w57 = 0,
              w58 = 0,
              w59 = 0,
              w60 = 0,
              w61 = 0,
              w62 = 0,
              w63 = 0,
              w64 = 0,
              w65 = 0,
              w66 = 0,
              w67 = 0,
              w68 = 0,
              w69 = 0,
              w70 = 0,
              w71 = 0,
              w72 = 0,
              w73 = 0,
              w74 = 0,
              w75 = 0,
              w76 = 0,
              w77 = 0,
              w78 = 0,
              w79 = 0;

            a = H0;
            b = H1;
            c = H2;
            d = H3;
            e = H4;

            // 0
            t =
              (w0 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (~b & d)) +
                0x5a827999) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 1
            t =
              (w1 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (~b & d)) +
                0x5a827999) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 2
            t =
              (w2 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (~b & d)) +
                0x5a827999) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 3
            t =
              (w3 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (~b & d)) +
                0x5a827999) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 4
            t =
              (w4 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (~b & d)) +
                0x5a827999) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 5
            t =
              (w5 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (~b & d)) +
                0x5a827999) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 6
            t =
              (w6 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (~b & d)) +
                0x5a827999) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 7
            t =
              (w7 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (~b & d)) +
                0x5a827999) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 8
            t =
              (w8 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (~b & d)) +
                0x5a827999) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 9
            t =
              (w9 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (~b & d)) +
                0x5a827999) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 10
            t =
              (w10 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (~b & d)) +
                0x5a827999) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 11
            t =
              (w11 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (~b & d)) +
                0x5a827999) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 12
            t =
              (w12 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (~b & d)) +
                0x5a827999) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 13
            t =
              (w13 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (~b & d)) +
                0x5a827999) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 14
            t =
              (w14 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (~b & d)) +
                0x5a827999) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 15
            t =
              (w15 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (~b & d)) +
                0x5a827999) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 16
            n = w13 ^ w8 ^ w2 ^ w0;
            w16 = (n << 1) | (n >>> 31);
            t =
              (w16 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (~b & d)) +
                0x5a827999) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 17
            n = w14 ^ w9 ^ w3 ^ w1;
            w17 = (n << 1) | (n >>> 31);
            t =
              (w17 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (~b & d)) +
                0x5a827999) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 18
            n = w15 ^ w10 ^ w4 ^ w2;
            w18 = (n << 1) | (n >>> 31);
            t =
              (w18 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (~b & d)) +
                0x5a827999) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 19
            n = w16 ^ w11 ^ w5 ^ w3;
            w19 = (n << 1) | (n >>> 31);
            t =
              (w19 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (~b & d)) +
                0x5a827999) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 20
            n = w17 ^ w12 ^ w6 ^ w4;
            w20 = (n << 1) | (n >>> 31);
            t =
              (w20 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 21
            n = w18 ^ w13 ^ w7 ^ w5;
            w21 = (n << 1) | (n >>> 31);
            t =
              (w21 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 22
            n = w19 ^ w14 ^ w8 ^ w6;
            w22 = (n << 1) | (n >>> 31);
            t =
              (w22 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 23
            n = w20 ^ w15 ^ w9 ^ w7;
            w23 = (n << 1) | (n >>> 31);
            t =
              (w23 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 24
            n = w21 ^ w16 ^ w10 ^ w8;
            w24 = (n << 1) | (n >>> 31);
            t =
              (w24 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 25
            n = w22 ^ w17 ^ w11 ^ w9;
            w25 = (n << 1) | (n >>> 31);
            t =
              (w25 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 26
            n = w23 ^ w18 ^ w12 ^ w10;
            w26 = (n << 1) | (n >>> 31);
            t =
              (w26 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 27
            n = w24 ^ w19 ^ w13 ^ w11;
            w27 = (n << 1) | (n >>> 31);
            t =
              (w27 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 28
            n = w25 ^ w20 ^ w14 ^ w12;
            w28 = (n << 1) | (n >>> 31);
            t =
              (w28 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 29
            n = w26 ^ w21 ^ w15 ^ w13;
            w29 = (n << 1) | (n >>> 31);
            t =
              (w29 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 30
            n = w27 ^ w22 ^ w16 ^ w14;
            w30 = (n << 1) | (n >>> 31);
            t =
              (w30 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 31
            n = w28 ^ w23 ^ w17 ^ w15;
            w31 = (n << 1) | (n >>> 31);
            t =
              (w31 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 32
            n = w29 ^ w24 ^ w18 ^ w16;
            w32 = (n << 1) | (n >>> 31);
            t =
              (w32 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 33
            n = w30 ^ w25 ^ w19 ^ w17;
            w33 = (n << 1) | (n >>> 31);
            t =
              (w33 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 34
            n = w31 ^ w26 ^ w20 ^ w18;
            w34 = (n << 1) | (n >>> 31);
            t =
              (w34 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 35
            n = w32 ^ w27 ^ w21 ^ w19;
            w35 = (n << 1) | (n >>> 31);
            t =
              (w35 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 36
            n = w33 ^ w28 ^ w22 ^ w20;
            w36 = (n << 1) | (n >>> 31);
            t =
              (w36 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 37
            n = w34 ^ w29 ^ w23 ^ w21;
            w37 = (n << 1) | (n >>> 31);
            t =
              (w37 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 38
            n = w35 ^ w30 ^ w24 ^ w22;
            w38 = (n << 1) | (n >>> 31);
            t =
              (w38 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 39
            n = w36 ^ w31 ^ w25 ^ w23;
            w39 = (n << 1) | (n >>> 31);
            t =
              (w39 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 40
            n = w37 ^ w32 ^ w26 ^ w24;
            w40 = (n << 1) | (n >>> 31);
            t =
              (w40 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (b & d) | (c & d)) -
                0x70e44324) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 41
            n = w38 ^ w33 ^ w27 ^ w25;
            w41 = (n << 1) | (n >>> 31);
            t =
              (w41 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (b & d) | (c & d)) -
                0x70e44324) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 42
            n = w39 ^ w34 ^ w28 ^ w26;
            w42 = (n << 1) | (n >>> 31);
            t =
              (w42 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (b & d) | (c & d)) -
                0x70e44324) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 43
            n = w40 ^ w35 ^ w29 ^ w27;
            w43 = (n << 1) | (n >>> 31);
            t =
              (w43 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (b & d) | (c & d)) -
                0x70e44324) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 44
            n = w41 ^ w36 ^ w30 ^ w28;
            w44 = (n << 1) | (n >>> 31);
            t =
              (w44 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (b & d) | (c & d)) -
                0x70e44324) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 45
            n = w42 ^ w37 ^ w31 ^ w29;
            w45 = (n << 1) | (n >>> 31);
            t =
              (w45 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (b & d) | (c & d)) -
                0x70e44324) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 46
            n = w43 ^ w38 ^ w32 ^ w30;
            w46 = (n << 1) | (n >>> 31);
            t =
              (w46 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (b & d) | (c & d)) -
                0x70e44324) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 47
            n = w44 ^ w39 ^ w33 ^ w31;
            w47 = (n << 1) | (n >>> 31);
            t =
              (w47 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (b & d) | (c & d)) -
                0x70e44324) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 48
            n = w45 ^ w40 ^ w34 ^ w32;
            w48 = (n << 1) | (n >>> 31);
            t =
              (w48 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (b & d) | (c & d)) -
                0x70e44324) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 49
            n = w46 ^ w41 ^ w35 ^ w33;
            w49 = (n << 1) | (n >>> 31);
            t =
              (w49 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (b & d) | (c & d)) -
                0x70e44324) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 50
            n = w47 ^ w42 ^ w36 ^ w34;
            w50 = (n << 1) | (n >>> 31);
            t =
              (w50 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (b & d) | (c & d)) -
                0x70e44324) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 51
            n = w48 ^ w43 ^ w37 ^ w35;
            w51 = (n << 1) | (n >>> 31);
            t =
              (w51 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (b & d) | (c & d)) -
                0x70e44324) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 52
            n = w49 ^ w44 ^ w38 ^ w36;
            w52 = (n << 1) | (n >>> 31);
            t =
              (w52 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (b & d) | (c & d)) -
                0x70e44324) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 53
            n = w50 ^ w45 ^ w39 ^ w37;
            w53 = (n << 1) | (n >>> 31);
            t =
              (w53 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (b & d) | (c & d)) -
                0x70e44324) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 54
            n = w51 ^ w46 ^ w40 ^ w38;
            w54 = (n << 1) | (n >>> 31);
            t =
              (w54 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (b & d) | (c & d)) -
                0x70e44324) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 55
            n = w52 ^ w47 ^ w41 ^ w39;
            w55 = (n << 1) | (n >>> 31);
            t =
              (w55 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (b & d) | (c & d)) -
                0x70e44324) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 56
            n = w53 ^ w48 ^ w42 ^ w40;
            w56 = (n << 1) | (n >>> 31);
            t =
              (w56 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (b & d) | (c & d)) -
                0x70e44324) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 57
            n = w54 ^ w49 ^ w43 ^ w41;
            w57 = (n << 1) | (n >>> 31);
            t =
              (w57 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (b & d) | (c & d)) -
                0x70e44324) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 58
            n = w55 ^ w50 ^ w44 ^ w42;
            w58 = (n << 1) | (n >>> 31);
            t =
              (w58 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (b & d) | (c & d)) -
                0x70e44324) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 59
            n = w56 ^ w51 ^ w45 ^ w43;
            w59 = (n << 1) | (n >>> 31);
            t =
              (w59 +
                ((a << 5) | (a >>> 27)) +
                e +
                ((b & c) | (b & d) | (c & d)) -
                0x70e44324) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 60
            n = w57 ^ w52 ^ w46 ^ w44;
            w60 = (n << 1) | (n >>> 31);
            t =
              (w60 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 61
            n = w58 ^ w53 ^ w47 ^ w45;
            w61 = (n << 1) | (n >>> 31);
            t =
              (w61 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 62
            n = w59 ^ w54 ^ w48 ^ w46;
            w62 = (n << 1) | (n >>> 31);
            t =
              (w62 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 63
            n = w60 ^ w55 ^ w49 ^ w47;
            w63 = (n << 1) | (n >>> 31);
            t =
              (w63 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 64
            n = w61 ^ w56 ^ w50 ^ w48;
            w64 = (n << 1) | (n >>> 31);
            t =
              (w64 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 65
            n = w62 ^ w57 ^ w51 ^ w49;
            w65 = (n << 1) | (n >>> 31);
            t =
              (w65 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 66
            n = w63 ^ w58 ^ w52 ^ w50;
            w66 = (n << 1) | (n >>> 31);
            t =
              (w66 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 67
            n = w64 ^ w59 ^ w53 ^ w51;
            w67 = (n << 1) | (n >>> 31);
            t =
              (w67 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 68
            n = w65 ^ w60 ^ w54 ^ w52;
            w68 = (n << 1) | (n >>> 31);
            t =
              (w68 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 69
            n = w66 ^ w61 ^ w55 ^ w53;
            w69 = (n << 1) | (n >>> 31);
            t =
              (w69 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 70
            n = w67 ^ w62 ^ w56 ^ w54;
            w70 = (n << 1) | (n >>> 31);
            t =
              (w70 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 71
            n = w68 ^ w63 ^ w57 ^ w55;
            w71 = (n << 1) | (n >>> 31);
            t =
              (w71 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 72
            n = w69 ^ w64 ^ w58 ^ w56;
            w72 = (n << 1) | (n >>> 31);
            t =
              (w72 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 73
            n = w70 ^ w65 ^ w59 ^ w57;
            w73 = (n << 1) | (n >>> 31);
            t =
              (w73 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 74
            n = w71 ^ w66 ^ w60 ^ w58;
            w74 = (n << 1) | (n >>> 31);
            t =
              (w74 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 75
            n = w72 ^ w67 ^ w61 ^ w59;
            w75 = (n << 1) | (n >>> 31);
            t =
              (w75 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 76
            n = w73 ^ w68 ^ w62 ^ w60;
            w76 = (n << 1) | (n >>> 31);
            t =
              (w76 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 77
            n = w74 ^ w69 ^ w63 ^ w61;
            w77 = (n << 1) | (n >>> 31);
            t =
              (w77 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 78
            n = w75 ^ w70 ^ w64 ^ w62;
            w78 = (n << 1) | (n >>> 31);
            t =
              (w78 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            // 79
            n = w76 ^ w71 ^ w65 ^ w63;
            w79 = (n << 1) | (n >>> 31);
            t =
              (w79 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a) |
              0;
            e = d;
            d = c;
            c = (b << 30) | (b >>> 2);
            b = a;
            a = t;

            H0 = (H0 + a) | 0;
            H1 = (H1 + b) | 0;
            H2 = (H2 + c) | 0;
            H3 = (H3 + d) | 0;
            H4 = (H4 + e) | 0;
          }

          function _core_heap(offset) {
            offset = offset | 0;

            _core(
              (HEAP[offset | 0] << 24) |
                (HEAP[offset | 1] << 16) |
                (HEAP[offset | 2] << 8) |
                HEAP[offset | 3],
              (HEAP[offset | 4] << 24) |
                (HEAP[offset | 5] << 16) |
                (HEAP[offset | 6] << 8) |
                HEAP[offset | 7],
              (HEAP[offset | 8] << 24) |
                (HEAP[offset | 9] << 16) |
                (HEAP[offset | 10] << 8) |
                HEAP[offset | 11],
              (HEAP[offset | 12] << 24) |
                (HEAP[offset | 13] << 16) |
                (HEAP[offset | 14] << 8) |
                HEAP[offset | 15],
              (HEAP[offset | 16] << 24) |
                (HEAP[offset | 17] << 16) |
                (HEAP[offset | 18] << 8) |
                HEAP[offset | 19],
              (HEAP[offset | 20] << 24) |
                (HEAP[offset | 21] << 16) |
                (HEAP[offset | 22] << 8) |
                HEAP[offset | 23],
              (HEAP[offset | 24] << 24) |
                (HEAP[offset | 25] << 16) |
                (HEAP[offset | 26] << 8) |
                HEAP[offset | 27],
              (HEAP[offset | 28] << 24) |
                (HEAP[offset | 29] << 16) |
                (HEAP[offset | 30] << 8) |
                HEAP[offset | 31],
              (HEAP[offset | 32] << 24) |
                (HEAP[offset | 33] << 16) |
                (HEAP[offset | 34] << 8) |
                HEAP[offset | 35],
              (HEAP[offset | 36] << 24) |
                (HEAP[offset | 37] << 16) |
                (HEAP[offset | 38] << 8) |
                HEAP[offset | 39],
              (HEAP[offset | 40] << 24) |
                (HEAP[offset | 41] << 16) |
                (HEAP[offset | 42] << 8) |
                HEAP[offset | 43],
              (HEAP[offset | 44] << 24) |
                (HEAP[offset | 45] << 16) |
                (HEAP[offset | 46] << 8) |
                HEAP[offset | 47],
              (HEAP[offset | 48] << 24) |
                (HEAP[offset | 49] << 16) |
                (HEAP[offset | 50] << 8) |
                HEAP[offset | 51],
              (HEAP[offset | 52] << 24) |
                (HEAP[offset | 53] << 16) |
                (HEAP[offset | 54] << 8) |
                HEAP[offset | 55],
              (HEAP[offset | 56] << 24) |
                (HEAP[offset | 57] << 16) |
                (HEAP[offset | 58] << 8) |
                HEAP[offset | 59],
              (HEAP[offset | 60] << 24) |
                (HEAP[offset | 61] << 16) |
                (HEAP[offset | 62] << 8) |
                HEAP[offset | 63]
            );
          }

          // offset — multiple of 32
          function _state_to_heap(output) {
            output = output | 0;

            HEAP[output | 0] = H0 >>> 24;
            HEAP[output | 1] = (H0 >>> 16) & 255;
            HEAP[output | 2] = (H0 >>> 8) & 255;
            HEAP[output | 3] = H0 & 255;
            HEAP[output | 4] = H1 >>> 24;
            HEAP[output | 5] = (H1 >>> 16) & 255;
            HEAP[output | 6] = (H1 >>> 8) & 255;
            HEAP[output | 7] = H1 & 255;
            HEAP[output | 8] = H2 >>> 24;
            HEAP[output | 9] = (H2 >>> 16) & 255;
            HEAP[output | 10] = (H2 >>> 8) & 255;
            HEAP[output | 11] = H2 & 255;
            HEAP[output | 12] = H3 >>> 24;
            HEAP[output | 13] = (H3 >>> 16) & 255;
            HEAP[output | 14] = (H3 >>> 8) & 255;
            HEAP[output | 15] = H3 & 255;
            HEAP[output | 16] = H4 >>> 24;
            HEAP[output | 17] = (H4 >>> 16) & 255;
            HEAP[output | 18] = (H4 >>> 8) & 255;
            HEAP[output | 19] = H4 & 255;
          }

          function reset() {
            H0 = 0x67452301;
            H1 = 0xefcdab89;
            H2 = 0x98badcfe;
            H3 = 0x10325476;
            H4 = 0xc3d2e1f0;
            TOTAL0 = TOTAL1 = 0;
          }

          function init(h0, h1, h2, h3, h4, total0, total1) {
            h0 = h0 | 0;
            h1 = h1 | 0;
            h2 = h2 | 0;
            h3 = h3 | 0;
            h4 = h4 | 0;
            total0 = total0 | 0;
            total1 = total1 | 0;

            H0 = h0;
            H1 = h1;
            H2 = h2;
            H3 = h3;
            H4 = h4;
            TOTAL0 = total0;
            TOTAL1 = total1;
          }

          // offset — multiple of 64
          function process(offset, length) {
            offset = offset | 0;
            length = length | 0;

            var hashed = 0;

            if (offset & 63) return -1;

            while ((length | 0) >= 64) {
              _core_heap(offset);

              offset = (offset + 64) | 0;
              length = (length - 64) | 0;

              hashed = (hashed + 64) | 0;
            }

            TOTAL0 = (TOTAL0 + hashed) | 0;
            if (TOTAL0 >>> 0 < hashed >>> 0) TOTAL1 = (TOTAL1 + 1) | 0;

            return hashed | 0;
          }

          // offset — multiple of 64
          // output — multiple of 32
          function finish(offset, length, output) {
            offset = offset | 0;
            length = length | 0;
            output = output | 0;

            var hashed = 0,
              i = 0;

            if (offset & 63) return -1;

            if (~output) if (output & 31) return -1;

            if ((length | 0) >= 64) {
              hashed = process(offset, length) | 0;
              if ((hashed | 0) == -1) return -1;

              offset = (offset + hashed) | 0;
              length = (length - hashed) | 0;
            }

            hashed = (hashed + length) | 0;
            TOTAL0 = (TOTAL0 + length) | 0;
            if (TOTAL0 >>> 0 < length >>> 0) TOTAL1 = (TOTAL1 + 1) | 0;

            HEAP[offset | length] = 0x80;

            if ((length | 0) >= 56) {
              for (i = (length + 1) | 0; (i | 0) < 64; i = (i + 1) | 0)
                HEAP[offset | i] = 0x00;
              _core_heap(offset);

              length = 0;

              HEAP[offset | 0] = 0;
            }

            for (i = (length + 1) | 0; (i | 0) < 59; i = (i + 1) | 0)
              HEAP[offset | i] = 0;

            HEAP[offset | 56] = (TOTAL1 >>> 21) & 255;
            HEAP[offset | 57] = (TOTAL1 >>> 13) & 255;
            HEAP[offset | 58] = (TOTAL1 >>> 5) & 255;
            HEAP[offset | 59] = ((TOTAL1 << 3) & 255) | (TOTAL0 >>> 29);
            HEAP[offset | 60] = (TOTAL0 >>> 21) & 255;
            HEAP[offset | 61] = (TOTAL0 >>> 13) & 255;
            HEAP[offset | 62] = (TOTAL0 >>> 5) & 255;
            HEAP[offset | 63] = (TOTAL0 << 3) & 255;
            _core_heap(offset);

            if (~output) _state_to_heap(output);

            return hashed | 0;
          }

          function hmac_reset() {
            H0 = I0;
            H1 = I1;
            H2 = I2;
            H3 = I3;
            H4 = I4;
            TOTAL0 = 64;
            TOTAL1 = 0;
          }

          function _hmac_opad() {
            H0 = O0;
            H1 = O1;
            H2 = O2;
            H3 = O3;
            H4 = O4;
            TOTAL0 = 64;
            TOTAL1 = 0;
          }

          function hmac_init(
            p0,
            p1,
            p2,
            p3,
            p4,
            p5,
            p6,
            p7,
            p8,
            p9,
            p10,
            p11,
            p12,
            p13,
            p14,
            p15
          ) {
            p0 = p0 | 0;
            p1 = p1 | 0;
            p2 = p2 | 0;
            p3 = p3 | 0;
            p4 = p4 | 0;
            p5 = p5 | 0;
            p6 = p6 | 0;
            p7 = p7 | 0;
            p8 = p8 | 0;
            p9 = p9 | 0;
            p10 = p10 | 0;
            p11 = p11 | 0;
            p12 = p12 | 0;
            p13 = p13 | 0;
            p14 = p14 | 0;
            p15 = p15 | 0;

            // opad
            reset();
            _core(
              p0 ^ 0x5c5c5c5c,
              p1 ^ 0x5c5c5c5c,
              p2 ^ 0x5c5c5c5c,
              p3 ^ 0x5c5c5c5c,
              p4 ^ 0x5c5c5c5c,
              p5 ^ 0x5c5c5c5c,
              p6 ^ 0x5c5c5c5c,
              p7 ^ 0x5c5c5c5c,
              p8 ^ 0x5c5c5c5c,
              p9 ^ 0x5c5c5c5c,
              p10 ^ 0x5c5c5c5c,
              p11 ^ 0x5c5c5c5c,
              p12 ^ 0x5c5c5c5c,
              p13 ^ 0x5c5c5c5c,
              p14 ^ 0x5c5c5c5c,
              p15 ^ 0x5c5c5c5c
            );
            O0 = H0;
            O1 = H1;
            O2 = H2;
            O3 = H3;
            O4 = H4;

            // ipad
            reset();
            _core(
              p0 ^ 0x36363636,
              p1 ^ 0x36363636,
              p2 ^ 0x36363636,
              p3 ^ 0x36363636,
              p4 ^ 0x36363636,
              p5 ^ 0x36363636,
              p6 ^ 0x36363636,
              p7 ^ 0x36363636,
              p8 ^ 0x36363636,
              p9 ^ 0x36363636,
              p10 ^ 0x36363636,
              p11 ^ 0x36363636,
              p12 ^ 0x36363636,
              p13 ^ 0x36363636,
              p14 ^ 0x36363636,
              p15 ^ 0x36363636
            );
            I0 = H0;
            I1 = H1;
            I2 = H2;
            I3 = H3;
            I4 = H4;

            TOTAL0 = 64;
            TOTAL1 = 0;
          }

          // offset — multiple of 64
          // output — multiple of 32
          function hmac_finish(offset, length, output) {
            offset = offset | 0;
            length = length | 0;
            output = output | 0;

            var t0 = 0,
              t1 = 0,
              t2 = 0,
              t3 = 0,
              t4 = 0,
              hashed = 0;

            if (offset & 63) return -1;

            if (~output) if (output & 31) return -1;

            hashed = finish(offset, length, -1) | 0;
            (t0 = H0), (t1 = H1), (t2 = H2), (t3 = H3), (t4 = H4);

            _hmac_opad();
            _core(
              t0,
              t1,
              t2,
              t3,
              t4,
              0x80000000,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              672
            );

            if (~output) _state_to_heap(output);

            return hashed | 0;
          }

          // salt is assumed to be already processed
          // offset — multiple of 64
          // output — multiple of 32
          function pbkdf2_generate_block(offset, length, block, count, output) {
            offset = offset | 0;
            length = length | 0;
            block = block | 0;
            count = count | 0;
            output = output | 0;

            var h0 = 0,
              h1 = 0,
              h2 = 0,
              h3 = 0,
              h4 = 0,
              t0 = 0,
              t1 = 0,
              t2 = 0,
              t3 = 0,
              t4 = 0;

            if (offset & 63) return -1;

            if (~output) if (output & 31) return -1;

            // pad block number into heap
            // FIXME probable OOB write
            HEAP[(offset + length) | 0] = block >>> 24;
            HEAP[(offset + length + 1) | 0] = (block >>> 16) & 255;
            HEAP[(offset + length + 2) | 0] = (block >>> 8) & 255;
            HEAP[(offset + length + 3) | 0] = block & 255;

            // finish first iteration
            hmac_finish(offset, (length + 4) | 0, -1) | 0;
            (h0 = t0 = H0),
              (h1 = t1 = H1),
              (h2 = t2 = H2),
              (h3 = t3 = H3),
              (h4 = t4 = H4);
            count = (count - 1) | 0;

            // perform the rest iterations
            while ((count | 0) > 0) {
              hmac_reset();
              _core(
                t0,
                t1,
                t2,
                t3,
                t4,
                0x80000000,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                672
              );
              (t0 = H0), (t1 = H1), (t2 = H2), (t3 = H3), (t4 = H4);

              _hmac_opad();
              _core(
                t0,
                t1,
                t2,
                t3,
                t4,
                0x80000000,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                672
              );
              (t0 = H0), (t1 = H1), (t2 = H2), (t3 = H3), (t4 = H4);

              h0 = h0 ^ H0;
              h1 = h1 ^ H1;
              h2 = h2 ^ H2;
              h3 = h3 ^ H3;
              h4 = h4 ^ H4;

              count = (count - 1) | 0;
            }

            H0 = h0;
            H1 = h1;
            H2 = h2;
            H3 = h3;
            H4 = h4;

            if (~output) _state_to_heap(output);

            return 0;
          }

          return {
            // SHA1
            reset: reset,
            init: init,
            process: process,
            finish: finish,

            // HMAC-SHA1
            hmac_reset: hmac_reset,
            hmac_init: hmac_init,
            hmac_finish: hmac_finish,

            // PBKDF2-HMAC-SHA1
            pbkdf2_generate_block: pbkdf2_generate_block,
          };
        };

        class Hash {
          constructor() {
            this.pos = 0;
            this.len = 0;
          }
          reset() {
            this.result = null;
            this.pos = 0;
            this.len = 0;
            this.asm.reset();
            return this;
          }
          process(data) {
            if (this.result !== null)
              throw new IllegalStateError(
                "state must be reset before processing new data"
              );
            let asm = this.asm;
            let heap = this.heap;
            let hpos = this.pos;
            let hlen = this.len;
            let dpos = 0;
            let dlen = data.length;
            let wlen = 0;
            while (dlen > 0) {
              wlen = _heap_write(heap, hpos + hlen, data, dpos, dlen);
              hlen += wlen;
              dpos += wlen;
              dlen -= wlen;
              wlen = asm.process(hpos, hlen);
              hpos += wlen;
              hlen -= wlen;
              if (!hlen) hpos = 0;
            }
            this.pos = hpos;
            this.len = hlen;
            return this;
          }
          finish() {
            if (this.result !== null)
              throw new IllegalStateError(
                "state must be reset before processing new data"
              );
            this.asm.finish(this.pos, this.len, 0);
            this.result = new Uint8Array(this.HASH_SIZE);
            this.result.set(this.heap.subarray(0, this.HASH_SIZE));
            this.pos = 0;
            this.len = 0;
            return this;
          }
        }

        const _sha1_block_size = 64;
        const _sha1_hash_size = 20;
        class Sha1 extends Hash {
          constructor() {
            super();
            this.NAME = "sha1";
            this.BLOCK_SIZE = _sha1_block_size;
            this.HASH_SIZE = _sha1_hash_size;
            this.heap = _heap_init();
            this.asm = sha1_asm(
              { Uint8Array: Uint8Array },
              null,
              this.heap.buffer
            );
            this.reset();
          }
        }
        Sha1.NAME = "sha1";

        var sha256_asm = function (stdlib, foreign, buffer) {
          "use asm";

          // SHA256 state
          var H0 = 0,
            H1 = 0,
            H2 = 0,
            H3 = 0,
            H4 = 0,
            H5 = 0,
            H6 = 0,
            H7 = 0,
            TOTAL0 = 0,
            TOTAL1 = 0;

          // HMAC state
          var I0 = 0,
            I1 = 0,
            I2 = 0,
            I3 = 0,
            I4 = 0,
            I5 = 0,
            I6 = 0,
            I7 = 0,
            O0 = 0,
            O1 = 0,
            O2 = 0,
            O3 = 0,
            O4 = 0,
            O5 = 0,
            O6 = 0,
            O7 = 0;

          // I/O buffer
          var HEAP = new stdlib.Uint8Array(buffer);

          function _core(
            w0,
            w1,
            w2,
            w3,
            w4,
            w5,
            w6,
            w7,
            w8,
            w9,
            w10,
            w11,
            w12,
            w13,
            w14,
            w15
          ) {
            w0 = w0 | 0;
            w1 = w1 | 0;
            w2 = w2 | 0;
            w3 = w3 | 0;
            w4 = w4 | 0;
            w5 = w5 | 0;
            w6 = w6 | 0;
            w7 = w7 | 0;
            w8 = w8 | 0;
            w9 = w9 | 0;
            w10 = w10 | 0;
            w11 = w11 | 0;
            w12 = w12 | 0;
            w13 = w13 | 0;
            w14 = w14 | 0;
            w15 = w15 | 0;

            var a = 0,
              b = 0,
              c = 0,
              d = 0,
              e = 0,
              f = 0,
              g = 0,
              h = 0;

            a = H0;
            b = H1;
            c = H2;
            d = H3;
            e = H4;
            f = H5;
            g = H6;
            h = H7;

            // 0
            h =
              (w0 +
                h +
                ((e >>> 6) ^
                  (e >>> 11) ^
                  (e >>> 25) ^
                  (e << 26) ^
                  (e << 21) ^
                  (e << 7)) +
                (g ^ (e & (f ^ g))) +
                0x428a2f98) |
              0;
            d = (d + h) | 0;
            h =
              (h +
                ((a & b) ^ (c & (a ^ b))) +
                ((a >>> 2) ^
                  (a >>> 13) ^
                  (a >>> 22) ^
                  (a << 30) ^
                  (a << 19) ^
                  (a << 10))) |
              0;

            // 1
            g =
              (w1 +
                g +
                ((d >>> 6) ^
                  (d >>> 11) ^
                  (d >>> 25) ^
                  (d << 26) ^
                  (d << 21) ^
                  (d << 7)) +
                (f ^ (d & (e ^ f))) +
                0x71374491) |
              0;
            c = (c + g) | 0;
            g =
              (g +
                ((h & a) ^ (b & (h ^ a))) +
                ((h >>> 2) ^
                  (h >>> 13) ^
                  (h >>> 22) ^
                  (h << 30) ^
                  (h << 19) ^
                  (h << 10))) |
              0;

            // 2
            f =
              (w2 +
                f +
                ((c >>> 6) ^
                  (c >>> 11) ^
                  (c >>> 25) ^
                  (c << 26) ^
                  (c << 21) ^
                  (c << 7)) +
                (e ^ (c & (d ^ e))) +
                0xb5c0fbcf) |
              0;
            b = (b + f) | 0;
            f =
              (f +
                ((g & h) ^ (a & (g ^ h))) +
                ((g >>> 2) ^
                  (g >>> 13) ^
                  (g >>> 22) ^
                  (g << 30) ^
                  (g << 19) ^
                  (g << 10))) |
              0;

            // 3
            e =
              (w3 +
                e +
                ((b >>> 6) ^
                  (b >>> 11) ^
                  (b >>> 25) ^
                  (b << 26) ^
                  (b << 21) ^
                  (b << 7)) +
                (d ^ (b & (c ^ d))) +
                0xe9b5dba5) |
              0;
            a = (a + e) | 0;
            e =
              (e +
                ((f & g) ^ (h & (f ^ g))) +
                ((f >>> 2) ^
                  (f >>> 13) ^
                  (f >>> 22) ^
                  (f << 30) ^
                  (f << 19) ^
                  (f << 10))) |
              0;

            // 4
            d =
              (w4 +
                d +
                ((a >>> 6) ^
                  (a >>> 11) ^
                  (a >>> 25) ^
                  (a << 26) ^
                  (a << 21) ^
                  (a << 7)) +
                (c ^ (a & (b ^ c))) +
                0x3956c25b) |
              0;
            h = (h + d) | 0;
            d =
              (d +
                ((e & f) ^ (g & (e ^ f))) +
                ((e >>> 2) ^
                  (e >>> 13) ^
                  (e >>> 22) ^
                  (e << 30) ^
                  (e << 19) ^
                  (e << 10))) |
              0;

            // 5
            c =
              (w5 +
                c +
                ((h >>> 6) ^
                  (h >>> 11) ^
                  (h >>> 25) ^
                  (h << 26) ^
                  (h << 21) ^
                  (h << 7)) +
                (b ^ (h & (a ^ b))) +
                0x59f111f1) |
              0;
            g = (g + c) | 0;
            c =
              (c +
                ((d & e) ^ (f & (d ^ e))) +
                ((d >>> 2) ^
                  (d >>> 13) ^
                  (d >>> 22) ^
                  (d << 30) ^
                  (d << 19) ^
                  (d << 10))) |
              0;

            // 6
            b =
              (w6 +
                b +
                ((g >>> 6) ^
                  (g >>> 11) ^
                  (g >>> 25) ^
                  (g << 26) ^
                  (g << 21) ^
                  (g << 7)) +
                (a ^ (g & (h ^ a))) +
                0x923f82a4) |
              0;
            f = (f + b) | 0;
            b =
              (b +
                ((c & d) ^ (e & (c ^ d))) +
                ((c >>> 2) ^
                  (c >>> 13) ^
                  (c >>> 22) ^
                  (c << 30) ^
                  (c << 19) ^
                  (c << 10))) |
              0;

            // 7
            a =
              (w7 +
                a +
                ((f >>> 6) ^
                  (f >>> 11) ^
                  (f >>> 25) ^
                  (f << 26) ^
                  (f << 21) ^
                  (f << 7)) +
                (h ^ (f & (g ^ h))) +
                0xab1c5ed5) |
              0;
            e = (e + a) | 0;
            a =
              (a +
                ((b & c) ^ (d & (b ^ c))) +
                ((b >>> 2) ^
                  (b >>> 13) ^
                  (b >>> 22) ^
                  (b << 30) ^
                  (b << 19) ^
                  (b << 10))) |
              0;

            // 8
            h =
              (w8 +
                h +
                ((e >>> 6) ^
                  (e >>> 11) ^
                  (e >>> 25) ^
                  (e << 26) ^
                  (e << 21) ^
                  (e << 7)) +
                (g ^ (e & (f ^ g))) +
                0xd807aa98) |
              0;
            d = (d + h) | 0;
            h =
              (h +
                ((a & b) ^ (c & (a ^ b))) +
                ((a >>> 2) ^
                  (a >>> 13) ^
                  (a >>> 22) ^
                  (a << 30) ^
                  (a << 19) ^
                  (a << 10))) |
              0;

            // 9
            g =
              (w9 +
                g +
                ((d >>> 6) ^
                  (d >>> 11) ^
                  (d >>> 25) ^
                  (d << 26) ^
                  (d << 21) ^
                  (d << 7)) +
                (f ^ (d & (e ^ f))) +
                0x12835b01) |
              0;
            c = (c + g) | 0;
            g =
              (g +
                ((h & a) ^ (b & (h ^ a))) +
                ((h >>> 2) ^
                  (h >>> 13) ^
                  (h >>> 22) ^
                  (h << 30) ^
                  (h << 19) ^
                  (h << 10))) |
              0;

            // 10
            f =
              (w10 +
                f +
                ((c >>> 6) ^
                  (c >>> 11) ^
                  (c >>> 25) ^
                  (c << 26) ^
                  (c << 21) ^
                  (c << 7)) +
                (e ^ (c & (d ^ e))) +
                0x243185be) |
              0;
            b = (b + f) | 0;
            f =
              (f +
                ((g & h) ^ (a & (g ^ h))) +
                ((g >>> 2) ^
                  (g >>> 13) ^
                  (g >>> 22) ^
                  (g << 30) ^
                  (g << 19) ^
                  (g << 10))) |
              0;

            // 11
            e =
              (w11 +
                e +
                ((b >>> 6) ^
                  (b >>> 11) ^
                  (b >>> 25) ^
                  (b << 26) ^
                  (b << 21) ^
                  (b << 7)) +
                (d ^ (b & (c ^ d))) +
                0x550c7dc3) |
              0;
            a = (a + e) | 0;
            e =
              (e +
                ((f & g) ^ (h & (f ^ g))) +
                ((f >>> 2) ^
                  (f >>> 13) ^
                  (f >>> 22) ^
                  (f << 30) ^
                  (f << 19) ^
                  (f << 10))) |
              0;

            // 12
            d =
              (w12 +
                d +
                ((a >>> 6) ^
                  (a >>> 11) ^
                  (a >>> 25) ^
                  (a << 26) ^
                  (a << 21) ^
                  (a << 7)) +
                (c ^ (a & (b ^ c))) +
                0x72be5d74) |
              0;
            h = (h + d) | 0;
            d =
              (d +
                ((e & f) ^ (g & (e ^ f))) +
                ((e >>> 2) ^
                  (e >>> 13) ^
                  (e >>> 22) ^
                  (e << 30) ^
                  (e << 19) ^
                  (e << 10))) |
              0;

            // 13
            c =
              (w13 +
                c +
                ((h >>> 6) ^
                  (h >>> 11) ^
                  (h >>> 25) ^
                  (h << 26) ^
                  (h << 21) ^
                  (h << 7)) +
                (b ^ (h & (a ^ b))) +
                0x80deb1fe) |
              0;
            g = (g + c) | 0;
            c =
              (c +
                ((d & e) ^ (f & (d ^ e))) +
                ((d >>> 2) ^
                  (d >>> 13) ^
                  (d >>> 22) ^
                  (d << 30) ^
                  (d << 19) ^
                  (d << 10))) |
              0;

            // 14
            b =
              (w14 +
                b +
                ((g >>> 6) ^
                  (g >>> 11) ^
                  (g >>> 25) ^
                  (g << 26) ^
                  (g << 21) ^
                  (g << 7)) +
                (a ^ (g & (h ^ a))) +
                0x9bdc06a7) |
              0;
            f = (f + b) | 0;
            b =
              (b +
                ((c & d) ^ (e & (c ^ d))) +
                ((c >>> 2) ^
                  (c >>> 13) ^
                  (c >>> 22) ^
                  (c << 30) ^
                  (c << 19) ^
                  (c << 10))) |
              0;

            // 15
            a =
              (w15 +
                a +
                ((f >>> 6) ^
                  (f >>> 11) ^
                  (f >>> 25) ^
                  (f << 26) ^
                  (f << 21) ^
                  (f << 7)) +
                (h ^ (f & (g ^ h))) +
                0xc19bf174) |
              0;
            e = (e + a) | 0;
            a =
              (a +
                ((b & c) ^ (d & (b ^ c))) +
                ((b >>> 2) ^
                  (b >>> 13) ^
                  (b >>> 22) ^
                  (b << 30) ^
                  (b << 19) ^
                  (b << 10))) |
              0;

            // 16
            w0 =
              (((w1 >>> 7) ^
                (w1 >>> 18) ^
                (w1 >>> 3) ^
                (w1 << 25) ^
                (w1 << 14)) +
                ((w14 >>> 17) ^
                  (w14 >>> 19) ^
                  (w14 >>> 10) ^
                  (w14 << 15) ^
                  (w14 << 13)) +
                w0 +
                w9) |
              0;
            h =
              (w0 +
                h +
                ((e >>> 6) ^
                  (e >>> 11) ^
                  (e >>> 25) ^
                  (e << 26) ^
                  (e << 21) ^
                  (e << 7)) +
                (g ^ (e & (f ^ g))) +
                0xe49b69c1) |
              0;
            d = (d + h) | 0;
            h =
              (h +
                ((a & b) ^ (c & (a ^ b))) +
                ((a >>> 2) ^
                  (a >>> 13) ^
                  (a >>> 22) ^
                  (a << 30) ^
                  (a << 19) ^
                  (a << 10))) |
              0;

            // 17
            w1 =
              (((w2 >>> 7) ^
                (w2 >>> 18) ^
                (w2 >>> 3) ^
                (w2 << 25) ^
                (w2 << 14)) +
                ((w15 >>> 17) ^
                  (w15 >>> 19) ^
                  (w15 >>> 10) ^
                  (w15 << 15) ^
                  (w15 << 13)) +
                w1 +
                w10) |
              0;
            g =
              (w1 +
                g +
                ((d >>> 6) ^
                  (d >>> 11) ^
                  (d >>> 25) ^
                  (d << 26) ^
                  (d << 21) ^
                  (d << 7)) +
                (f ^ (d & (e ^ f))) +
                0xefbe4786) |
              0;
            c = (c + g) | 0;
            g =
              (g +
                ((h & a) ^ (b & (h ^ a))) +
                ((h >>> 2) ^
                  (h >>> 13) ^
                  (h >>> 22) ^
                  (h << 30) ^
                  (h << 19) ^
                  (h << 10))) |
              0;

            // 18
            w2 =
              (((w3 >>> 7) ^
                (w3 >>> 18) ^
                (w3 >>> 3) ^
                (w3 << 25) ^
                (w3 << 14)) +
                ((w0 >>> 17) ^
                  (w0 >>> 19) ^
                  (w0 >>> 10) ^
                  (w0 << 15) ^
                  (w0 << 13)) +
                w2 +
                w11) |
              0;
            f =
              (w2 +
                f +
                ((c >>> 6) ^
                  (c >>> 11) ^
                  (c >>> 25) ^
                  (c << 26) ^
                  (c << 21) ^
                  (c << 7)) +
                (e ^ (c & (d ^ e))) +
                0x0fc19dc6) |
              0;
            b = (b + f) | 0;
            f =
              (f +
                ((g & h) ^ (a & (g ^ h))) +
                ((g >>> 2) ^
                  (g >>> 13) ^
                  (g >>> 22) ^
                  (g << 30) ^
                  (g << 19) ^
                  (g << 10))) |
              0;

            // 19
            w3 =
              (((w4 >>> 7) ^
                (w4 >>> 18) ^
                (w4 >>> 3) ^
                (w4 << 25) ^
                (w4 << 14)) +
                ((w1 >>> 17) ^
                  (w1 >>> 19) ^
                  (w1 >>> 10) ^
                  (w1 << 15) ^
                  (w1 << 13)) +
                w3 +
                w12) |
              0;
            e =
              (w3 +
                e +
                ((b >>> 6) ^
                  (b >>> 11) ^
                  (b >>> 25) ^
                  (b << 26) ^
                  (b << 21) ^
                  (b << 7)) +
                (d ^ (b & (c ^ d))) +
                0x240ca1cc) |
              0;
            a = (a + e) | 0;
            e =
              (e +
                ((f & g) ^ (h & (f ^ g))) +
                ((f >>> 2) ^
                  (f >>> 13) ^
                  (f >>> 22) ^
                  (f << 30) ^
                  (f << 19) ^
                  (f << 10))) |
              0;

            // 20
            w4 =
              (((w5 >>> 7) ^
                (w5 >>> 18) ^
                (w5 >>> 3) ^
                (w5 << 25) ^
                (w5 << 14)) +
                ((w2 >>> 17) ^
                  (w2 >>> 19) ^
                  (w2 >>> 10) ^
                  (w2 << 15) ^
                  (w2 << 13)) +
                w4 +
                w13) |
              0;
            d =
              (w4 +
                d +
                ((a >>> 6) ^
                  (a >>> 11) ^
                  (a >>> 25) ^
                  (a << 26) ^
                  (a << 21) ^
                  (a << 7)) +
                (c ^ (a & (b ^ c))) +
                0x2de92c6f) |
              0;
            h = (h + d) | 0;
            d =
              (d +
                ((e & f) ^ (g & (e ^ f))) +
                ((e >>> 2) ^
                  (e >>> 13) ^
                  (e >>> 22) ^
                  (e << 30) ^
                  (e << 19) ^
                  (e << 10))) |
              0;

            // 21
            w5 =
              (((w6 >>> 7) ^
                (w6 >>> 18) ^
                (w6 >>> 3) ^
                (w6 << 25) ^
                (w6 << 14)) +
                ((w3 >>> 17) ^
                  (w3 >>> 19) ^
                  (w3 >>> 10) ^
                  (w3 << 15) ^
                  (w3 << 13)) +
                w5 +
                w14) |
              0;
            c =
              (w5 +
                c +
                ((h >>> 6) ^
                  (h >>> 11) ^
                  (h >>> 25) ^
                  (h << 26) ^
                  (h << 21) ^
                  (h << 7)) +
                (b ^ (h & (a ^ b))) +
                0x4a7484aa) |
              0;
            g = (g + c) | 0;
            c =
              (c +
                ((d & e) ^ (f & (d ^ e))) +
                ((d >>> 2) ^
                  (d >>> 13) ^
                  (d >>> 22) ^
                  (d << 30) ^
                  (d << 19) ^
                  (d << 10))) |
              0;

            // 22
            w6 =
              (((w7 >>> 7) ^
                (w7 >>> 18) ^
                (w7 >>> 3) ^
                (w7 << 25) ^
                (w7 << 14)) +
                ((w4 >>> 17) ^
                  (w4 >>> 19) ^
                  (w4 >>> 10) ^
                  (w4 << 15) ^
                  (w4 << 13)) +
                w6 +
                w15) |
              0;
            b =
              (w6 +
                b +
                ((g >>> 6) ^
                  (g >>> 11) ^
                  (g >>> 25) ^
                  (g << 26) ^
                  (g << 21) ^
                  (g << 7)) +
                (a ^ (g & (h ^ a))) +
                0x5cb0a9dc) |
              0;
            f = (f + b) | 0;
            b =
              (b +
                ((c & d) ^ (e & (c ^ d))) +
                ((c >>> 2) ^
                  (c >>> 13) ^
                  (c >>> 22) ^
                  (c << 30) ^
                  (c << 19) ^
                  (c << 10))) |
              0;

            // 23
            w7 =
              (((w8 >>> 7) ^
                (w8 >>> 18) ^
                (w8 >>> 3) ^
                (w8 << 25) ^
                (w8 << 14)) +
                ((w5 >>> 17) ^
                  (w5 >>> 19) ^
                  (w5 >>> 10) ^
                  (w5 << 15) ^
                  (w5 << 13)) +
                w7 +
                w0) |
              0;
            a =
              (w7 +
                a +
                ((f >>> 6) ^
                  (f >>> 11) ^
                  (f >>> 25) ^
                  (f << 26) ^
                  (f << 21) ^
                  (f << 7)) +
                (h ^ (f & (g ^ h))) +
                0x76f988da) |
              0;
            e = (e + a) | 0;
            a =
              (a +
                ((b & c) ^ (d & (b ^ c))) +
                ((b >>> 2) ^
                  (b >>> 13) ^
                  (b >>> 22) ^
                  (b << 30) ^
                  (b << 19) ^
                  (b << 10))) |
              0;

            // 24
            w8 =
              (((w9 >>> 7) ^
                (w9 >>> 18) ^
                (w9 >>> 3) ^
                (w9 << 25) ^
                (w9 << 14)) +
                ((w6 >>> 17) ^
                  (w6 >>> 19) ^
                  (w6 >>> 10) ^
                  (w6 << 15) ^
                  (w6 << 13)) +
                w8 +
                w1) |
              0;
            h =
              (w8 +
                h +
                ((e >>> 6) ^
                  (e >>> 11) ^
                  (e >>> 25) ^
                  (e << 26) ^
                  (e << 21) ^
                  (e << 7)) +
                (g ^ (e & (f ^ g))) +
                0x983e5152) |
              0;
            d = (d + h) | 0;
            h =
              (h +
                ((a & b) ^ (c & (a ^ b))) +
                ((a >>> 2) ^
                  (a >>> 13) ^
                  (a >>> 22) ^
                  (a << 30) ^
                  (a << 19) ^
                  (a << 10))) |
              0;

            // 25
            w9 =
              (((w10 >>> 7) ^
                (w10 >>> 18) ^
                (w10 >>> 3) ^
                (w10 << 25) ^
                (w10 << 14)) +
                ((w7 >>> 17) ^
                  (w7 >>> 19) ^
                  (w7 >>> 10) ^
                  (w7 << 15) ^
                  (w7 << 13)) +
                w9 +
                w2) |
              0;
            g =
              (w9 +
                g +
                ((d >>> 6) ^
                  (d >>> 11) ^
                  (d >>> 25) ^
                  (d << 26) ^
                  (d << 21) ^
                  (d << 7)) +
                (f ^ (d & (e ^ f))) +
                0xa831c66d) |
              0;
            c = (c + g) | 0;
            g =
              (g +
                ((h & a) ^ (b & (h ^ a))) +
                ((h >>> 2) ^
                  (h >>> 13) ^
                  (h >>> 22) ^
                  (h << 30) ^
                  (h << 19) ^
                  (h << 10))) |
              0;

            // 26
            w10 =
              (((w11 >>> 7) ^
                (w11 >>> 18) ^
                (w11 >>> 3) ^
                (w11 << 25) ^
                (w11 << 14)) +
                ((w8 >>> 17) ^
                  (w8 >>> 19) ^
                  (w8 >>> 10) ^
                  (w8 << 15) ^
                  (w8 << 13)) +
                w10 +
                w3) |
              0;
            f =
              (w10 +
                f +
                ((c >>> 6) ^
                  (c >>> 11) ^
                  (c >>> 25) ^
                  (c << 26) ^
                  (c << 21) ^
                  (c << 7)) +
                (e ^ (c & (d ^ e))) +
                0xb00327c8) |
              0;
            b = (b + f) | 0;
            f =
              (f +
                ((g & h) ^ (a & (g ^ h))) +
                ((g >>> 2) ^
                  (g >>> 13) ^
                  (g >>> 22) ^
                  (g << 30) ^
                  (g << 19) ^
                  (g << 10))) |
              0;

            // 27
            w11 =
              (((w12 >>> 7) ^
                (w12 >>> 18) ^
                (w12 >>> 3) ^
                (w12 << 25) ^
                (w12 << 14)) +
                ((w9 >>> 17) ^
                  (w9 >>> 19) ^
                  (w9 >>> 10) ^
                  (w9 << 15) ^
                  (w9 << 13)) +
                w11 +
                w4) |
              0;
            e =
              (w11 +
                e +
                ((b >>> 6) ^
                  (b >>> 11) ^
                  (b >>> 25) ^
                  (b << 26) ^
                  (b << 21) ^
                  (b << 7)) +
                (d ^ (b & (c ^ d))) +
                0xbf597fc7) |
              0;
            a = (a + e) | 0;
            e =
              (e +
                ((f & g) ^ (h & (f ^ g))) +
                ((f >>> 2) ^
                  (f >>> 13) ^
                  (f >>> 22) ^
                  (f << 30) ^
                  (f << 19) ^
                  (f << 10))) |
              0;

            // 28
            w12 =
              (((w13 >>> 7) ^
                (w13 >>> 18) ^
                (w13 >>> 3) ^
                (w13 << 25) ^
                (w13 << 14)) +
                ((w10 >>> 17) ^
                  (w10 >>> 19) ^
                  (w10 >>> 10) ^
                  (w10 << 15) ^
                  (w10 << 13)) +
                w12 +
                w5) |
              0;
            d =
              (w12 +
                d +
                ((a >>> 6) ^
                  (a >>> 11) ^
                  (a >>> 25) ^
                  (a << 26) ^
                  (a << 21) ^
                  (a << 7)) +
                (c ^ (a & (b ^ c))) +
                0xc6e00bf3) |
              0;
            h = (h + d) | 0;
            d =
              (d +
                ((e & f) ^ (g & (e ^ f))) +
                ((e >>> 2) ^
                  (e >>> 13) ^
                  (e >>> 22) ^
                  (e << 30) ^
                  (e << 19) ^
                  (e << 10))) |
              0;

            // 29
            w13 =
              (((w14 >>> 7) ^
                (w14 >>> 18) ^
                (w14 >>> 3) ^
                (w14 << 25) ^
                (w14 << 14)) +
                ((w11 >>> 17) ^
                  (w11 >>> 19) ^
                  (w11 >>> 10) ^
                  (w11 << 15) ^
                  (w11 << 13)) +
                w13 +
                w6) |
              0;
            c =
              (w13 +
                c +
                ((h >>> 6) ^
                  (h >>> 11) ^
                  (h >>> 25) ^
                  (h << 26) ^
                  (h << 21) ^
                  (h << 7)) +
                (b ^ (h & (a ^ b))) +
                0xd5a79147) |
              0;
            g = (g + c) | 0;
            c =
              (c +
                ((d & e) ^ (f & (d ^ e))) +
                ((d >>> 2) ^
                  (d >>> 13) ^
                  (d >>> 22) ^
                  (d << 30) ^
                  (d << 19) ^
                  (d << 10))) |
              0;

            // 30
            w14 =
              (((w15 >>> 7) ^
                (w15 >>> 18) ^
                (w15 >>> 3) ^
                (w15 << 25) ^
                (w15 << 14)) +
                ((w12 >>> 17) ^
                  (w12 >>> 19) ^
                  (w12 >>> 10) ^
                  (w12 << 15) ^
                  (w12 << 13)) +
                w14 +
                w7) |
              0;
            b =
              (w14 +
                b +
                ((g >>> 6) ^
                  (g >>> 11) ^
                  (g >>> 25) ^
                  (g << 26) ^
                  (g << 21) ^
                  (g << 7)) +
                (a ^ (g & (h ^ a))) +
                0x06ca6351) |
              0;
            f = (f + b) | 0;
            b =
              (b +
                ((c & d) ^ (e & (c ^ d))) +
                ((c >>> 2) ^
                  (c >>> 13) ^
                  (c >>> 22) ^
                  (c << 30) ^
                  (c << 19) ^
                  (c << 10))) |
              0;

            // 31
            w15 =
              (((w0 >>> 7) ^
                (w0 >>> 18) ^
                (w0 >>> 3) ^
                (w0 << 25) ^
                (w0 << 14)) +
                ((w13 >>> 17) ^
                  (w13 >>> 19) ^
                  (w13 >>> 10) ^
                  (w13 << 15) ^
                  (w13 << 13)) +
                w15 +
                w8) |
              0;
            a =
              (w15 +
                a +
                ((f >>> 6) ^
                  (f >>> 11) ^
                  (f >>> 25) ^
                  (f << 26) ^
                  (f << 21) ^
                  (f << 7)) +
                (h ^ (f & (g ^ h))) +
                0x14292967) |
              0;
            e = (e + a) | 0;
            a =
              (a +
                ((b & c) ^ (d & (b ^ c))) +
                ((b >>> 2) ^
                  (b >>> 13) ^
                  (b >>> 22) ^
                  (b << 30) ^
                  (b << 19) ^
                  (b << 10))) |
              0;

            // 32
            w0 =
              (((w1 >>> 7) ^
                (w1 >>> 18) ^
                (w1 >>> 3) ^
                (w1 << 25) ^
                (w1 << 14)) +
                ((w14 >>> 17) ^
                  (w14 >>> 19) ^
                  (w14 >>> 10) ^
                  (w14 << 15) ^
                  (w14 << 13)) +
                w0 +
                w9) |
              0;
            h =
              (w0 +
                h +
                ((e >>> 6) ^
                  (e >>> 11) ^
                  (e >>> 25) ^
                  (e << 26) ^
                  (e << 21) ^
                  (e << 7)) +
                (g ^ (e & (f ^ g))) +
                0x27b70a85) |
              0;
            d = (d + h) | 0;
            h =
              (h +
                ((a & b) ^ (c & (a ^ b))) +
                ((a >>> 2) ^
                  (a >>> 13) ^
                  (a >>> 22) ^
                  (a << 30) ^
                  (a << 19) ^
                  (a << 10))) |
              0;

            // 33
            w1 =
              (((w2 >>> 7) ^
                (w2 >>> 18) ^
                (w2 >>> 3) ^
                (w2 << 25) ^
                (w2 << 14)) +
                ((w15 >>> 17) ^
                  (w15 >>> 19) ^
                  (w15 >>> 10) ^
                  (w15 << 15) ^
                  (w15 << 13)) +
                w1 +
                w10) |
              0;
            g =
              (w1 +
                g +
                ((d >>> 6) ^
                  (d >>> 11) ^
                  (d >>> 25) ^
                  (d << 26) ^
                  (d << 21) ^
                  (d << 7)) +
                (f ^ (d & (e ^ f))) +
                0x2e1b2138) |
              0;
            c = (c + g) | 0;
            g =
              (g +
                ((h & a) ^ (b & (h ^ a))) +
                ((h >>> 2) ^
                  (h >>> 13) ^
                  (h >>> 22) ^
                  (h << 30) ^
                  (h << 19) ^
                  (h << 10))) |
              0;

            // 34
            w2 =
              (((w3 >>> 7) ^
                (w3 >>> 18) ^
                (w3 >>> 3) ^
                (w3 << 25) ^
                (w3 << 14)) +
                ((w0 >>> 17) ^
                  (w0 >>> 19) ^
                  (w0 >>> 10) ^
                  (w0 << 15) ^
                  (w0 << 13)) +
                w2 +
                w11) |
              0;
            f =
              (w2 +
                f +
                ((c >>> 6) ^
                  (c >>> 11) ^
                  (c >>> 25) ^
                  (c << 26) ^
                  (c << 21) ^
                  (c << 7)) +
                (e ^ (c & (d ^ e))) +
                0x4d2c6dfc) |
              0;
            b = (b + f) | 0;
            f =
              (f +
                ((g & h) ^ (a & (g ^ h))) +
                ((g >>> 2) ^
                  (g >>> 13) ^
                  (g >>> 22) ^
                  (g << 30) ^
                  (g << 19) ^
                  (g << 10))) |
              0;

            // 35
            w3 =
              (((w4 >>> 7) ^
                (w4 >>> 18) ^
                (w4 >>> 3) ^
                (w4 << 25) ^
                (w4 << 14)) +
                ((w1 >>> 17) ^
                  (w1 >>> 19) ^
                  (w1 >>> 10) ^
                  (w1 << 15) ^
                  (w1 << 13)) +
                w3 +
                w12) |
              0;
            e =
              (w3 +
                e +
                ((b >>> 6) ^
                  (b >>> 11) ^
                  (b >>> 25) ^
                  (b << 26) ^
                  (b << 21) ^
                  (b << 7)) +
                (d ^ (b & (c ^ d))) +
                0x53380d13) |
              0;
            a = (a + e) | 0;
            e =
              (e +
                ((f & g) ^ (h & (f ^ g))) +
                ((f >>> 2) ^
                  (f >>> 13) ^
                  (f >>> 22) ^
                  (f << 30) ^
                  (f << 19) ^
                  (f << 10))) |
              0;

            // 36
            w4 =
              (((w5 >>> 7) ^
                (w5 >>> 18) ^
                (w5 >>> 3) ^
                (w5 << 25) ^
                (w5 << 14)) +
                ((w2 >>> 17) ^
                  (w2 >>> 19) ^
                  (w2 >>> 10) ^
                  (w2 << 15) ^
                  (w2 << 13)) +
                w4 +
                w13) |
              0;
            d =
              (w4 +
                d +
                ((a >>> 6) ^
                  (a >>> 11) ^
                  (a >>> 25) ^
                  (a << 26) ^
                  (a << 21) ^
                  (a << 7)) +
                (c ^ (a & (b ^ c))) +
                0x650a7354) |
              0;
            h = (h + d) | 0;
            d =
              (d +
                ((e & f) ^ (g & (e ^ f))) +
                ((e >>> 2) ^
                  (e >>> 13) ^
                  (e >>> 22) ^
                  (e << 30) ^
                  (e << 19) ^
                  (e << 10))) |
              0;

            // 37
            w5 =
              (((w6 >>> 7) ^
                (w6 >>> 18) ^
                (w6 >>> 3) ^
                (w6 << 25) ^
                (w6 << 14)) +
                ((w3 >>> 17) ^
                  (w3 >>> 19) ^
                  (w3 >>> 10) ^
                  (w3 << 15) ^
                  (w3 << 13)) +
                w5 +
                w14) |
              0;
            c =
              (w5 +
                c +
                ((h >>> 6) ^
                  (h >>> 11) ^
                  (h >>> 25) ^
                  (h << 26) ^
                  (h << 21) ^
                  (h << 7)) +
                (b ^ (h & (a ^ b))) +
                0x766a0abb) |
              0;
            g = (g + c) | 0;
            c =
              (c +
                ((d & e) ^ (f & (d ^ e))) +
                ((d >>> 2) ^
                  (d >>> 13) ^
                  (d >>> 22) ^
                  (d << 30) ^
                  (d << 19) ^
                  (d << 10))) |
              0;

            // 38
            w6 =
              (((w7 >>> 7) ^
                (w7 >>> 18) ^
                (w7 >>> 3) ^
                (w7 << 25) ^
                (w7 << 14)) +
                ((w4 >>> 17) ^
                  (w4 >>> 19) ^
                  (w4 >>> 10) ^
                  (w4 << 15) ^
                  (w4 << 13)) +
                w6 +
                w15) |
              0;
            b =
              (w6 +
                b +
                ((g >>> 6) ^
                  (g >>> 11) ^
                  (g >>> 25) ^
                  (g << 26) ^
                  (g << 21) ^
                  (g << 7)) +
                (a ^ (g & (h ^ a))) +
                0x81c2c92e) |
              0;
            f = (f + b) | 0;
            b =
              (b +
                ((c & d) ^ (e & (c ^ d))) +
                ((c >>> 2) ^
                  (c >>> 13) ^
                  (c >>> 22) ^
                  (c << 30) ^
                  (c << 19) ^
                  (c << 10))) |
              0;

            // 39
            w7 =
              (((w8 >>> 7) ^
                (w8 >>> 18) ^
                (w8 >>> 3) ^
                (w8 << 25) ^
                (w8 << 14)) +
                ((w5 >>> 17) ^
                  (w5 >>> 19) ^
                  (w5 >>> 10) ^
                  (w5 << 15) ^
                  (w5 << 13)) +
                w7 +
                w0) |
              0;
            a =
              (w7 +
                a +
                ((f >>> 6) ^
                  (f >>> 11) ^
                  (f >>> 25) ^
                  (f << 26) ^
                  (f << 21) ^
                  (f << 7)) +
                (h ^ (f & (g ^ h))) +
                0x92722c85) |
              0;
            e = (e + a) | 0;
            a =
              (a +
                ((b & c) ^ (d & (b ^ c))) +
                ((b >>> 2) ^
                  (b >>> 13) ^
                  (b >>> 22) ^
                  (b << 30) ^
                  (b << 19) ^
                  (b << 10))) |
              0;

            // 40
            w8 =
              (((w9 >>> 7) ^
                (w9 >>> 18) ^
                (w9 >>> 3) ^
                (w9 << 25) ^
                (w9 << 14)) +
                ((w6 >>> 17) ^
                  (w6 >>> 19) ^
                  (w6 >>> 10) ^
                  (w6 << 15) ^
                  (w6 << 13)) +
                w8 +
                w1) |
              0;
            h =
              (w8 +
                h +
                ((e >>> 6) ^
                  (e >>> 11) ^
                  (e >>> 25) ^
                  (e << 26) ^
                  (e << 21) ^
                  (e << 7)) +
                (g ^ (e & (f ^ g))) +
                0xa2bfe8a1) |
              0;
            d = (d + h) | 0;
            h =
              (h +
                ((a & b) ^ (c & (a ^ b))) +
                ((a >>> 2) ^
                  (a >>> 13) ^
                  (a >>> 22) ^
                  (a << 30) ^
                  (a << 19) ^
                  (a << 10))) |
              0;

            // 41
            w9 =
              (((w10 >>> 7) ^
                (w10 >>> 18) ^
                (w10 >>> 3) ^
                (w10 << 25) ^
                (w10 << 14)) +
                ((w7 >>> 17) ^
                  (w7 >>> 19) ^
                  (w7 >>> 10) ^
                  (w7 << 15) ^
                  (w7 << 13)) +
                w9 +
                w2) |
              0;
            g =
              (w9 +
                g +
                ((d >>> 6) ^
                  (d >>> 11) ^
                  (d >>> 25) ^
                  (d << 26) ^
                  (d << 21) ^
                  (d << 7)) +
                (f ^ (d & (e ^ f))) +
                0xa81a664b) |
              0;
            c = (c + g) | 0;
            g =
              (g +
                ((h & a) ^ (b & (h ^ a))) +
                ((h >>> 2) ^
                  (h >>> 13) ^
                  (h >>> 22) ^
                  (h << 30) ^
                  (h << 19) ^
                  (h << 10))) |
              0;

            // 42
            w10 =
              (((w11 >>> 7) ^
                (w11 >>> 18) ^
                (w11 >>> 3) ^
                (w11 << 25) ^
                (w11 << 14)) +
                ((w8 >>> 17) ^
                  (w8 >>> 19) ^
                  (w8 >>> 10) ^
                  (w8 << 15) ^
                  (w8 << 13)) +
                w10 +
                w3) |
              0;
            f =
              (w10 +
                f +
                ((c >>> 6) ^
                  (c >>> 11) ^
                  (c >>> 25) ^
                  (c << 26) ^
                  (c << 21) ^
                  (c << 7)) +
                (e ^ (c & (d ^ e))) +
                0xc24b8b70) |
              0;
            b = (b + f) | 0;
            f =
              (f +
                ((g & h) ^ (a & (g ^ h))) +
                ((g >>> 2) ^
                  (g >>> 13) ^
                  (g >>> 22) ^
                  (g << 30) ^
                  (g << 19) ^
                  (g << 10))) |
              0;

            // 43
            w11 =
              (((w12 >>> 7) ^
                (w12 >>> 18) ^
                (w12 >>> 3) ^
                (w12 << 25) ^
                (w12 << 14)) +
                ((w9 >>> 17) ^
                  (w9 >>> 19) ^
                  (w9 >>> 10) ^
                  (w9 << 15) ^
                  (w9 << 13)) +
                w11 +
                w4) |
              0;
            e =
              (w11 +
                e +
                ((b >>> 6) ^
                  (b >>> 11) ^
                  (b >>> 25) ^
                  (b << 26) ^
                  (b << 21) ^
                  (b << 7)) +
                (d ^ (b & (c ^ d))) +
                0xc76c51a3) |
              0;
            a = (a + e) | 0;
            e =
              (e +
                ((f & g) ^ (h & (f ^ g))) +
                ((f >>> 2) ^
                  (f >>> 13) ^
                  (f >>> 22) ^
                  (f << 30) ^
                  (f << 19) ^
                  (f << 10))) |
              0;

            // 44
            w12 =
              (((w13 >>> 7) ^
                (w13 >>> 18) ^
                (w13 >>> 3) ^
                (w13 << 25) ^
                (w13 << 14)) +
                ((w10 >>> 17) ^
                  (w10 >>> 19) ^
                  (w10 >>> 10) ^
                  (w10 << 15) ^
                  (w10 << 13)) +
                w12 +
                w5) |
              0;
            d =
              (w12 +
                d +
                ((a >>> 6) ^
                  (a >>> 11) ^
                  (a >>> 25) ^
                  (a << 26) ^
                  (a << 21) ^
                  (a << 7)) +
                (c ^ (a & (b ^ c))) +
                0xd192e819) |
              0;
            h = (h + d) | 0;
            d =
              (d +
                ((e & f) ^ (g & (e ^ f))) +
                ((e >>> 2) ^
                  (e >>> 13) ^
                  (e >>> 22) ^
                  (e << 30) ^
                  (e << 19) ^
                  (e << 10))) |
              0;

            // 45
            w13 =
              (((w14 >>> 7) ^
                (w14 >>> 18) ^
                (w14 >>> 3) ^
                (w14 << 25) ^
                (w14 << 14)) +
                ((w11 >>> 17) ^
                  (w11 >>> 19) ^
                  (w11 >>> 10) ^
                  (w11 << 15) ^
                  (w11 << 13)) +
                w13 +
                w6) |
              0;
            c =
              (w13 +
                c +
                ((h >>> 6) ^
                  (h >>> 11) ^
                  (h >>> 25) ^
                  (h << 26) ^
                  (h << 21) ^
                  (h << 7)) +
                (b ^ (h & (a ^ b))) +
                0xd6990624) |
              0;
            g = (g + c) | 0;
            c =
              (c +
                ((d & e) ^ (f & (d ^ e))) +
                ((d >>> 2) ^
                  (d >>> 13) ^
                  (d >>> 22) ^
                  (d << 30) ^
                  (d << 19) ^
                  (d << 10))) |
              0;

            // 46
            w14 =
              (((w15 >>> 7) ^
                (w15 >>> 18) ^
                (w15 >>> 3) ^
                (w15 << 25) ^
                (w15 << 14)) +
                ((w12 >>> 17) ^
                  (w12 >>> 19) ^
                  (w12 >>> 10) ^
                  (w12 << 15) ^
                  (w12 << 13)) +
                w14 +
                w7) |
              0;
            b =
              (w14 +
                b +
                ((g >>> 6) ^
                  (g >>> 11) ^
                  (g >>> 25) ^
                  (g << 26) ^
                  (g << 21) ^
                  (g << 7)) +
                (a ^ (g & (h ^ a))) +
                0xf40e3585) |
              0;
            f = (f + b) | 0;
            b =
              (b +
                ((c & d) ^ (e & (c ^ d))) +
                ((c >>> 2) ^
                  (c >>> 13) ^
                  (c >>> 22) ^
                  (c << 30) ^
                  (c << 19) ^
                  (c << 10))) |
              0;

            // 47
            w15 =
              (((w0 >>> 7) ^
                (w0 >>> 18) ^
                (w0 >>> 3) ^
                (w0 << 25) ^
                (w0 << 14)) +
                ((w13 >>> 17) ^
                  (w13 >>> 19) ^
                  (w13 >>> 10) ^
                  (w13 << 15) ^
                  (w13 << 13)) +
                w15 +
                w8) |
              0;
            a =
              (w15 +
                a +
                ((f >>> 6) ^
                  (f >>> 11) ^
                  (f >>> 25) ^
                  (f << 26) ^
                  (f << 21) ^
                  (f << 7)) +
                (h ^ (f & (g ^ h))) +
                0x106aa070) |
              0;
            e = (e + a) | 0;
            a =
              (a +
                ((b & c) ^ (d & (b ^ c))) +
                ((b >>> 2) ^
                  (b >>> 13) ^
                  (b >>> 22) ^
                  (b << 30) ^
                  (b << 19) ^
                  (b << 10))) |
              0;

            // 48
            w0 =
              (((w1 >>> 7) ^
                (w1 >>> 18) ^
                (w1 >>> 3) ^
                (w1 << 25) ^
                (w1 << 14)) +
                ((w14 >>> 17) ^
                  (w14 >>> 19) ^
                  (w14 >>> 10) ^
                  (w14 << 15) ^
                  (w14 << 13)) +
                w0 +
                w9) |
              0;
            h =
              (w0 +
                h +
                ((e >>> 6) ^
                  (e >>> 11) ^
                  (e >>> 25) ^
                  (e << 26) ^
                  (e << 21) ^
                  (e << 7)) +
                (g ^ (e & (f ^ g))) +
                0x19a4c116) |
              0;
            d = (d + h) | 0;
            h =
              (h +
                ((a & b) ^ (c & (a ^ b))) +
                ((a >>> 2) ^
                  (a >>> 13) ^
                  (a >>> 22) ^
                  (a << 30) ^
                  (a << 19) ^
                  (a << 10))) |
              0;

            // 49
            w1 =
              (((w2 >>> 7) ^
                (w2 >>> 18) ^
                (w2 >>> 3) ^
                (w2 << 25) ^
                (w2 << 14)) +
                ((w15 >>> 17) ^
                  (w15 >>> 19) ^
                  (w15 >>> 10) ^
                  (w15 << 15) ^
                  (w15 << 13)) +
                w1 +
                w10) |
              0;
            g =
              (w1 +
                g +
                ((d >>> 6) ^
                  (d >>> 11) ^
                  (d >>> 25) ^
                  (d << 26) ^
                  (d << 21) ^
                  (d << 7)) +
                (f ^ (d & (e ^ f))) +
                0x1e376c08) |
              0;
            c = (c + g) | 0;
            g =
              (g +
                ((h & a) ^ (b & (h ^ a))) +
                ((h >>> 2) ^
                  (h >>> 13) ^
                  (h >>> 22) ^
                  (h << 30) ^
                  (h << 19) ^
                  (h << 10))) |
              0;

            // 50
            w2 =
              (((w3 >>> 7) ^
                (w3 >>> 18) ^
                (w3 >>> 3) ^
                (w3 << 25) ^
                (w3 << 14)) +
                ((w0 >>> 17) ^
                  (w0 >>> 19) ^
                  (w0 >>> 10) ^
                  (w0 << 15) ^
                  (w0 << 13)) +
                w2 +
                w11) |
              0;
            f =
              (w2 +
                f +
                ((c >>> 6) ^
                  (c >>> 11) ^
                  (c >>> 25) ^
                  (c << 26) ^
                  (c << 21) ^
                  (c << 7)) +
                (e ^ (c & (d ^ e))) +
                0x2748774c) |
              0;
            b = (b + f) | 0;
            f =
              (f +
                ((g & h) ^ (a & (g ^ h))) +
                ((g >>> 2) ^
                  (g >>> 13) ^
                  (g >>> 22) ^
                  (g << 30) ^
                  (g << 19) ^
                  (g << 10))) |
              0;

            // 51
            w3 =
              (((w4 >>> 7) ^
                (w4 >>> 18) ^
                (w4 >>> 3) ^
                (w4 << 25) ^
                (w4 << 14)) +
                ((w1 >>> 17) ^
                  (w1 >>> 19) ^
                  (w1 >>> 10) ^
                  (w1 << 15) ^
                  (w1 << 13)) +
                w3 +
                w12) |
              0;
            e =
              (w3 +
                e +
                ((b >>> 6) ^
                  (b >>> 11) ^
                  (b >>> 25) ^
                  (b << 26) ^
                  (b << 21) ^
                  (b << 7)) +
                (d ^ (b & (c ^ d))) +
                0x34b0bcb5) |
              0;
            a = (a + e) | 0;
            e =
              (e +
                ((f & g) ^ (h & (f ^ g))) +
                ((f >>> 2) ^
                  (f >>> 13) ^
                  (f >>> 22) ^
                  (f << 30) ^
                  (f << 19) ^
                  (f << 10))) |
              0;

            // 52
            w4 =
              (((w5 >>> 7) ^
                (w5 >>> 18) ^
                (w5 >>> 3) ^
                (w5 << 25) ^
                (w5 << 14)) +
                ((w2 >>> 17) ^
                  (w2 >>> 19) ^
                  (w2 >>> 10) ^
                  (w2 << 15) ^
                  (w2 << 13)) +
                w4 +
                w13) |
              0;
            d =
              (w4 +
                d +
                ((a >>> 6) ^
                  (a >>> 11) ^
                  (a >>> 25) ^
                  (a << 26) ^
                  (a << 21) ^
                  (a << 7)) +
                (c ^ (a & (b ^ c))) +
                0x391c0cb3) |
              0;
            h = (h + d) | 0;
            d =
              (d +
                ((e & f) ^ (g & (e ^ f))) +
                ((e >>> 2) ^
                  (e >>> 13) ^
                  (e >>> 22) ^
                  (e << 30) ^
                  (e << 19) ^
                  (e << 10))) |
              0;

            // 53
            w5 =
              (((w6 >>> 7) ^
                (w6 >>> 18) ^
                (w6 >>> 3) ^
                (w6 << 25) ^
                (w6 << 14)) +
                ((w3 >>> 17) ^
                  (w3 >>> 19) ^
                  (w3 >>> 10) ^
                  (w3 << 15) ^
                  (w3 << 13)) +
                w5 +
                w14) |
              0;
            c =
              (w5 +
                c +
                ((h >>> 6) ^
                  (h >>> 11) ^
                  (h >>> 25) ^
                  (h << 26) ^
                  (h << 21) ^
                  (h << 7)) +
                (b ^ (h & (a ^ b))) +
                0x4ed8aa4a) |
              0;
            g = (g + c) | 0;
            c =
              (c +
                ((d & e) ^ (f & (d ^ e))) +
                ((d >>> 2) ^
                  (d >>> 13) ^
                  (d >>> 22) ^
                  (d << 30) ^
                  (d << 19) ^
                  (d << 10))) |
              0;

            // 54
            w6 =
              (((w7 >>> 7) ^
                (w7 >>> 18) ^
                (w7 >>> 3) ^
                (w7 << 25) ^
                (w7 << 14)) +
                ((w4 >>> 17) ^
                  (w4 >>> 19) ^
                  (w4 >>> 10) ^
                  (w4 << 15) ^
                  (w4 << 13)) +
                w6 +
                w15) |
              0;
            b =
              (w6 +
                b +
                ((g >>> 6) ^
                  (g >>> 11) ^
                  (g >>> 25) ^
                  (g << 26) ^
                  (g << 21) ^
                  (g << 7)) +
                (a ^ (g & (h ^ a))) +
                0x5b9cca4f) |
              0;
            f = (f + b) | 0;
            b =
              (b +
                ((c & d) ^ (e & (c ^ d))) +
                ((c >>> 2) ^
                  (c >>> 13) ^
                  (c >>> 22) ^
                  (c << 30) ^
                  (c << 19) ^
                  (c << 10))) |
              0;

            // 55
            w7 =
              (((w8 >>> 7) ^
                (w8 >>> 18) ^
                (w8 >>> 3) ^
                (w8 << 25) ^
                (w8 << 14)) +
                ((w5 >>> 17) ^
                  (w5 >>> 19) ^
                  (w5 >>> 10) ^
                  (w5 << 15) ^
                  (w5 << 13)) +
                w7 +
                w0) |
              0;
            a =
              (w7 +
                a +
                ((f >>> 6) ^
                  (f >>> 11) ^
                  (f >>> 25) ^
                  (f << 26) ^
                  (f << 21) ^
                  (f << 7)) +
                (h ^ (f & (g ^ h))) +
                0x682e6ff3) |
              0;
            e = (e + a) | 0;
            a =
              (a +
                ((b & c) ^ (d & (b ^ c))) +
                ((b >>> 2) ^
                  (b >>> 13) ^
                  (b >>> 22) ^
                  (b << 30) ^
                  (b << 19) ^
                  (b << 10))) |
              0;

            // 56
            w8 =
              (((w9 >>> 7) ^
                (w9 >>> 18) ^
                (w9 >>> 3) ^
                (w9 << 25) ^
                (w9 << 14)) +
                ((w6 >>> 17) ^
                  (w6 >>> 19) ^
                  (w6 >>> 10) ^
                  (w6 << 15) ^
                  (w6 << 13)) +
                w8 +
                w1) |
              0;
            h =
              (w8 +
                h +
                ((e >>> 6) ^
                  (e >>> 11) ^
                  (e >>> 25) ^
                  (e << 26) ^
                  (e << 21) ^
                  (e << 7)) +
                (g ^ (e & (f ^ g))) +
                0x748f82ee) |
              0;
            d = (d + h) | 0;
            h =
              (h +
                ((a & b) ^ (c & (a ^ b))) +
                ((a >>> 2) ^
                  (a >>> 13) ^
                  (a >>> 22) ^
                  (a << 30) ^
                  (a << 19) ^
                  (a << 10))) |
              0;

            // 57
            w9 =
              (((w10 >>> 7) ^
                (w10 >>> 18) ^
                (w10 >>> 3) ^
                (w10 << 25) ^
                (w10 << 14)) +
                ((w7 >>> 17) ^
                  (w7 >>> 19) ^
                  (w7 >>> 10) ^
                  (w7 << 15) ^
                  (w7 << 13)) +
                w9 +
                w2) |
              0;
            g =
              (w9 +
                g +
                ((d >>> 6) ^
                  (d >>> 11) ^
                  (d >>> 25) ^
                  (d << 26) ^
                  (d << 21) ^
                  (d << 7)) +
                (f ^ (d & (e ^ f))) +
                0x78a5636f) |
              0;
            c = (c + g) | 0;
            g =
              (g +
                ((h & a) ^ (b & (h ^ a))) +
                ((h >>> 2) ^
                  (h >>> 13) ^
                  (h >>> 22) ^
                  (h << 30) ^
                  (h << 19) ^
                  (h << 10))) |
              0;

            // 58
            w10 =
              (((w11 >>> 7) ^
                (w11 >>> 18) ^
                (w11 >>> 3) ^
                (w11 << 25) ^
                (w11 << 14)) +
                ((w8 >>> 17) ^
                  (w8 >>> 19) ^
                  (w8 >>> 10) ^
                  (w8 << 15) ^
                  (w8 << 13)) +
                w10 +
                w3) |
              0;
            f =
              (w10 +
                f +
                ((c >>> 6) ^
                  (c >>> 11) ^
                  (c >>> 25) ^
                  (c << 26) ^
                  (c << 21) ^
                  (c << 7)) +
                (e ^ (c & (d ^ e))) +
                0x84c87814) |
              0;
            b = (b + f) | 0;
            f =
              (f +
                ((g & h) ^ (a & (g ^ h))) +
                ((g >>> 2) ^
                  (g >>> 13) ^
                  (g >>> 22) ^
                  (g << 30) ^
                  (g << 19) ^
                  (g << 10))) |
              0;

            // 59
            w11 =
              (((w12 >>> 7) ^
                (w12 >>> 18) ^
                (w12 >>> 3) ^
                (w12 << 25) ^
                (w12 << 14)) +
                ((w9 >>> 17) ^
                  (w9 >>> 19) ^
                  (w9 >>> 10) ^
                  (w9 << 15) ^
                  (w9 << 13)) +
                w11 +
                w4) |
              0;
            e =
              (w11 +
                e +
                ((b >>> 6) ^
                  (b >>> 11) ^
                  (b >>> 25) ^
                  (b << 26) ^
                  (b << 21) ^
                  (b << 7)) +
                (d ^ (b & (c ^ d))) +
                0x8cc70208) |
              0;
            a = (a + e) | 0;
            e =
              (e +
                ((f & g) ^ (h & (f ^ g))) +
                ((f >>> 2) ^
                  (f >>> 13) ^
                  (f >>> 22) ^
                  (f << 30) ^
                  (f << 19) ^
                  (f << 10))) |
              0;

            // 60
            w12 =
              (((w13 >>> 7) ^
                (w13 >>> 18) ^
                (w13 >>> 3) ^
                (w13 << 25) ^
                (w13 << 14)) +
                ((w10 >>> 17) ^
                  (w10 >>> 19) ^
                  (w10 >>> 10) ^
                  (w10 << 15) ^
                  (w10 << 13)) +
                w12 +
                w5) |
              0;
            d =
              (w12 +
                d +
                ((a >>> 6) ^
                  (a >>> 11) ^
                  (a >>> 25) ^
                  (a << 26) ^
                  (a << 21) ^
                  (a << 7)) +
                (c ^ (a & (b ^ c))) +
                0x90befffa) |
              0;
            h = (h + d) | 0;
            d =
              (d +
                ((e & f) ^ (g & (e ^ f))) +
                ((e >>> 2) ^
                  (e >>> 13) ^
                  (e >>> 22) ^
                  (e << 30) ^
                  (e << 19) ^
                  (e << 10))) |
              0;

            // 61
            w13 =
              (((w14 >>> 7) ^
                (w14 >>> 18) ^
                (w14 >>> 3) ^
                (w14 << 25) ^
                (w14 << 14)) +
                ((w11 >>> 17) ^
                  (w11 >>> 19) ^
                  (w11 >>> 10) ^
                  (w11 << 15) ^
                  (w11 << 13)) +
                w13 +
                w6) |
              0;
            c =
              (w13 +
                c +
                ((h >>> 6) ^
                  (h >>> 11) ^
                  (h >>> 25) ^
                  (h << 26) ^
                  (h << 21) ^
                  (h << 7)) +
                (b ^ (h & (a ^ b))) +
                0xa4506ceb) |
              0;
            g = (g + c) | 0;
            c =
              (c +
                ((d & e) ^ (f & (d ^ e))) +
                ((d >>> 2) ^
                  (d >>> 13) ^
                  (d >>> 22) ^
                  (d << 30) ^
                  (d << 19) ^
                  (d << 10))) |
              0;

            // 62
            w14 =
              (((w15 >>> 7) ^
                (w15 >>> 18) ^
                (w15 >>> 3) ^
                (w15 << 25) ^
                (w15 << 14)) +
                ((w12 >>> 17) ^
                  (w12 >>> 19) ^
                  (w12 >>> 10) ^
                  (w12 << 15) ^
                  (w12 << 13)) +
                w14 +
                w7) |
              0;
            b =
              (w14 +
                b +
                ((g >>> 6) ^
                  (g >>> 11) ^
                  (g >>> 25) ^
                  (g << 26) ^
                  (g << 21) ^
                  (g << 7)) +
                (a ^ (g & (h ^ a))) +
                0xbef9a3f7) |
              0;
            f = (f + b) | 0;
            b =
              (b +
                ((c & d) ^ (e & (c ^ d))) +
                ((c >>> 2) ^
                  (c >>> 13) ^
                  (c >>> 22) ^
                  (c << 30) ^
                  (c << 19) ^
                  (c << 10))) |
              0;

            // 63
            w15 =
              (((w0 >>> 7) ^
                (w0 >>> 18) ^
                (w0 >>> 3) ^
                (w0 << 25) ^
                (w0 << 14)) +
                ((w13 >>> 17) ^
                  (w13 >>> 19) ^
                  (w13 >>> 10) ^
                  (w13 << 15) ^
                  (w13 << 13)) +
                w15 +
                w8) |
              0;
            a =
              (w15 +
                a +
                ((f >>> 6) ^
                  (f >>> 11) ^
                  (f >>> 25) ^
                  (f << 26) ^
                  (f << 21) ^
                  (f << 7)) +
                (h ^ (f & (g ^ h))) +
                0xc67178f2) |
              0;
            e = (e + a) | 0;
            a =
              (a +
                ((b & c) ^ (d & (b ^ c))) +
                ((b >>> 2) ^
                  (b >>> 13) ^
                  (b >>> 22) ^
                  (b << 30) ^
                  (b << 19) ^
                  (b << 10))) |
              0;

            H0 = (H0 + a) | 0;
            H1 = (H1 + b) | 0;
            H2 = (H2 + c) | 0;
            H3 = (H3 + d) | 0;
            H4 = (H4 + e) | 0;
            H5 = (H5 + f) | 0;
            H6 = (H6 + g) | 0;
            H7 = (H7 + h) | 0;
          }

          function _core_heap(offset) {
            offset = offset | 0;

            _core(
              (HEAP[offset | 0] << 24) |
                (HEAP[offset | 1] << 16) |
                (HEAP[offset | 2] << 8) |
                HEAP[offset | 3],
              (HEAP[offset | 4] << 24) |
                (HEAP[offset | 5] << 16) |
                (HEAP[offset | 6] << 8) |
                HEAP[offset | 7],
              (HEAP[offset | 8] << 24) |
                (HEAP[offset | 9] << 16) |
                (HEAP[offset | 10] << 8) |
                HEAP[offset | 11],
              (HEAP[offset | 12] << 24) |
                (HEAP[offset | 13] << 16) |
                (HEAP[offset | 14] << 8) |
                HEAP[offset | 15],
              (HEAP[offset | 16] << 24) |
                (HEAP[offset | 17] << 16) |
                (HEAP[offset | 18] << 8) |
                HEAP[offset | 19],
              (HEAP[offset | 20] << 24) |
                (HEAP[offset | 21] << 16) |
                (HEAP[offset | 22] << 8) |
                HEAP[offset | 23],
              (HEAP[offset | 24] << 24) |
                (HEAP[offset | 25] << 16) |
                (HEAP[offset | 26] << 8) |
                HEAP[offset | 27],
              (HEAP[offset | 28] << 24) |
                (HEAP[offset | 29] << 16) |
                (HEAP[offset | 30] << 8) |
                HEAP[offset | 31],
              (HEAP[offset | 32] << 24) |
                (HEAP[offset | 33] << 16) |
                (HEAP[offset | 34] << 8) |
                HEAP[offset | 35],
              (HEAP[offset | 36] << 24) |
                (HEAP[offset | 37] << 16) |
                (HEAP[offset | 38] << 8) |
                HEAP[offset | 39],
              (HEAP[offset | 40] << 24) |
                (HEAP[offset | 41] << 16) |
                (HEAP[offset | 42] << 8) |
                HEAP[offset | 43],
              (HEAP[offset | 44] << 24) |
                (HEAP[offset | 45] << 16) |
                (HEAP[offset | 46] << 8) |
                HEAP[offset | 47],
              (HEAP[offset | 48] << 24) |
                (HEAP[offset | 49] << 16) |
                (HEAP[offset | 50] << 8) |
                HEAP[offset | 51],
              (HEAP[offset | 52] << 24) |
                (HEAP[offset | 53] << 16) |
                (HEAP[offset | 54] << 8) |
                HEAP[offset | 55],
              (HEAP[offset | 56] << 24) |
                (HEAP[offset | 57] << 16) |
                (HEAP[offset | 58] << 8) |
                HEAP[offset | 59],
              (HEAP[offset | 60] << 24) |
                (HEAP[offset | 61] << 16) |
                (HEAP[offset | 62] << 8) |
                HEAP[offset | 63]
            );
          }

          // offset — multiple of 32
          function _state_to_heap(output) {
            output = output | 0;

            HEAP[output | 0] = H0 >>> 24;
            HEAP[output | 1] = (H0 >>> 16) & 255;
            HEAP[output | 2] = (H0 >>> 8) & 255;
            HEAP[output | 3] = H0 & 255;
            HEAP[output | 4] = H1 >>> 24;
            HEAP[output | 5] = (H1 >>> 16) & 255;
            HEAP[output | 6] = (H1 >>> 8) & 255;
            HEAP[output | 7] = H1 & 255;
            HEAP[output | 8] = H2 >>> 24;
            HEAP[output | 9] = (H2 >>> 16) & 255;
            HEAP[output | 10] = (H2 >>> 8) & 255;
            HEAP[output | 11] = H2 & 255;
            HEAP[output | 12] = H3 >>> 24;
            HEAP[output | 13] = (H3 >>> 16) & 255;
            HEAP[output | 14] = (H3 >>> 8) & 255;
            HEAP[output | 15] = H3 & 255;
            HEAP[output | 16] = H4 >>> 24;
            HEAP[output | 17] = (H4 >>> 16) & 255;
            HEAP[output | 18] = (H4 >>> 8) & 255;
            HEAP[output | 19] = H4 & 255;
            HEAP[output | 20] = H5 >>> 24;
            HEAP[output | 21] = (H5 >>> 16) & 255;
            HEAP[output | 22] = (H5 >>> 8) & 255;
            HEAP[output | 23] = H5 & 255;
            HEAP[output | 24] = H6 >>> 24;
            HEAP[output | 25] = (H6 >>> 16) & 255;
            HEAP[output | 26] = (H6 >>> 8) & 255;
            HEAP[output | 27] = H6 & 255;
            HEAP[output | 28] = H7 >>> 24;
            HEAP[output | 29] = (H7 >>> 16) & 255;
            HEAP[output | 30] = (H7 >>> 8) & 255;
            HEAP[output | 31] = H7 & 255;
          }

          function reset() {
            H0 = 0x6a09e667;
            H1 = 0xbb67ae85;
            H2 = 0x3c6ef372;
            H3 = 0xa54ff53a;
            H4 = 0x510e527f;
            H5 = 0x9b05688c;
            H6 = 0x1f83d9ab;
            H7 = 0x5be0cd19;
            TOTAL0 = TOTAL1 = 0;
          }

          function init(h0, h1, h2, h3, h4, h5, h6, h7, total0, total1) {
            h0 = h0 | 0;
            h1 = h1 | 0;
            h2 = h2 | 0;
            h3 = h3 | 0;
            h4 = h4 | 0;
            h5 = h5 | 0;
            h6 = h6 | 0;
            h7 = h7 | 0;
            total0 = total0 | 0;
            total1 = total1 | 0;

            H0 = h0;
            H1 = h1;
            H2 = h2;
            H3 = h3;
            H4 = h4;
            H5 = h5;
            H6 = h6;
            H7 = h7;
            TOTAL0 = total0;
            TOTAL1 = total1;
          }

          // offset — multiple of 64
          function process(offset, length) {
            offset = offset | 0;
            length = length | 0;

            var hashed = 0;

            if (offset & 63) return -1;

            while ((length | 0) >= 64) {
              _core_heap(offset);

              offset = (offset + 64) | 0;
              length = (length - 64) | 0;

              hashed = (hashed + 64) | 0;
            }

            TOTAL0 = (TOTAL0 + hashed) | 0;
            if (TOTAL0 >>> 0 < hashed >>> 0) TOTAL1 = (TOTAL1 + 1) | 0;

            return hashed | 0;
          }

          // offset — multiple of 64
          // output — multiple of 32
          function finish(offset, length, output) {
            offset = offset | 0;
            length = length | 0;
            output = output | 0;

            var hashed = 0,
              i = 0;

            if (offset & 63) return -1;

            if (~output) if (output & 31) return -1;

            if ((length | 0) >= 64) {
              hashed = process(offset, length) | 0;
              if ((hashed | 0) == -1) return -1;

              offset = (offset + hashed) | 0;
              length = (length - hashed) | 0;
            }

            hashed = (hashed + length) | 0;
            TOTAL0 = (TOTAL0 + length) | 0;
            if (TOTAL0 >>> 0 < length >>> 0) TOTAL1 = (TOTAL1 + 1) | 0;

            HEAP[offset | length] = 0x80;

            if ((length | 0) >= 56) {
              for (i = (length + 1) | 0; (i | 0) < 64; i = (i + 1) | 0)
                HEAP[offset | i] = 0x00;

              _core_heap(offset);

              length = 0;

              HEAP[offset | 0] = 0;
            }

            for (i = (length + 1) | 0; (i | 0) < 59; i = (i + 1) | 0)
              HEAP[offset | i] = 0;

            HEAP[offset | 56] = (TOTAL1 >>> 21) & 255;
            HEAP[offset | 57] = (TOTAL1 >>> 13) & 255;
            HEAP[offset | 58] = (TOTAL1 >>> 5) & 255;
            HEAP[offset | 59] = ((TOTAL1 << 3) & 255) | (TOTAL0 >>> 29);
            HEAP[offset | 60] = (TOTAL0 >>> 21) & 255;
            HEAP[offset | 61] = (TOTAL0 >>> 13) & 255;
            HEAP[offset | 62] = (TOTAL0 >>> 5) & 255;
            HEAP[offset | 63] = (TOTAL0 << 3) & 255;
            _core_heap(offset);

            if (~output) _state_to_heap(output);

            return hashed | 0;
          }

          function hmac_reset() {
            H0 = I0;
            H1 = I1;
            H2 = I2;
            H3 = I3;
            H4 = I4;
            H5 = I5;
            H6 = I6;
            H7 = I7;
            TOTAL0 = 64;
            TOTAL1 = 0;
          }

          function _hmac_opad() {
            H0 = O0;
            H1 = O1;
            H2 = O2;
            H3 = O3;
            H4 = O4;
            H5 = O5;
            H6 = O6;
            H7 = O7;
            TOTAL0 = 64;
            TOTAL1 = 0;
          }

          function hmac_init(
            p0,
            p1,
            p2,
            p3,
            p4,
            p5,
            p6,
            p7,
            p8,
            p9,
            p10,
            p11,
            p12,
            p13,
            p14,
            p15
          ) {
            p0 = p0 | 0;
            p1 = p1 | 0;
            p2 = p2 | 0;
            p3 = p3 | 0;
            p4 = p4 | 0;
            p5 = p5 | 0;
            p6 = p6 | 0;
            p7 = p7 | 0;
            p8 = p8 | 0;
            p9 = p9 | 0;
            p10 = p10 | 0;
            p11 = p11 | 0;
            p12 = p12 | 0;
            p13 = p13 | 0;
            p14 = p14 | 0;
            p15 = p15 | 0;

            // opad
            reset();
            _core(
              p0 ^ 0x5c5c5c5c,
              p1 ^ 0x5c5c5c5c,
              p2 ^ 0x5c5c5c5c,
              p3 ^ 0x5c5c5c5c,
              p4 ^ 0x5c5c5c5c,
              p5 ^ 0x5c5c5c5c,
              p6 ^ 0x5c5c5c5c,
              p7 ^ 0x5c5c5c5c,
              p8 ^ 0x5c5c5c5c,
              p9 ^ 0x5c5c5c5c,
              p10 ^ 0x5c5c5c5c,
              p11 ^ 0x5c5c5c5c,
              p12 ^ 0x5c5c5c5c,
              p13 ^ 0x5c5c5c5c,
              p14 ^ 0x5c5c5c5c,
              p15 ^ 0x5c5c5c5c
            );
            O0 = H0;
            O1 = H1;
            O2 = H2;
            O3 = H3;
            O4 = H4;
            O5 = H5;
            O6 = H6;
            O7 = H7;

            // ipad
            reset();
            _core(
              p0 ^ 0x36363636,
              p1 ^ 0x36363636,
              p2 ^ 0x36363636,
              p3 ^ 0x36363636,
              p4 ^ 0x36363636,
              p5 ^ 0x36363636,
              p6 ^ 0x36363636,
              p7 ^ 0x36363636,
              p8 ^ 0x36363636,
              p9 ^ 0x36363636,
              p10 ^ 0x36363636,
              p11 ^ 0x36363636,
              p12 ^ 0x36363636,
              p13 ^ 0x36363636,
              p14 ^ 0x36363636,
              p15 ^ 0x36363636
            );
            I0 = H0;
            I1 = H1;
            I2 = H2;
            I3 = H3;
            I4 = H4;
            I5 = H5;
            I6 = H6;
            I7 = H7;

            TOTAL0 = 64;
            TOTAL1 = 0;
          }

          // offset — multiple of 64
          // output — multiple of 32
          function hmac_finish(offset, length, output) {
            offset = offset | 0;
            length = length | 0;
            output = output | 0;

            var t0 = 0,
              t1 = 0,
              t2 = 0,
              t3 = 0,
              t4 = 0,
              t5 = 0,
              t6 = 0,
              t7 = 0,
              hashed = 0;

            if (offset & 63) return -1;

            if (~output) if (output & 31) return -1;

            hashed = finish(offset, length, -1) | 0;
            (t0 = H0),
              (t1 = H1),
              (t2 = H2),
              (t3 = H3),
              (t4 = H4),
              (t5 = H5),
              (t6 = H6),
              (t7 = H7);

            _hmac_opad();
            _core(
              t0,
              t1,
              t2,
              t3,
              t4,
              t5,
              t6,
              t7,
              0x80000000,
              0,
              0,
              0,
              0,
              0,
              0,
              768
            );

            if (~output) _state_to_heap(output);

            return hashed | 0;
          }

          // salt is assumed to be already processed
          // offset — multiple of 64
          // output — multiple of 32
          function pbkdf2_generate_block(offset, length, block, count, output) {
            offset = offset | 0;
            length = length | 0;
            block = block | 0;
            count = count | 0;
            output = output | 0;

            var h0 = 0,
              h1 = 0,
              h2 = 0,
              h3 = 0,
              h4 = 0,
              h5 = 0,
              h6 = 0,
              h7 = 0,
              t0 = 0,
              t1 = 0,
              t2 = 0,
              t3 = 0,
              t4 = 0,
              t5 = 0,
              t6 = 0,
              t7 = 0;

            if (offset & 63) return -1;

            if (~output) if (output & 31) return -1;

            // pad block number into heap
            // FIXME probable OOB write
            HEAP[(offset + length) | 0] = block >>> 24;
            HEAP[(offset + length + 1) | 0] = (block >>> 16) & 255;
            HEAP[(offset + length + 2) | 0] = (block >>> 8) & 255;
            HEAP[(offset + length + 3) | 0] = block & 255;

            // finish first iteration
            hmac_finish(offset, (length + 4) | 0, -1) | 0;
            (h0 = t0 = H0),
              (h1 = t1 = H1),
              (h2 = t2 = H2),
              (h3 = t3 = H3),
              (h4 = t4 = H4),
              (h5 = t5 = H5),
              (h6 = t6 = H6),
              (h7 = t7 = H7);
            count = (count - 1) | 0;

            // perform the rest iterations
            while ((count | 0) > 0) {
              hmac_reset();
              _core(
                t0,
                t1,
                t2,
                t3,
                t4,
                t5,
                t6,
                t7,
                0x80000000,
                0,
                0,
                0,
                0,
                0,
                0,
                768
              );
              (t0 = H0),
                (t1 = H1),
                (t2 = H2),
                (t3 = H3),
                (t4 = H4),
                (t5 = H5),
                (t6 = H6),
                (t7 = H7);

              _hmac_opad();
              _core(
                t0,
                t1,
                t2,
                t3,
                t4,
                t5,
                t6,
                t7,
                0x80000000,
                0,
                0,
                0,
                0,
                0,
                0,
                768
              );
              (t0 = H0),
                (t1 = H1),
                (t2 = H2),
                (t3 = H3),
                (t4 = H4),
                (t5 = H5),
                (t6 = H6),
                (t7 = H7);

              h0 = h0 ^ H0;
              h1 = h1 ^ H1;
              h2 = h2 ^ H2;
              h3 = h3 ^ H3;
              h4 = h4 ^ H4;
              h5 = h5 ^ H5;
              h6 = h6 ^ H6;
              h7 = h7 ^ H7;

              count = (count - 1) | 0;
            }

            H0 = h0;
            H1 = h1;
            H2 = h2;
            H3 = h3;
            H4 = h4;
            H5 = h5;
            H6 = h6;
            H7 = h7;

            if (~output) _state_to_heap(output);

            return 0;
          }

          return {
            // SHA256
            reset: reset,
            init: init,
            process: process,
            finish: finish,

            // HMAC-SHA256
            hmac_reset: hmac_reset,
            hmac_init: hmac_init,
            hmac_finish: hmac_finish,

            // PBKDF2-HMAC-SHA256
            pbkdf2_generate_block: pbkdf2_generate_block,
          };
        };

        const _sha256_block_size = 64;
        const _sha256_hash_size = 32;
        class Sha256 extends Hash {
          constructor() {
            super();
            this.NAME = "sha256";
            this.BLOCK_SIZE = _sha256_block_size;
            this.HASH_SIZE = _sha256_hash_size;
            this.heap = _heap_init();
            this.asm = sha256_asm(
              { Uint8Array: Uint8Array },
              null,
              this.heap.buffer
            );
            this.reset();
          }
        }
        Sha256.NAME = "sha256";

        var sha512_asm = function (stdlib, foreign, buffer) {
          "use asm";

          // SHA512 state
          var H0h = 0,
            H0l = 0,
            H1h = 0,
            H1l = 0,
            H2h = 0,
            H2l = 0,
            H3h = 0,
            H3l = 0,
            H4h = 0,
            H4l = 0,
            H5h = 0,
            H5l = 0,
            H6h = 0,
            H6l = 0,
            H7h = 0,
            H7l = 0,
            TOTAL0 = 0,
            TOTAL1 = 0;

          // HMAC state
          var I0h = 0,
            I0l = 0,
            I1h = 0,
            I1l = 0,
            I2h = 0,
            I2l = 0,
            I3h = 0,
            I3l = 0,
            I4h = 0,
            I4l = 0,
            I5h = 0,
            I5l = 0,
            I6h = 0,
            I6l = 0,
            I7h = 0,
            I7l = 0,
            O0h = 0,
            O0l = 0,
            O1h = 0,
            O1l = 0,
            O2h = 0,
            O2l = 0,
            O3h = 0,
            O3l = 0,
            O4h = 0,
            O4l = 0,
            O5h = 0,
            O5l = 0,
            O6h = 0,
            O6l = 0,
            O7h = 0,
            O7l = 0;

          // I/O buffer
          var HEAP = new stdlib.Uint8Array(buffer);

          function _core(
            w0h,
            w0l,
            w1h,
            w1l,
            w2h,
            w2l,
            w3h,
            w3l,
            w4h,
            w4l,
            w5h,
            w5l,
            w6h,
            w6l,
            w7h,
            w7l,
            w8h,
            w8l,
            w9h,
            w9l,
            w10h,
            w10l,
            w11h,
            w11l,
            w12h,
            w12l,
            w13h,
            w13l,
            w14h,
            w14l,
            w15h,
            w15l
          ) {
            w0h = w0h | 0;
            w0l = w0l | 0;
            w1h = w1h | 0;
            w1l = w1l | 0;
            w2h = w2h | 0;
            w2l = w2l | 0;
            w3h = w3h | 0;
            w3l = w3l | 0;
            w4h = w4h | 0;
            w4l = w4l | 0;
            w5h = w5h | 0;
            w5l = w5l | 0;
            w6h = w6h | 0;
            w6l = w6l | 0;
            w7h = w7h | 0;
            w7l = w7l | 0;
            w8h = w8h | 0;
            w8l = w8l | 0;
            w9h = w9h | 0;
            w9l = w9l | 0;
            w10h = w10h | 0;
            w10l = w10l | 0;
            w11h = w11h | 0;
            w11l = w11l | 0;
            w12h = w12h | 0;
            w12l = w12l | 0;
            w13h = w13h | 0;
            w13l = w13l | 0;
            w14h = w14h | 0;
            w14l = w14l | 0;
            w15h = w15h | 0;
            w15l = w15l | 0;

            var ah = 0,
              al = 0,
              bh = 0,
              bl = 0,
              ch = 0,
              cl = 0,
              dh = 0,
              dl = 0,
              eh = 0,
              el = 0,
              fh = 0,
              fl = 0,
              gh = 0,
              gl = 0,
              hh = 0,
              hl = 0,
              th = 0,
              tl = 0,
              xl = 0;

            ah = H0h;
            al = H0l;
            bh = H1h;
            bl = H1l;
            ch = H2h;
            cl = H2l;
            dh = H3h;
            dl = H3l;
            eh = H4h;
            el = H4l;
            fh = H5h;
            fl = H5l;
            gh = H6h;
            gl = H6l;
            hh = H7h;
            hl = H7l;

            // 0
            tl = (0xd728ae22 + w0l) | 0;
            th = (0x428a2f98 + w0h + (tl >>> 0 < w0l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 1
            tl = (0x23ef65cd + w1l) | 0;
            th = (0x71374491 + w1h + (tl >>> 0 < w1l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 2
            tl = (0xec4d3b2f + w2l) | 0;
            th = (0xb5c0fbcf + w2h + (tl >>> 0 < w2l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 3
            tl = (0x8189dbbc + w3l) | 0;
            th = (0xe9b5dba5 + w3h + (tl >>> 0 < w3l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 4
            tl = (0xf348b538 + w4l) | 0;
            th = (0x3956c25b + w4h + (tl >>> 0 < w4l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 5
            tl = (0xb605d019 + w5l) | 0;
            th = (0x59f111f1 + w5h + (tl >>> 0 < w5l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 6
            tl = (0xaf194f9b + w6l) | 0;
            th = (0x923f82a4 + w6h + (tl >>> 0 < w6l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 7
            tl = (0xda6d8118 + w7l) | 0;
            th = (0xab1c5ed5 + w7h + (tl >>> 0 < w7l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 8
            tl = (0xa3030242 + w8l) | 0;
            th = (0xd807aa98 + w8h + (tl >>> 0 < w8l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 9
            tl = (0x45706fbe + w9l) | 0;
            th = (0x12835b01 + w9h + (tl >>> 0 < w9l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 10
            tl = (0x4ee4b28c + w10l) | 0;
            th = (0x243185be + w10h + (tl >>> 0 < w10l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 11
            tl = (0xd5ffb4e2 + w11l) | 0;
            th = (0x550c7dc3 + w11h + (tl >>> 0 < w11l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 12
            tl = (0xf27b896f + w12l) | 0;
            th = (0x72be5d74 + w12h + (tl >>> 0 < w12l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 13
            tl = (0x3b1696b1 + w13l) | 0;
            th = (0x80deb1fe + w13h + (tl >>> 0 < w13l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 14
            tl = (0x25c71235 + w14l) | 0;
            th = (0x9bdc06a7 + w14h + (tl >>> 0 < w14l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 15
            tl = (0xcf692694 + w15l) | 0;
            th = (0xc19bf174 + w15h + (tl >>> 0 < w15l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 16
            w0l = (w0l + w9l) | 0;
            w0h = (w0h + w9h + (w0l >>> 0 < w9l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w1l >>> 1) | (w1h << 31)) ^
                ((w1l >>> 8) | (w1h << 24)) ^
                ((w1l >>> 7) | (w1h << 25))) |
              0;
            w0l = (w0l + xl) | 0;
            w0h =
              (w0h +
                (((w1h >>> 1) | (w1l << 31)) ^
                  ((w1h >>> 8) | (w1l << 24)) ^
                  (w1h >>> 7)) +
                (w0l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w14l >>> 19) | (w14h << 13)) ^
                ((w14l << 3) | (w14h >>> 29)) ^
                ((w14l >>> 6) | (w14h << 26))) |
              0;
            w0l = (w0l + xl) | 0;
            w0h =
              (w0h +
                (((w14h >>> 19) | (w14l << 13)) ^
                  ((w14h << 3) | (w14l >>> 29)) ^
                  (w14h >>> 6)) +
                (w0l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x9ef14ad2 + w0l) | 0;
            th = (0xe49b69c1 + w0h + (tl >>> 0 < w0l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 17
            w1l = (w1l + w10l) | 0;
            w1h = (w1h + w10h + (w1l >>> 0 < w10l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w2l >>> 1) | (w2h << 31)) ^
                ((w2l >>> 8) | (w2h << 24)) ^
                ((w2l >>> 7) | (w2h << 25))) |
              0;
            w1l = (w1l + xl) | 0;
            w1h =
              (w1h +
                (((w2h >>> 1) | (w2l << 31)) ^
                  ((w2h >>> 8) | (w2l << 24)) ^
                  (w2h >>> 7)) +
                (w1l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w15l >>> 19) | (w15h << 13)) ^
                ((w15l << 3) | (w15h >>> 29)) ^
                ((w15l >>> 6) | (w15h << 26))) |
              0;
            w1l = (w1l + xl) | 0;
            w1h =
              (w1h +
                (((w15h >>> 19) | (w15l << 13)) ^
                  ((w15h << 3) | (w15l >>> 29)) ^
                  (w15h >>> 6)) +
                (w1l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x384f25e3 + w1l) | 0;
            th = (0xefbe4786 + w1h + (tl >>> 0 < w1l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 18
            w2l = (w2l + w11l) | 0;
            w2h = (w2h + w11h + (w2l >>> 0 < w11l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w3l >>> 1) | (w3h << 31)) ^
                ((w3l >>> 8) | (w3h << 24)) ^
                ((w3l >>> 7) | (w3h << 25))) |
              0;
            w2l = (w2l + xl) | 0;
            w2h =
              (w2h +
                (((w3h >>> 1) | (w3l << 31)) ^
                  ((w3h >>> 8) | (w3l << 24)) ^
                  (w3h >>> 7)) +
                (w2l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w0l >>> 19) | (w0h << 13)) ^
                ((w0l << 3) | (w0h >>> 29)) ^
                ((w0l >>> 6) | (w0h << 26))) |
              0;
            w2l = (w2l + xl) | 0;
            w2h =
              (w2h +
                (((w0h >>> 19) | (w0l << 13)) ^
                  ((w0h << 3) | (w0l >>> 29)) ^
                  (w0h >>> 6)) +
                (w2l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x8b8cd5b5 + w2l) | 0;
            th = (0xfc19dc6 + w2h + (tl >>> 0 < w2l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 19
            w3l = (w3l + w12l) | 0;
            w3h = (w3h + w12h + (w3l >>> 0 < w12l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w4l >>> 1) | (w4h << 31)) ^
                ((w4l >>> 8) | (w4h << 24)) ^
                ((w4l >>> 7) | (w4h << 25))) |
              0;
            w3l = (w3l + xl) | 0;
            w3h =
              (w3h +
                (((w4h >>> 1) | (w4l << 31)) ^
                  ((w4h >>> 8) | (w4l << 24)) ^
                  (w4h >>> 7)) +
                (w3l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w1l >>> 19) | (w1h << 13)) ^
                ((w1l << 3) | (w1h >>> 29)) ^
                ((w1l >>> 6) | (w1h << 26))) |
              0;
            w3l = (w3l + xl) | 0;
            w3h =
              (w3h +
                (((w1h >>> 19) | (w1l << 13)) ^
                  ((w1h << 3) | (w1l >>> 29)) ^
                  (w1h >>> 6)) +
                (w3l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x77ac9c65 + w3l) | 0;
            th = (0x240ca1cc + w3h + (tl >>> 0 < w3l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 20
            w4l = (w4l + w13l) | 0;
            w4h = (w4h + w13h + (w4l >>> 0 < w13l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w5l >>> 1) | (w5h << 31)) ^
                ((w5l >>> 8) | (w5h << 24)) ^
                ((w5l >>> 7) | (w5h << 25))) |
              0;
            w4l = (w4l + xl) | 0;
            w4h =
              (w4h +
                (((w5h >>> 1) | (w5l << 31)) ^
                  ((w5h >>> 8) | (w5l << 24)) ^
                  (w5h >>> 7)) +
                (w4l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w2l >>> 19) | (w2h << 13)) ^
                ((w2l << 3) | (w2h >>> 29)) ^
                ((w2l >>> 6) | (w2h << 26))) |
              0;
            w4l = (w4l + xl) | 0;
            w4h =
              (w4h +
                (((w2h >>> 19) | (w2l << 13)) ^
                  ((w2h << 3) | (w2l >>> 29)) ^
                  (w2h >>> 6)) +
                (w4l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x592b0275 + w4l) | 0;
            th = (0x2de92c6f + w4h + (tl >>> 0 < w4l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 21
            w5l = (w5l + w14l) | 0;
            w5h = (w5h + w14h + (w5l >>> 0 < w14l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w6l >>> 1) | (w6h << 31)) ^
                ((w6l >>> 8) | (w6h << 24)) ^
                ((w6l >>> 7) | (w6h << 25))) |
              0;
            w5l = (w5l + xl) | 0;
            w5h =
              (w5h +
                (((w6h >>> 1) | (w6l << 31)) ^
                  ((w6h >>> 8) | (w6l << 24)) ^
                  (w6h >>> 7)) +
                (w5l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w3l >>> 19) | (w3h << 13)) ^
                ((w3l << 3) | (w3h >>> 29)) ^
                ((w3l >>> 6) | (w3h << 26))) |
              0;
            w5l = (w5l + xl) | 0;
            w5h =
              (w5h +
                (((w3h >>> 19) | (w3l << 13)) ^
                  ((w3h << 3) | (w3l >>> 29)) ^
                  (w3h >>> 6)) +
                (w5l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x6ea6e483 + w5l) | 0;
            th = (0x4a7484aa + w5h + (tl >>> 0 < w5l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 22
            w6l = (w6l + w15l) | 0;
            w6h = (w6h + w15h + (w6l >>> 0 < w15l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w7l >>> 1) | (w7h << 31)) ^
                ((w7l >>> 8) | (w7h << 24)) ^
                ((w7l >>> 7) | (w7h << 25))) |
              0;
            w6l = (w6l + xl) | 0;
            w6h =
              (w6h +
                (((w7h >>> 1) | (w7l << 31)) ^
                  ((w7h >>> 8) | (w7l << 24)) ^
                  (w7h >>> 7)) +
                (w6l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w4l >>> 19) | (w4h << 13)) ^
                ((w4l << 3) | (w4h >>> 29)) ^
                ((w4l >>> 6) | (w4h << 26))) |
              0;
            w6l = (w6l + xl) | 0;
            w6h =
              (w6h +
                (((w4h >>> 19) | (w4l << 13)) ^
                  ((w4h << 3) | (w4l >>> 29)) ^
                  (w4h >>> 6)) +
                (w6l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xbd41fbd4 + w6l) | 0;
            th = (0x5cb0a9dc + w6h + (tl >>> 0 < w6l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 23
            w7l = (w7l + w0l) | 0;
            w7h = (w7h + w0h + (w7l >>> 0 < w0l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w8l >>> 1) | (w8h << 31)) ^
                ((w8l >>> 8) | (w8h << 24)) ^
                ((w8l >>> 7) | (w8h << 25))) |
              0;
            w7l = (w7l + xl) | 0;
            w7h =
              (w7h +
                (((w8h >>> 1) | (w8l << 31)) ^
                  ((w8h >>> 8) | (w8l << 24)) ^
                  (w8h >>> 7)) +
                (w7l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w5l >>> 19) | (w5h << 13)) ^
                ((w5l << 3) | (w5h >>> 29)) ^
                ((w5l >>> 6) | (w5h << 26))) |
              0;
            w7l = (w7l + xl) | 0;
            w7h =
              (w7h +
                (((w5h >>> 19) | (w5l << 13)) ^
                  ((w5h << 3) | (w5l >>> 29)) ^
                  (w5h >>> 6)) +
                (w7l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x831153b5 + w7l) | 0;
            th = (0x76f988da + w7h + (tl >>> 0 < w7l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 24
            w8l = (w8l + w1l) | 0;
            w8h = (w8h + w1h + (w8l >>> 0 < w1l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w9l >>> 1) | (w9h << 31)) ^
                ((w9l >>> 8) | (w9h << 24)) ^
                ((w9l >>> 7) | (w9h << 25))) |
              0;
            w8l = (w8l + xl) | 0;
            w8h =
              (w8h +
                (((w9h >>> 1) | (w9l << 31)) ^
                  ((w9h >>> 8) | (w9l << 24)) ^
                  (w9h >>> 7)) +
                (w8l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w6l >>> 19) | (w6h << 13)) ^
                ((w6l << 3) | (w6h >>> 29)) ^
                ((w6l >>> 6) | (w6h << 26))) |
              0;
            w8l = (w8l + xl) | 0;
            w8h =
              (w8h +
                (((w6h >>> 19) | (w6l << 13)) ^
                  ((w6h << 3) | (w6l >>> 29)) ^
                  (w6h >>> 6)) +
                (w8l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xee66dfab + w8l) | 0;
            th = (0x983e5152 + w8h + (tl >>> 0 < w8l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 25
            w9l = (w9l + w2l) | 0;
            w9h = (w9h + w2h + (w9l >>> 0 < w2l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w10l >>> 1) | (w10h << 31)) ^
                ((w10l >>> 8) | (w10h << 24)) ^
                ((w10l >>> 7) | (w10h << 25))) |
              0;
            w9l = (w9l + xl) | 0;
            w9h =
              (w9h +
                (((w10h >>> 1) | (w10l << 31)) ^
                  ((w10h >>> 8) | (w10l << 24)) ^
                  (w10h >>> 7)) +
                (w9l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w7l >>> 19) | (w7h << 13)) ^
                ((w7l << 3) | (w7h >>> 29)) ^
                ((w7l >>> 6) | (w7h << 26))) |
              0;
            w9l = (w9l + xl) | 0;
            w9h =
              (w9h +
                (((w7h >>> 19) | (w7l << 13)) ^
                  ((w7h << 3) | (w7l >>> 29)) ^
                  (w7h >>> 6)) +
                (w9l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x2db43210 + w9l) | 0;
            th = (0xa831c66d + w9h + (tl >>> 0 < w9l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 26
            w10l = (w10l + w3l) | 0;
            w10h = (w10h + w3h + (w10l >>> 0 < w3l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w11l >>> 1) | (w11h << 31)) ^
                ((w11l >>> 8) | (w11h << 24)) ^
                ((w11l >>> 7) | (w11h << 25))) |
              0;
            w10l = (w10l + xl) | 0;
            w10h =
              (w10h +
                (((w11h >>> 1) | (w11l << 31)) ^
                  ((w11h >>> 8) | (w11l << 24)) ^
                  (w11h >>> 7)) +
                (w10l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w8l >>> 19) | (w8h << 13)) ^
                ((w8l << 3) | (w8h >>> 29)) ^
                ((w8l >>> 6) | (w8h << 26))) |
              0;
            w10l = (w10l + xl) | 0;
            w10h =
              (w10h +
                (((w8h >>> 19) | (w8l << 13)) ^
                  ((w8h << 3) | (w8l >>> 29)) ^
                  (w8h >>> 6)) +
                (w10l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x98fb213f + w10l) | 0;
            th = (0xb00327c8 + w10h + (tl >>> 0 < w10l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 27
            w11l = (w11l + w4l) | 0;
            w11h = (w11h + w4h + (w11l >>> 0 < w4l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w12l >>> 1) | (w12h << 31)) ^
                ((w12l >>> 8) | (w12h << 24)) ^
                ((w12l >>> 7) | (w12h << 25))) |
              0;
            w11l = (w11l + xl) | 0;
            w11h =
              (w11h +
                (((w12h >>> 1) | (w12l << 31)) ^
                  ((w12h >>> 8) | (w12l << 24)) ^
                  (w12h >>> 7)) +
                (w11l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w9l >>> 19) | (w9h << 13)) ^
                ((w9l << 3) | (w9h >>> 29)) ^
                ((w9l >>> 6) | (w9h << 26))) |
              0;
            w11l = (w11l + xl) | 0;
            w11h =
              (w11h +
                (((w9h >>> 19) | (w9l << 13)) ^
                  ((w9h << 3) | (w9l >>> 29)) ^
                  (w9h >>> 6)) +
                (w11l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xbeef0ee4 + w11l) | 0;
            th = (0xbf597fc7 + w11h + (tl >>> 0 < w11l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 28
            w12l = (w12l + w5l) | 0;
            w12h = (w12h + w5h + (w12l >>> 0 < w5l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w13l >>> 1) | (w13h << 31)) ^
                ((w13l >>> 8) | (w13h << 24)) ^
                ((w13l >>> 7) | (w13h << 25))) |
              0;
            w12l = (w12l + xl) | 0;
            w12h =
              (w12h +
                (((w13h >>> 1) | (w13l << 31)) ^
                  ((w13h >>> 8) | (w13l << 24)) ^
                  (w13h >>> 7)) +
                (w12l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w10l >>> 19) | (w10h << 13)) ^
                ((w10l << 3) | (w10h >>> 29)) ^
                ((w10l >>> 6) | (w10h << 26))) |
              0;
            w12l = (w12l + xl) | 0;
            w12h =
              (w12h +
                (((w10h >>> 19) | (w10l << 13)) ^
                  ((w10h << 3) | (w10l >>> 29)) ^
                  (w10h >>> 6)) +
                (w12l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x3da88fc2 + w12l) | 0;
            th = (0xc6e00bf3 + w12h + (tl >>> 0 < w12l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 29
            w13l = (w13l + w6l) | 0;
            w13h = (w13h + w6h + (w13l >>> 0 < w6l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w14l >>> 1) | (w14h << 31)) ^
                ((w14l >>> 8) | (w14h << 24)) ^
                ((w14l >>> 7) | (w14h << 25))) |
              0;
            w13l = (w13l + xl) | 0;
            w13h =
              (w13h +
                (((w14h >>> 1) | (w14l << 31)) ^
                  ((w14h >>> 8) | (w14l << 24)) ^
                  (w14h >>> 7)) +
                (w13l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w11l >>> 19) | (w11h << 13)) ^
                ((w11l << 3) | (w11h >>> 29)) ^
                ((w11l >>> 6) | (w11h << 26))) |
              0;
            w13l = (w13l + xl) | 0;
            w13h =
              (w13h +
                (((w11h >>> 19) | (w11l << 13)) ^
                  ((w11h << 3) | (w11l >>> 29)) ^
                  (w11h >>> 6)) +
                (w13l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x930aa725 + w13l) | 0;
            th = (0xd5a79147 + w13h + (tl >>> 0 < w13l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 30
            w14l = (w14l + w7l) | 0;
            w14h = (w14h + w7h + (w14l >>> 0 < w7l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w15l >>> 1) | (w15h << 31)) ^
                ((w15l >>> 8) | (w15h << 24)) ^
                ((w15l >>> 7) | (w15h << 25))) |
              0;
            w14l = (w14l + xl) | 0;
            w14h =
              (w14h +
                (((w15h >>> 1) | (w15l << 31)) ^
                  ((w15h >>> 8) | (w15l << 24)) ^
                  (w15h >>> 7)) +
                (w14l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w12l >>> 19) | (w12h << 13)) ^
                ((w12l << 3) | (w12h >>> 29)) ^
                ((w12l >>> 6) | (w12h << 26))) |
              0;
            w14l = (w14l + xl) | 0;
            w14h =
              (w14h +
                (((w12h >>> 19) | (w12l << 13)) ^
                  ((w12h << 3) | (w12l >>> 29)) ^
                  (w12h >>> 6)) +
                (w14l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xe003826f + w14l) | 0;
            th = (0x6ca6351 + w14h + (tl >>> 0 < w14l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 31
            w15l = (w15l + w8l) | 0;
            w15h = (w15h + w8h + (w15l >>> 0 < w8l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w0l >>> 1) | (w0h << 31)) ^
                ((w0l >>> 8) | (w0h << 24)) ^
                ((w0l >>> 7) | (w0h << 25))) |
              0;
            w15l = (w15l + xl) | 0;
            w15h =
              (w15h +
                (((w0h >>> 1) | (w0l << 31)) ^
                  ((w0h >>> 8) | (w0l << 24)) ^
                  (w0h >>> 7)) +
                (w15l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w13l >>> 19) | (w13h << 13)) ^
                ((w13l << 3) | (w13h >>> 29)) ^
                ((w13l >>> 6) | (w13h << 26))) |
              0;
            w15l = (w15l + xl) | 0;
            w15h =
              (w15h +
                (((w13h >>> 19) | (w13l << 13)) ^
                  ((w13h << 3) | (w13l >>> 29)) ^
                  (w13h >>> 6)) +
                (w15l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xa0e6e70 + w15l) | 0;
            th = (0x14292967 + w15h + (tl >>> 0 < w15l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 32
            w0l = (w0l + w9l) | 0;
            w0h = (w0h + w9h + (w0l >>> 0 < w9l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w1l >>> 1) | (w1h << 31)) ^
                ((w1l >>> 8) | (w1h << 24)) ^
                ((w1l >>> 7) | (w1h << 25))) |
              0;
            w0l = (w0l + xl) | 0;
            w0h =
              (w0h +
                (((w1h >>> 1) | (w1l << 31)) ^
                  ((w1h >>> 8) | (w1l << 24)) ^
                  (w1h >>> 7)) +
                (w0l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w14l >>> 19) | (w14h << 13)) ^
                ((w14l << 3) | (w14h >>> 29)) ^
                ((w14l >>> 6) | (w14h << 26))) |
              0;
            w0l = (w0l + xl) | 0;
            w0h =
              (w0h +
                (((w14h >>> 19) | (w14l << 13)) ^
                  ((w14h << 3) | (w14l >>> 29)) ^
                  (w14h >>> 6)) +
                (w0l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x46d22ffc + w0l) | 0;
            th = (0x27b70a85 + w0h + (tl >>> 0 < w0l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 33
            w1l = (w1l + w10l) | 0;
            w1h = (w1h + w10h + (w1l >>> 0 < w10l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w2l >>> 1) | (w2h << 31)) ^
                ((w2l >>> 8) | (w2h << 24)) ^
                ((w2l >>> 7) | (w2h << 25))) |
              0;
            w1l = (w1l + xl) | 0;
            w1h =
              (w1h +
                (((w2h >>> 1) | (w2l << 31)) ^
                  ((w2h >>> 8) | (w2l << 24)) ^
                  (w2h >>> 7)) +
                (w1l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w15l >>> 19) | (w15h << 13)) ^
                ((w15l << 3) | (w15h >>> 29)) ^
                ((w15l >>> 6) | (w15h << 26))) |
              0;
            w1l = (w1l + xl) | 0;
            w1h =
              (w1h +
                (((w15h >>> 19) | (w15l << 13)) ^
                  ((w15h << 3) | (w15l >>> 29)) ^
                  (w15h >>> 6)) +
                (w1l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x5c26c926 + w1l) | 0;
            th = (0x2e1b2138 + w1h + (tl >>> 0 < w1l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 34
            w2l = (w2l + w11l) | 0;
            w2h = (w2h + w11h + (w2l >>> 0 < w11l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w3l >>> 1) | (w3h << 31)) ^
                ((w3l >>> 8) | (w3h << 24)) ^
                ((w3l >>> 7) | (w3h << 25))) |
              0;
            w2l = (w2l + xl) | 0;
            w2h =
              (w2h +
                (((w3h >>> 1) | (w3l << 31)) ^
                  ((w3h >>> 8) | (w3l << 24)) ^
                  (w3h >>> 7)) +
                (w2l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w0l >>> 19) | (w0h << 13)) ^
                ((w0l << 3) | (w0h >>> 29)) ^
                ((w0l >>> 6) | (w0h << 26))) |
              0;
            w2l = (w2l + xl) | 0;
            w2h =
              (w2h +
                (((w0h >>> 19) | (w0l << 13)) ^
                  ((w0h << 3) | (w0l >>> 29)) ^
                  (w0h >>> 6)) +
                (w2l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x5ac42aed + w2l) | 0;
            th = (0x4d2c6dfc + w2h + (tl >>> 0 < w2l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 35
            w3l = (w3l + w12l) | 0;
            w3h = (w3h + w12h + (w3l >>> 0 < w12l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w4l >>> 1) | (w4h << 31)) ^
                ((w4l >>> 8) | (w4h << 24)) ^
                ((w4l >>> 7) | (w4h << 25))) |
              0;
            w3l = (w3l + xl) | 0;
            w3h =
              (w3h +
                (((w4h >>> 1) | (w4l << 31)) ^
                  ((w4h >>> 8) | (w4l << 24)) ^
                  (w4h >>> 7)) +
                (w3l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w1l >>> 19) | (w1h << 13)) ^
                ((w1l << 3) | (w1h >>> 29)) ^
                ((w1l >>> 6) | (w1h << 26))) |
              0;
            w3l = (w3l + xl) | 0;
            w3h =
              (w3h +
                (((w1h >>> 19) | (w1l << 13)) ^
                  ((w1h << 3) | (w1l >>> 29)) ^
                  (w1h >>> 6)) +
                (w3l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x9d95b3df + w3l) | 0;
            th = (0x53380d13 + w3h + (tl >>> 0 < w3l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 36
            w4l = (w4l + w13l) | 0;
            w4h = (w4h + w13h + (w4l >>> 0 < w13l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w5l >>> 1) | (w5h << 31)) ^
                ((w5l >>> 8) | (w5h << 24)) ^
                ((w5l >>> 7) | (w5h << 25))) |
              0;
            w4l = (w4l + xl) | 0;
            w4h =
              (w4h +
                (((w5h >>> 1) | (w5l << 31)) ^
                  ((w5h >>> 8) | (w5l << 24)) ^
                  (w5h >>> 7)) +
                (w4l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w2l >>> 19) | (w2h << 13)) ^
                ((w2l << 3) | (w2h >>> 29)) ^
                ((w2l >>> 6) | (w2h << 26))) |
              0;
            w4l = (w4l + xl) | 0;
            w4h =
              (w4h +
                (((w2h >>> 19) | (w2l << 13)) ^
                  ((w2h << 3) | (w2l >>> 29)) ^
                  (w2h >>> 6)) +
                (w4l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x8baf63de + w4l) | 0;
            th = (0x650a7354 + w4h + (tl >>> 0 < w4l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 37
            w5l = (w5l + w14l) | 0;
            w5h = (w5h + w14h + (w5l >>> 0 < w14l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w6l >>> 1) | (w6h << 31)) ^
                ((w6l >>> 8) | (w6h << 24)) ^
                ((w6l >>> 7) | (w6h << 25))) |
              0;
            w5l = (w5l + xl) | 0;
            w5h =
              (w5h +
                (((w6h >>> 1) | (w6l << 31)) ^
                  ((w6h >>> 8) | (w6l << 24)) ^
                  (w6h >>> 7)) +
                (w5l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w3l >>> 19) | (w3h << 13)) ^
                ((w3l << 3) | (w3h >>> 29)) ^
                ((w3l >>> 6) | (w3h << 26))) |
              0;
            w5l = (w5l + xl) | 0;
            w5h =
              (w5h +
                (((w3h >>> 19) | (w3l << 13)) ^
                  ((w3h << 3) | (w3l >>> 29)) ^
                  (w3h >>> 6)) +
                (w5l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x3c77b2a8 + w5l) | 0;
            th = (0x766a0abb + w5h + (tl >>> 0 < w5l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 38
            w6l = (w6l + w15l) | 0;
            w6h = (w6h + w15h + (w6l >>> 0 < w15l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w7l >>> 1) | (w7h << 31)) ^
                ((w7l >>> 8) | (w7h << 24)) ^
                ((w7l >>> 7) | (w7h << 25))) |
              0;
            w6l = (w6l + xl) | 0;
            w6h =
              (w6h +
                (((w7h >>> 1) | (w7l << 31)) ^
                  ((w7h >>> 8) | (w7l << 24)) ^
                  (w7h >>> 7)) +
                (w6l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w4l >>> 19) | (w4h << 13)) ^
                ((w4l << 3) | (w4h >>> 29)) ^
                ((w4l >>> 6) | (w4h << 26))) |
              0;
            w6l = (w6l + xl) | 0;
            w6h =
              (w6h +
                (((w4h >>> 19) | (w4l << 13)) ^
                  ((w4h << 3) | (w4l >>> 29)) ^
                  (w4h >>> 6)) +
                (w6l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x47edaee6 + w6l) | 0;
            th = (0x81c2c92e + w6h + (tl >>> 0 < w6l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 39
            w7l = (w7l + w0l) | 0;
            w7h = (w7h + w0h + (w7l >>> 0 < w0l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w8l >>> 1) | (w8h << 31)) ^
                ((w8l >>> 8) | (w8h << 24)) ^
                ((w8l >>> 7) | (w8h << 25))) |
              0;
            w7l = (w7l + xl) | 0;
            w7h =
              (w7h +
                (((w8h >>> 1) | (w8l << 31)) ^
                  ((w8h >>> 8) | (w8l << 24)) ^
                  (w8h >>> 7)) +
                (w7l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w5l >>> 19) | (w5h << 13)) ^
                ((w5l << 3) | (w5h >>> 29)) ^
                ((w5l >>> 6) | (w5h << 26))) |
              0;
            w7l = (w7l + xl) | 0;
            w7h =
              (w7h +
                (((w5h >>> 19) | (w5l << 13)) ^
                  ((w5h << 3) | (w5l >>> 29)) ^
                  (w5h >>> 6)) +
                (w7l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x1482353b + w7l) | 0;
            th = (0x92722c85 + w7h + (tl >>> 0 < w7l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 40
            w8l = (w8l + w1l) | 0;
            w8h = (w8h + w1h + (w8l >>> 0 < w1l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w9l >>> 1) | (w9h << 31)) ^
                ((w9l >>> 8) | (w9h << 24)) ^
                ((w9l >>> 7) | (w9h << 25))) |
              0;
            w8l = (w8l + xl) | 0;
            w8h =
              (w8h +
                (((w9h >>> 1) | (w9l << 31)) ^
                  ((w9h >>> 8) | (w9l << 24)) ^
                  (w9h >>> 7)) +
                (w8l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w6l >>> 19) | (w6h << 13)) ^
                ((w6l << 3) | (w6h >>> 29)) ^
                ((w6l >>> 6) | (w6h << 26))) |
              0;
            w8l = (w8l + xl) | 0;
            w8h =
              (w8h +
                (((w6h >>> 19) | (w6l << 13)) ^
                  ((w6h << 3) | (w6l >>> 29)) ^
                  (w6h >>> 6)) +
                (w8l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x4cf10364 + w8l) | 0;
            th = (0xa2bfe8a1 + w8h + (tl >>> 0 < w8l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 41
            w9l = (w9l + w2l) | 0;
            w9h = (w9h + w2h + (w9l >>> 0 < w2l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w10l >>> 1) | (w10h << 31)) ^
                ((w10l >>> 8) | (w10h << 24)) ^
                ((w10l >>> 7) | (w10h << 25))) |
              0;
            w9l = (w9l + xl) | 0;
            w9h =
              (w9h +
                (((w10h >>> 1) | (w10l << 31)) ^
                  ((w10h >>> 8) | (w10l << 24)) ^
                  (w10h >>> 7)) +
                (w9l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w7l >>> 19) | (w7h << 13)) ^
                ((w7l << 3) | (w7h >>> 29)) ^
                ((w7l >>> 6) | (w7h << 26))) |
              0;
            w9l = (w9l + xl) | 0;
            w9h =
              (w9h +
                (((w7h >>> 19) | (w7l << 13)) ^
                  ((w7h << 3) | (w7l >>> 29)) ^
                  (w7h >>> 6)) +
                (w9l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xbc423001 + w9l) | 0;
            th = (0xa81a664b + w9h + (tl >>> 0 < w9l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 42
            w10l = (w10l + w3l) | 0;
            w10h = (w10h + w3h + (w10l >>> 0 < w3l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w11l >>> 1) | (w11h << 31)) ^
                ((w11l >>> 8) | (w11h << 24)) ^
                ((w11l >>> 7) | (w11h << 25))) |
              0;
            w10l = (w10l + xl) | 0;
            w10h =
              (w10h +
                (((w11h >>> 1) | (w11l << 31)) ^
                  ((w11h >>> 8) | (w11l << 24)) ^
                  (w11h >>> 7)) +
                (w10l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w8l >>> 19) | (w8h << 13)) ^
                ((w8l << 3) | (w8h >>> 29)) ^
                ((w8l >>> 6) | (w8h << 26))) |
              0;
            w10l = (w10l + xl) | 0;
            w10h =
              (w10h +
                (((w8h >>> 19) | (w8l << 13)) ^
                  ((w8h << 3) | (w8l >>> 29)) ^
                  (w8h >>> 6)) +
                (w10l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xd0f89791 + w10l) | 0;
            th = (0xc24b8b70 + w10h + (tl >>> 0 < w10l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 43
            w11l = (w11l + w4l) | 0;
            w11h = (w11h + w4h + (w11l >>> 0 < w4l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w12l >>> 1) | (w12h << 31)) ^
                ((w12l >>> 8) | (w12h << 24)) ^
                ((w12l >>> 7) | (w12h << 25))) |
              0;
            w11l = (w11l + xl) | 0;
            w11h =
              (w11h +
                (((w12h >>> 1) | (w12l << 31)) ^
                  ((w12h >>> 8) | (w12l << 24)) ^
                  (w12h >>> 7)) +
                (w11l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w9l >>> 19) | (w9h << 13)) ^
                ((w9l << 3) | (w9h >>> 29)) ^
                ((w9l >>> 6) | (w9h << 26))) |
              0;
            w11l = (w11l + xl) | 0;
            w11h =
              (w11h +
                (((w9h >>> 19) | (w9l << 13)) ^
                  ((w9h << 3) | (w9l >>> 29)) ^
                  (w9h >>> 6)) +
                (w11l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x654be30 + w11l) | 0;
            th = (0xc76c51a3 + w11h + (tl >>> 0 < w11l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 44
            w12l = (w12l + w5l) | 0;
            w12h = (w12h + w5h + (w12l >>> 0 < w5l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w13l >>> 1) | (w13h << 31)) ^
                ((w13l >>> 8) | (w13h << 24)) ^
                ((w13l >>> 7) | (w13h << 25))) |
              0;
            w12l = (w12l + xl) | 0;
            w12h =
              (w12h +
                (((w13h >>> 1) | (w13l << 31)) ^
                  ((w13h >>> 8) | (w13l << 24)) ^
                  (w13h >>> 7)) +
                (w12l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w10l >>> 19) | (w10h << 13)) ^
                ((w10l << 3) | (w10h >>> 29)) ^
                ((w10l >>> 6) | (w10h << 26))) |
              0;
            w12l = (w12l + xl) | 0;
            w12h =
              (w12h +
                (((w10h >>> 19) | (w10l << 13)) ^
                  ((w10h << 3) | (w10l >>> 29)) ^
                  (w10h >>> 6)) +
                (w12l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xd6ef5218 + w12l) | 0;
            th = (0xd192e819 + w12h + (tl >>> 0 < w12l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 45
            w13l = (w13l + w6l) | 0;
            w13h = (w13h + w6h + (w13l >>> 0 < w6l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w14l >>> 1) | (w14h << 31)) ^
                ((w14l >>> 8) | (w14h << 24)) ^
                ((w14l >>> 7) | (w14h << 25))) |
              0;
            w13l = (w13l + xl) | 0;
            w13h =
              (w13h +
                (((w14h >>> 1) | (w14l << 31)) ^
                  ((w14h >>> 8) | (w14l << 24)) ^
                  (w14h >>> 7)) +
                (w13l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w11l >>> 19) | (w11h << 13)) ^
                ((w11l << 3) | (w11h >>> 29)) ^
                ((w11l >>> 6) | (w11h << 26))) |
              0;
            w13l = (w13l + xl) | 0;
            w13h =
              (w13h +
                (((w11h >>> 19) | (w11l << 13)) ^
                  ((w11h << 3) | (w11l >>> 29)) ^
                  (w11h >>> 6)) +
                (w13l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x5565a910 + w13l) | 0;
            th = (0xd6990624 + w13h + (tl >>> 0 < w13l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 46
            w14l = (w14l + w7l) | 0;
            w14h = (w14h + w7h + (w14l >>> 0 < w7l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w15l >>> 1) | (w15h << 31)) ^
                ((w15l >>> 8) | (w15h << 24)) ^
                ((w15l >>> 7) | (w15h << 25))) |
              0;
            w14l = (w14l + xl) | 0;
            w14h =
              (w14h +
                (((w15h >>> 1) | (w15l << 31)) ^
                  ((w15h >>> 8) | (w15l << 24)) ^
                  (w15h >>> 7)) +
                (w14l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w12l >>> 19) | (w12h << 13)) ^
                ((w12l << 3) | (w12h >>> 29)) ^
                ((w12l >>> 6) | (w12h << 26))) |
              0;
            w14l = (w14l + xl) | 0;
            w14h =
              (w14h +
                (((w12h >>> 19) | (w12l << 13)) ^
                  ((w12h << 3) | (w12l >>> 29)) ^
                  (w12h >>> 6)) +
                (w14l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x5771202a + w14l) | 0;
            th = (0xf40e3585 + w14h + (tl >>> 0 < w14l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 47
            w15l = (w15l + w8l) | 0;
            w15h = (w15h + w8h + (w15l >>> 0 < w8l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w0l >>> 1) | (w0h << 31)) ^
                ((w0l >>> 8) | (w0h << 24)) ^
                ((w0l >>> 7) | (w0h << 25))) |
              0;
            w15l = (w15l + xl) | 0;
            w15h =
              (w15h +
                (((w0h >>> 1) | (w0l << 31)) ^
                  ((w0h >>> 8) | (w0l << 24)) ^
                  (w0h >>> 7)) +
                (w15l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w13l >>> 19) | (w13h << 13)) ^
                ((w13l << 3) | (w13h >>> 29)) ^
                ((w13l >>> 6) | (w13h << 26))) |
              0;
            w15l = (w15l + xl) | 0;
            w15h =
              (w15h +
                (((w13h >>> 19) | (w13l << 13)) ^
                  ((w13h << 3) | (w13l >>> 29)) ^
                  (w13h >>> 6)) +
                (w15l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x32bbd1b8 + w15l) | 0;
            th = (0x106aa070 + w15h + (tl >>> 0 < w15l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 48
            w0l = (w0l + w9l) | 0;
            w0h = (w0h + w9h + (w0l >>> 0 < w9l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w1l >>> 1) | (w1h << 31)) ^
                ((w1l >>> 8) | (w1h << 24)) ^
                ((w1l >>> 7) | (w1h << 25))) |
              0;
            w0l = (w0l + xl) | 0;
            w0h =
              (w0h +
                (((w1h >>> 1) | (w1l << 31)) ^
                  ((w1h >>> 8) | (w1l << 24)) ^
                  (w1h >>> 7)) +
                (w0l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w14l >>> 19) | (w14h << 13)) ^
                ((w14l << 3) | (w14h >>> 29)) ^
                ((w14l >>> 6) | (w14h << 26))) |
              0;
            w0l = (w0l + xl) | 0;
            w0h =
              (w0h +
                (((w14h >>> 19) | (w14l << 13)) ^
                  ((w14h << 3) | (w14l >>> 29)) ^
                  (w14h >>> 6)) +
                (w0l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xb8d2d0c8 + w0l) | 0;
            th = (0x19a4c116 + w0h + (tl >>> 0 < w0l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 49
            w1l = (w1l + w10l) | 0;
            w1h = (w1h + w10h + (w1l >>> 0 < w10l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w2l >>> 1) | (w2h << 31)) ^
                ((w2l >>> 8) | (w2h << 24)) ^
                ((w2l >>> 7) | (w2h << 25))) |
              0;
            w1l = (w1l + xl) | 0;
            w1h =
              (w1h +
                (((w2h >>> 1) | (w2l << 31)) ^
                  ((w2h >>> 8) | (w2l << 24)) ^
                  (w2h >>> 7)) +
                (w1l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w15l >>> 19) | (w15h << 13)) ^
                ((w15l << 3) | (w15h >>> 29)) ^
                ((w15l >>> 6) | (w15h << 26))) |
              0;
            w1l = (w1l + xl) | 0;
            w1h =
              (w1h +
                (((w15h >>> 19) | (w15l << 13)) ^
                  ((w15h << 3) | (w15l >>> 29)) ^
                  (w15h >>> 6)) +
                (w1l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x5141ab53 + w1l) | 0;
            th = (0x1e376c08 + w1h + (tl >>> 0 < w1l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 50
            w2l = (w2l + w11l) | 0;
            w2h = (w2h + w11h + (w2l >>> 0 < w11l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w3l >>> 1) | (w3h << 31)) ^
                ((w3l >>> 8) | (w3h << 24)) ^
                ((w3l >>> 7) | (w3h << 25))) |
              0;
            w2l = (w2l + xl) | 0;
            w2h =
              (w2h +
                (((w3h >>> 1) | (w3l << 31)) ^
                  ((w3h >>> 8) | (w3l << 24)) ^
                  (w3h >>> 7)) +
                (w2l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w0l >>> 19) | (w0h << 13)) ^
                ((w0l << 3) | (w0h >>> 29)) ^
                ((w0l >>> 6) | (w0h << 26))) |
              0;
            w2l = (w2l + xl) | 0;
            w2h =
              (w2h +
                (((w0h >>> 19) | (w0l << 13)) ^
                  ((w0h << 3) | (w0l >>> 29)) ^
                  (w0h >>> 6)) +
                (w2l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xdf8eeb99 + w2l) | 0;
            th = (0x2748774c + w2h + (tl >>> 0 < w2l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 51
            w3l = (w3l + w12l) | 0;
            w3h = (w3h + w12h + (w3l >>> 0 < w12l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w4l >>> 1) | (w4h << 31)) ^
                ((w4l >>> 8) | (w4h << 24)) ^
                ((w4l >>> 7) | (w4h << 25))) |
              0;
            w3l = (w3l + xl) | 0;
            w3h =
              (w3h +
                (((w4h >>> 1) | (w4l << 31)) ^
                  ((w4h >>> 8) | (w4l << 24)) ^
                  (w4h >>> 7)) +
                (w3l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w1l >>> 19) | (w1h << 13)) ^
                ((w1l << 3) | (w1h >>> 29)) ^
                ((w1l >>> 6) | (w1h << 26))) |
              0;
            w3l = (w3l + xl) | 0;
            w3h =
              (w3h +
                (((w1h >>> 19) | (w1l << 13)) ^
                  ((w1h << 3) | (w1l >>> 29)) ^
                  (w1h >>> 6)) +
                (w3l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xe19b48a8 + w3l) | 0;
            th = (0x34b0bcb5 + w3h + (tl >>> 0 < w3l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 52
            w4l = (w4l + w13l) | 0;
            w4h = (w4h + w13h + (w4l >>> 0 < w13l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w5l >>> 1) | (w5h << 31)) ^
                ((w5l >>> 8) | (w5h << 24)) ^
                ((w5l >>> 7) | (w5h << 25))) |
              0;
            w4l = (w4l + xl) | 0;
            w4h =
              (w4h +
                (((w5h >>> 1) | (w5l << 31)) ^
                  ((w5h >>> 8) | (w5l << 24)) ^
                  (w5h >>> 7)) +
                (w4l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w2l >>> 19) | (w2h << 13)) ^
                ((w2l << 3) | (w2h >>> 29)) ^
                ((w2l >>> 6) | (w2h << 26))) |
              0;
            w4l = (w4l + xl) | 0;
            w4h =
              (w4h +
                (((w2h >>> 19) | (w2l << 13)) ^
                  ((w2h << 3) | (w2l >>> 29)) ^
                  (w2h >>> 6)) +
                (w4l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xc5c95a63 + w4l) | 0;
            th = (0x391c0cb3 + w4h + (tl >>> 0 < w4l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 53
            w5l = (w5l + w14l) | 0;
            w5h = (w5h + w14h + (w5l >>> 0 < w14l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w6l >>> 1) | (w6h << 31)) ^
                ((w6l >>> 8) | (w6h << 24)) ^
                ((w6l >>> 7) | (w6h << 25))) |
              0;
            w5l = (w5l + xl) | 0;
            w5h =
              (w5h +
                (((w6h >>> 1) | (w6l << 31)) ^
                  ((w6h >>> 8) | (w6l << 24)) ^
                  (w6h >>> 7)) +
                (w5l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w3l >>> 19) | (w3h << 13)) ^
                ((w3l << 3) | (w3h >>> 29)) ^
                ((w3l >>> 6) | (w3h << 26))) |
              0;
            w5l = (w5l + xl) | 0;
            w5h =
              (w5h +
                (((w3h >>> 19) | (w3l << 13)) ^
                  ((w3h << 3) | (w3l >>> 29)) ^
                  (w3h >>> 6)) +
                (w5l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xe3418acb + w5l) | 0;
            th = (0x4ed8aa4a + w5h + (tl >>> 0 < w5l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 54
            w6l = (w6l + w15l) | 0;
            w6h = (w6h + w15h + (w6l >>> 0 < w15l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w7l >>> 1) | (w7h << 31)) ^
                ((w7l >>> 8) | (w7h << 24)) ^
                ((w7l >>> 7) | (w7h << 25))) |
              0;
            w6l = (w6l + xl) | 0;
            w6h =
              (w6h +
                (((w7h >>> 1) | (w7l << 31)) ^
                  ((w7h >>> 8) | (w7l << 24)) ^
                  (w7h >>> 7)) +
                (w6l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w4l >>> 19) | (w4h << 13)) ^
                ((w4l << 3) | (w4h >>> 29)) ^
                ((w4l >>> 6) | (w4h << 26))) |
              0;
            w6l = (w6l + xl) | 0;
            w6h =
              (w6h +
                (((w4h >>> 19) | (w4l << 13)) ^
                  ((w4h << 3) | (w4l >>> 29)) ^
                  (w4h >>> 6)) +
                (w6l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x7763e373 + w6l) | 0;
            th = (0x5b9cca4f + w6h + (tl >>> 0 < w6l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 55
            w7l = (w7l + w0l) | 0;
            w7h = (w7h + w0h + (w7l >>> 0 < w0l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w8l >>> 1) | (w8h << 31)) ^
                ((w8l >>> 8) | (w8h << 24)) ^
                ((w8l >>> 7) | (w8h << 25))) |
              0;
            w7l = (w7l + xl) | 0;
            w7h =
              (w7h +
                (((w8h >>> 1) | (w8l << 31)) ^
                  ((w8h >>> 8) | (w8l << 24)) ^
                  (w8h >>> 7)) +
                (w7l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w5l >>> 19) | (w5h << 13)) ^
                ((w5l << 3) | (w5h >>> 29)) ^
                ((w5l >>> 6) | (w5h << 26))) |
              0;
            w7l = (w7l + xl) | 0;
            w7h =
              (w7h +
                (((w5h >>> 19) | (w5l << 13)) ^
                  ((w5h << 3) | (w5l >>> 29)) ^
                  (w5h >>> 6)) +
                (w7l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xd6b2b8a3 + w7l) | 0;
            th = (0x682e6ff3 + w7h + (tl >>> 0 < w7l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 56
            w8l = (w8l + w1l) | 0;
            w8h = (w8h + w1h + (w8l >>> 0 < w1l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w9l >>> 1) | (w9h << 31)) ^
                ((w9l >>> 8) | (w9h << 24)) ^
                ((w9l >>> 7) | (w9h << 25))) |
              0;
            w8l = (w8l + xl) | 0;
            w8h =
              (w8h +
                (((w9h >>> 1) | (w9l << 31)) ^
                  ((w9h >>> 8) | (w9l << 24)) ^
                  (w9h >>> 7)) +
                (w8l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w6l >>> 19) | (w6h << 13)) ^
                ((w6l << 3) | (w6h >>> 29)) ^
                ((w6l >>> 6) | (w6h << 26))) |
              0;
            w8l = (w8l + xl) | 0;
            w8h =
              (w8h +
                (((w6h >>> 19) | (w6l << 13)) ^
                  ((w6h << 3) | (w6l >>> 29)) ^
                  (w6h >>> 6)) +
                (w8l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x5defb2fc + w8l) | 0;
            th = (0x748f82ee + w8h + (tl >>> 0 < w8l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 57
            w9l = (w9l + w2l) | 0;
            w9h = (w9h + w2h + (w9l >>> 0 < w2l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w10l >>> 1) | (w10h << 31)) ^
                ((w10l >>> 8) | (w10h << 24)) ^
                ((w10l >>> 7) | (w10h << 25))) |
              0;
            w9l = (w9l + xl) | 0;
            w9h =
              (w9h +
                (((w10h >>> 1) | (w10l << 31)) ^
                  ((w10h >>> 8) | (w10l << 24)) ^
                  (w10h >>> 7)) +
                (w9l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w7l >>> 19) | (w7h << 13)) ^
                ((w7l << 3) | (w7h >>> 29)) ^
                ((w7l >>> 6) | (w7h << 26))) |
              0;
            w9l = (w9l + xl) | 0;
            w9h =
              (w9h +
                (((w7h >>> 19) | (w7l << 13)) ^
                  ((w7h << 3) | (w7l >>> 29)) ^
                  (w7h >>> 6)) +
                (w9l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x43172f60 + w9l) | 0;
            th = (0x78a5636f + w9h + (tl >>> 0 < w9l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 58
            w10l = (w10l + w3l) | 0;
            w10h = (w10h + w3h + (w10l >>> 0 < w3l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w11l >>> 1) | (w11h << 31)) ^
                ((w11l >>> 8) | (w11h << 24)) ^
                ((w11l >>> 7) | (w11h << 25))) |
              0;
            w10l = (w10l + xl) | 0;
            w10h =
              (w10h +
                (((w11h >>> 1) | (w11l << 31)) ^
                  ((w11h >>> 8) | (w11l << 24)) ^
                  (w11h >>> 7)) +
                (w10l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w8l >>> 19) | (w8h << 13)) ^
                ((w8l << 3) | (w8h >>> 29)) ^
                ((w8l >>> 6) | (w8h << 26))) |
              0;
            w10l = (w10l + xl) | 0;
            w10h =
              (w10h +
                (((w8h >>> 19) | (w8l << 13)) ^
                  ((w8h << 3) | (w8l >>> 29)) ^
                  (w8h >>> 6)) +
                (w10l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xa1f0ab72 + w10l) | 0;
            th = (0x84c87814 + w10h + (tl >>> 0 < w10l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 59
            w11l = (w11l + w4l) | 0;
            w11h = (w11h + w4h + (w11l >>> 0 < w4l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w12l >>> 1) | (w12h << 31)) ^
                ((w12l >>> 8) | (w12h << 24)) ^
                ((w12l >>> 7) | (w12h << 25))) |
              0;
            w11l = (w11l + xl) | 0;
            w11h =
              (w11h +
                (((w12h >>> 1) | (w12l << 31)) ^
                  ((w12h >>> 8) | (w12l << 24)) ^
                  (w12h >>> 7)) +
                (w11l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w9l >>> 19) | (w9h << 13)) ^
                ((w9l << 3) | (w9h >>> 29)) ^
                ((w9l >>> 6) | (w9h << 26))) |
              0;
            w11l = (w11l + xl) | 0;
            w11h =
              (w11h +
                (((w9h >>> 19) | (w9l << 13)) ^
                  ((w9h << 3) | (w9l >>> 29)) ^
                  (w9h >>> 6)) +
                (w11l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x1a6439ec + w11l) | 0;
            th = (0x8cc70208 + w11h + (tl >>> 0 < w11l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 60
            w12l = (w12l + w5l) | 0;
            w12h = (w12h + w5h + (w12l >>> 0 < w5l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w13l >>> 1) | (w13h << 31)) ^
                ((w13l >>> 8) | (w13h << 24)) ^
                ((w13l >>> 7) | (w13h << 25))) |
              0;
            w12l = (w12l + xl) | 0;
            w12h =
              (w12h +
                (((w13h >>> 1) | (w13l << 31)) ^
                  ((w13h >>> 8) | (w13l << 24)) ^
                  (w13h >>> 7)) +
                (w12l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w10l >>> 19) | (w10h << 13)) ^
                ((w10l << 3) | (w10h >>> 29)) ^
                ((w10l >>> 6) | (w10h << 26))) |
              0;
            w12l = (w12l + xl) | 0;
            w12h =
              (w12h +
                (((w10h >>> 19) | (w10l << 13)) ^
                  ((w10h << 3) | (w10l >>> 29)) ^
                  (w10h >>> 6)) +
                (w12l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x23631e28 + w12l) | 0;
            th = (0x90befffa + w12h + (tl >>> 0 < w12l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 61
            w13l = (w13l + w6l) | 0;
            w13h = (w13h + w6h + (w13l >>> 0 < w6l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w14l >>> 1) | (w14h << 31)) ^
                ((w14l >>> 8) | (w14h << 24)) ^
                ((w14l >>> 7) | (w14h << 25))) |
              0;
            w13l = (w13l + xl) | 0;
            w13h =
              (w13h +
                (((w14h >>> 1) | (w14l << 31)) ^
                  ((w14h >>> 8) | (w14l << 24)) ^
                  (w14h >>> 7)) +
                (w13l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w11l >>> 19) | (w11h << 13)) ^
                ((w11l << 3) | (w11h >>> 29)) ^
                ((w11l >>> 6) | (w11h << 26))) |
              0;
            w13l = (w13l + xl) | 0;
            w13h =
              (w13h +
                (((w11h >>> 19) | (w11l << 13)) ^
                  ((w11h << 3) | (w11l >>> 29)) ^
                  (w11h >>> 6)) +
                (w13l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xde82bde9 + w13l) | 0;
            th = (0xa4506ceb + w13h + (tl >>> 0 < w13l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 62
            w14l = (w14l + w7l) | 0;
            w14h = (w14h + w7h + (w14l >>> 0 < w7l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w15l >>> 1) | (w15h << 31)) ^
                ((w15l >>> 8) | (w15h << 24)) ^
                ((w15l >>> 7) | (w15h << 25))) |
              0;
            w14l = (w14l + xl) | 0;
            w14h =
              (w14h +
                (((w15h >>> 1) | (w15l << 31)) ^
                  ((w15h >>> 8) | (w15l << 24)) ^
                  (w15h >>> 7)) +
                (w14l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w12l >>> 19) | (w12h << 13)) ^
                ((w12l << 3) | (w12h >>> 29)) ^
                ((w12l >>> 6) | (w12h << 26))) |
              0;
            w14l = (w14l + xl) | 0;
            w14h =
              (w14h +
                (((w12h >>> 19) | (w12l << 13)) ^
                  ((w12h << 3) | (w12l >>> 29)) ^
                  (w12h >>> 6)) +
                (w14l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xb2c67915 + w14l) | 0;
            th = (0xbef9a3f7 + w14h + (tl >>> 0 < w14l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 63
            w15l = (w15l + w8l) | 0;
            w15h = (w15h + w8h + (w15l >>> 0 < w8l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w0l >>> 1) | (w0h << 31)) ^
                ((w0l >>> 8) | (w0h << 24)) ^
                ((w0l >>> 7) | (w0h << 25))) |
              0;
            w15l = (w15l + xl) | 0;
            w15h =
              (w15h +
                (((w0h >>> 1) | (w0l << 31)) ^
                  ((w0h >>> 8) | (w0l << 24)) ^
                  (w0h >>> 7)) +
                (w15l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w13l >>> 19) | (w13h << 13)) ^
                ((w13l << 3) | (w13h >>> 29)) ^
                ((w13l >>> 6) | (w13h << 26))) |
              0;
            w15l = (w15l + xl) | 0;
            w15h =
              (w15h +
                (((w13h >>> 19) | (w13l << 13)) ^
                  ((w13h << 3) | (w13l >>> 29)) ^
                  (w13h >>> 6)) +
                (w15l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xe372532b + w15l) | 0;
            th = (0xc67178f2 + w15h + (tl >>> 0 < w15l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 64
            w0l = (w0l + w9l) | 0;
            w0h = (w0h + w9h + (w0l >>> 0 < w9l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w1l >>> 1) | (w1h << 31)) ^
                ((w1l >>> 8) | (w1h << 24)) ^
                ((w1l >>> 7) | (w1h << 25))) |
              0;
            w0l = (w0l + xl) | 0;
            w0h =
              (w0h +
                (((w1h >>> 1) | (w1l << 31)) ^
                  ((w1h >>> 8) | (w1l << 24)) ^
                  (w1h >>> 7)) +
                (w0l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w14l >>> 19) | (w14h << 13)) ^
                ((w14l << 3) | (w14h >>> 29)) ^
                ((w14l >>> 6) | (w14h << 26))) |
              0;
            w0l = (w0l + xl) | 0;
            w0h =
              (w0h +
                (((w14h >>> 19) | (w14l << 13)) ^
                  ((w14h << 3) | (w14l >>> 29)) ^
                  (w14h >>> 6)) +
                (w0l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xea26619c + w0l) | 0;
            th = (0xca273ece + w0h + (tl >>> 0 < w0l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 65
            w1l = (w1l + w10l) | 0;
            w1h = (w1h + w10h + (w1l >>> 0 < w10l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w2l >>> 1) | (w2h << 31)) ^
                ((w2l >>> 8) | (w2h << 24)) ^
                ((w2l >>> 7) | (w2h << 25))) |
              0;
            w1l = (w1l + xl) | 0;
            w1h =
              (w1h +
                (((w2h >>> 1) | (w2l << 31)) ^
                  ((w2h >>> 8) | (w2l << 24)) ^
                  (w2h >>> 7)) +
                (w1l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w15l >>> 19) | (w15h << 13)) ^
                ((w15l << 3) | (w15h >>> 29)) ^
                ((w15l >>> 6) | (w15h << 26))) |
              0;
            w1l = (w1l + xl) | 0;
            w1h =
              (w1h +
                (((w15h >>> 19) | (w15l << 13)) ^
                  ((w15h << 3) | (w15l >>> 29)) ^
                  (w15h >>> 6)) +
                (w1l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x21c0c207 + w1l) | 0;
            th = (0xd186b8c7 + w1h + (tl >>> 0 < w1l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 66
            w2l = (w2l + w11l) | 0;
            w2h = (w2h + w11h + (w2l >>> 0 < w11l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w3l >>> 1) | (w3h << 31)) ^
                ((w3l >>> 8) | (w3h << 24)) ^
                ((w3l >>> 7) | (w3h << 25))) |
              0;
            w2l = (w2l + xl) | 0;
            w2h =
              (w2h +
                (((w3h >>> 1) | (w3l << 31)) ^
                  ((w3h >>> 8) | (w3l << 24)) ^
                  (w3h >>> 7)) +
                (w2l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w0l >>> 19) | (w0h << 13)) ^
                ((w0l << 3) | (w0h >>> 29)) ^
                ((w0l >>> 6) | (w0h << 26))) |
              0;
            w2l = (w2l + xl) | 0;
            w2h =
              (w2h +
                (((w0h >>> 19) | (w0l << 13)) ^
                  ((w0h << 3) | (w0l >>> 29)) ^
                  (w0h >>> 6)) +
                (w2l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xcde0eb1e + w2l) | 0;
            th = (0xeada7dd6 + w2h + (tl >>> 0 < w2l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 67
            w3l = (w3l + w12l) | 0;
            w3h = (w3h + w12h + (w3l >>> 0 < w12l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w4l >>> 1) | (w4h << 31)) ^
                ((w4l >>> 8) | (w4h << 24)) ^
                ((w4l >>> 7) | (w4h << 25))) |
              0;
            w3l = (w3l + xl) | 0;
            w3h =
              (w3h +
                (((w4h >>> 1) | (w4l << 31)) ^
                  ((w4h >>> 8) | (w4l << 24)) ^
                  (w4h >>> 7)) +
                (w3l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w1l >>> 19) | (w1h << 13)) ^
                ((w1l << 3) | (w1h >>> 29)) ^
                ((w1l >>> 6) | (w1h << 26))) |
              0;
            w3l = (w3l + xl) | 0;
            w3h =
              (w3h +
                (((w1h >>> 19) | (w1l << 13)) ^
                  ((w1h << 3) | (w1l >>> 29)) ^
                  (w1h >>> 6)) +
                (w3l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xee6ed178 + w3l) | 0;
            th = (0xf57d4f7f + w3h + (tl >>> 0 < w3l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 68
            w4l = (w4l + w13l) | 0;
            w4h = (w4h + w13h + (w4l >>> 0 < w13l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w5l >>> 1) | (w5h << 31)) ^
                ((w5l >>> 8) | (w5h << 24)) ^
                ((w5l >>> 7) | (w5h << 25))) |
              0;
            w4l = (w4l + xl) | 0;
            w4h =
              (w4h +
                (((w5h >>> 1) | (w5l << 31)) ^
                  ((w5h >>> 8) | (w5l << 24)) ^
                  (w5h >>> 7)) +
                (w4l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w2l >>> 19) | (w2h << 13)) ^
                ((w2l << 3) | (w2h >>> 29)) ^
                ((w2l >>> 6) | (w2h << 26))) |
              0;
            w4l = (w4l + xl) | 0;
            w4h =
              (w4h +
                (((w2h >>> 19) | (w2l << 13)) ^
                  ((w2h << 3) | (w2l >>> 29)) ^
                  (w2h >>> 6)) +
                (w4l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x72176fba + w4l) | 0;
            th = (0x6f067aa + w4h + (tl >>> 0 < w4l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 69
            w5l = (w5l + w14l) | 0;
            w5h = (w5h + w14h + (w5l >>> 0 < w14l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w6l >>> 1) | (w6h << 31)) ^
                ((w6l >>> 8) | (w6h << 24)) ^
                ((w6l >>> 7) | (w6h << 25))) |
              0;
            w5l = (w5l + xl) | 0;
            w5h =
              (w5h +
                (((w6h >>> 1) | (w6l << 31)) ^
                  ((w6h >>> 8) | (w6l << 24)) ^
                  (w6h >>> 7)) +
                (w5l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w3l >>> 19) | (w3h << 13)) ^
                ((w3l << 3) | (w3h >>> 29)) ^
                ((w3l >>> 6) | (w3h << 26))) |
              0;
            w5l = (w5l + xl) | 0;
            w5h =
              (w5h +
                (((w3h >>> 19) | (w3l << 13)) ^
                  ((w3h << 3) | (w3l >>> 29)) ^
                  (w3h >>> 6)) +
                (w5l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xa2c898a6 + w5l) | 0;
            th = (0xa637dc5 + w5h + (tl >>> 0 < w5l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 70
            w6l = (w6l + w15l) | 0;
            w6h = (w6h + w15h + (w6l >>> 0 < w15l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w7l >>> 1) | (w7h << 31)) ^
                ((w7l >>> 8) | (w7h << 24)) ^
                ((w7l >>> 7) | (w7h << 25))) |
              0;
            w6l = (w6l + xl) | 0;
            w6h =
              (w6h +
                (((w7h >>> 1) | (w7l << 31)) ^
                  ((w7h >>> 8) | (w7l << 24)) ^
                  (w7h >>> 7)) +
                (w6l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w4l >>> 19) | (w4h << 13)) ^
                ((w4l << 3) | (w4h >>> 29)) ^
                ((w4l >>> 6) | (w4h << 26))) |
              0;
            w6l = (w6l + xl) | 0;
            w6h =
              (w6h +
                (((w4h >>> 19) | (w4l << 13)) ^
                  ((w4h << 3) | (w4l >>> 29)) ^
                  (w4h >>> 6)) +
                (w6l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xbef90dae + w6l) | 0;
            th = (0x113f9804 + w6h + (tl >>> 0 < w6l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 71
            w7l = (w7l + w0l) | 0;
            w7h = (w7h + w0h + (w7l >>> 0 < w0l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w8l >>> 1) | (w8h << 31)) ^
                ((w8l >>> 8) | (w8h << 24)) ^
                ((w8l >>> 7) | (w8h << 25))) |
              0;
            w7l = (w7l + xl) | 0;
            w7h =
              (w7h +
                (((w8h >>> 1) | (w8l << 31)) ^
                  ((w8h >>> 8) | (w8l << 24)) ^
                  (w8h >>> 7)) +
                (w7l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w5l >>> 19) | (w5h << 13)) ^
                ((w5l << 3) | (w5h >>> 29)) ^
                ((w5l >>> 6) | (w5h << 26))) |
              0;
            w7l = (w7l + xl) | 0;
            w7h =
              (w7h +
                (((w5h >>> 19) | (w5l << 13)) ^
                  ((w5h << 3) | (w5l >>> 29)) ^
                  (w5h >>> 6)) +
                (w7l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x131c471b + w7l) | 0;
            th = (0x1b710b35 + w7h + (tl >>> 0 < w7l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 72
            w8l = (w8l + w1l) | 0;
            w8h = (w8h + w1h + (w8l >>> 0 < w1l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w9l >>> 1) | (w9h << 31)) ^
                ((w9l >>> 8) | (w9h << 24)) ^
                ((w9l >>> 7) | (w9h << 25))) |
              0;
            w8l = (w8l + xl) | 0;
            w8h =
              (w8h +
                (((w9h >>> 1) | (w9l << 31)) ^
                  ((w9h >>> 8) | (w9l << 24)) ^
                  (w9h >>> 7)) +
                (w8l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w6l >>> 19) | (w6h << 13)) ^
                ((w6l << 3) | (w6h >>> 29)) ^
                ((w6l >>> 6) | (w6h << 26))) |
              0;
            w8l = (w8l + xl) | 0;
            w8h =
              (w8h +
                (((w6h >>> 19) | (w6l << 13)) ^
                  ((w6h << 3) | (w6l >>> 29)) ^
                  (w6h >>> 6)) +
                (w8l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x23047d84 + w8l) | 0;
            th = (0x28db77f5 + w8h + (tl >>> 0 < w8l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 73
            w9l = (w9l + w2l) | 0;
            w9h = (w9h + w2h + (w9l >>> 0 < w2l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w10l >>> 1) | (w10h << 31)) ^
                ((w10l >>> 8) | (w10h << 24)) ^
                ((w10l >>> 7) | (w10h << 25))) |
              0;
            w9l = (w9l + xl) | 0;
            w9h =
              (w9h +
                (((w10h >>> 1) | (w10l << 31)) ^
                  ((w10h >>> 8) | (w10l << 24)) ^
                  (w10h >>> 7)) +
                (w9l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w7l >>> 19) | (w7h << 13)) ^
                ((w7l << 3) | (w7h >>> 29)) ^
                ((w7l >>> 6) | (w7h << 26))) |
              0;
            w9l = (w9l + xl) | 0;
            w9h =
              (w9h +
                (((w7h >>> 19) | (w7l << 13)) ^
                  ((w7h << 3) | (w7l >>> 29)) ^
                  (w7h >>> 6)) +
                (w9l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x40c72493 + w9l) | 0;
            th = (0x32caab7b + w9h + (tl >>> 0 < w9l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 74
            w10l = (w10l + w3l) | 0;
            w10h = (w10h + w3h + (w10l >>> 0 < w3l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w11l >>> 1) | (w11h << 31)) ^
                ((w11l >>> 8) | (w11h << 24)) ^
                ((w11l >>> 7) | (w11h << 25))) |
              0;
            w10l = (w10l + xl) | 0;
            w10h =
              (w10h +
                (((w11h >>> 1) | (w11l << 31)) ^
                  ((w11h >>> 8) | (w11l << 24)) ^
                  (w11h >>> 7)) +
                (w10l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w8l >>> 19) | (w8h << 13)) ^
                ((w8l << 3) | (w8h >>> 29)) ^
                ((w8l >>> 6) | (w8h << 26))) |
              0;
            w10l = (w10l + xl) | 0;
            w10h =
              (w10h +
                (((w8h >>> 19) | (w8l << 13)) ^
                  ((w8h << 3) | (w8l >>> 29)) ^
                  (w8h >>> 6)) +
                (w10l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x15c9bebc + w10l) | 0;
            th = (0x3c9ebe0a + w10h + (tl >>> 0 < w10l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 75
            w11l = (w11l + w4l) | 0;
            w11h = (w11h + w4h + (w11l >>> 0 < w4l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w12l >>> 1) | (w12h << 31)) ^
                ((w12l >>> 8) | (w12h << 24)) ^
                ((w12l >>> 7) | (w12h << 25))) |
              0;
            w11l = (w11l + xl) | 0;
            w11h =
              (w11h +
                (((w12h >>> 1) | (w12l << 31)) ^
                  ((w12h >>> 8) | (w12l << 24)) ^
                  (w12h >>> 7)) +
                (w11l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w9l >>> 19) | (w9h << 13)) ^
                ((w9l << 3) | (w9h >>> 29)) ^
                ((w9l >>> 6) | (w9h << 26))) |
              0;
            w11l = (w11l + xl) | 0;
            w11h =
              (w11h +
                (((w9h >>> 19) | (w9l << 13)) ^
                  ((w9h << 3) | (w9l >>> 29)) ^
                  (w9h >>> 6)) +
                (w11l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x9c100d4c + w11l) | 0;
            th = (0x431d67c4 + w11h + (tl >>> 0 < w11l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 76
            w12l = (w12l + w5l) | 0;
            w12h = (w12h + w5h + (w12l >>> 0 < w5l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w13l >>> 1) | (w13h << 31)) ^
                ((w13l >>> 8) | (w13h << 24)) ^
                ((w13l >>> 7) | (w13h << 25))) |
              0;
            w12l = (w12l + xl) | 0;
            w12h =
              (w12h +
                (((w13h >>> 1) | (w13l << 31)) ^
                  ((w13h >>> 8) | (w13l << 24)) ^
                  (w13h >>> 7)) +
                (w12l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w10l >>> 19) | (w10h << 13)) ^
                ((w10l << 3) | (w10h >>> 29)) ^
                ((w10l >>> 6) | (w10h << 26))) |
              0;
            w12l = (w12l + xl) | 0;
            w12h =
              (w12h +
                (((w10h >>> 19) | (w10l << 13)) ^
                  ((w10h << 3) | (w10l >>> 29)) ^
                  (w10h >>> 6)) +
                (w12l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xcb3e42b6 + w12l) | 0;
            th = (0x4cc5d4be + w12h + (tl >>> 0 < w12l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 77
            w13l = (w13l + w6l) | 0;
            w13h = (w13h + w6h + (w13l >>> 0 < w6l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w14l >>> 1) | (w14h << 31)) ^
                ((w14l >>> 8) | (w14h << 24)) ^
                ((w14l >>> 7) | (w14h << 25))) |
              0;
            w13l = (w13l + xl) | 0;
            w13h =
              (w13h +
                (((w14h >>> 1) | (w14l << 31)) ^
                  ((w14h >>> 8) | (w14l << 24)) ^
                  (w14h >>> 7)) +
                (w13l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w11l >>> 19) | (w11h << 13)) ^
                ((w11l << 3) | (w11h >>> 29)) ^
                ((w11l >>> 6) | (w11h << 26))) |
              0;
            w13l = (w13l + xl) | 0;
            w13h =
              (w13h +
                (((w11h >>> 19) | (w11l << 13)) ^
                  ((w11h << 3) | (w11l >>> 29)) ^
                  (w11h >>> 6)) +
                (w13l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0xfc657e2a + w13l) | 0;
            th = (0x597f299c + w13h + (tl >>> 0 < w13l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 78
            w14l = (w14l + w7l) | 0;
            w14h = (w14h + w7h + (w14l >>> 0 < w7l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w15l >>> 1) | (w15h << 31)) ^
                ((w15l >>> 8) | (w15h << 24)) ^
                ((w15l >>> 7) | (w15h << 25))) |
              0;
            w14l = (w14l + xl) | 0;
            w14h =
              (w14h +
                (((w15h >>> 1) | (w15l << 31)) ^
                  ((w15h >>> 8) | (w15l << 24)) ^
                  (w15h >>> 7)) +
                (w14l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w12l >>> 19) | (w12h << 13)) ^
                ((w12l << 3) | (w12h >>> 29)) ^
                ((w12l >>> 6) | (w12h << 26))) |
              0;
            w14l = (w14l + xl) | 0;
            w14h =
              (w14h +
                (((w12h >>> 19) | (w12l << 13)) ^
                  ((w12h << 3) | (w12l >>> 29)) ^
                  (w12h >>> 6)) +
                (w14l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x3ad6faec + w14l) | 0;
            th = (0x5fcb6fab + w14h + (tl >>> 0 < w14l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            // 79
            w15l = (w15l + w8l) | 0;
            w15h = (w15h + w8h + (w15l >>> 0 < w8l >>> 0 ? 1 : 0)) | 0;
            xl =
              (((w0l >>> 1) | (w0h << 31)) ^
                ((w0l >>> 8) | (w0h << 24)) ^
                ((w0l >>> 7) | (w0h << 25))) |
              0;
            w15l = (w15l + xl) | 0;
            w15h =
              (w15h +
                (((w0h >>> 1) | (w0l << 31)) ^
                  ((w0h >>> 8) | (w0l << 24)) ^
                  (w0h >>> 7)) +
                (w15l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((w13l >>> 19) | (w13h << 13)) ^
                ((w13l << 3) | (w13h >>> 29)) ^
                ((w13l >>> 6) | (w13h << 26))) |
              0;
            w15l = (w15l + xl) | 0;
            w15h =
              (w15h +
                (((w13h >>> 19) | (w13l << 13)) ^
                  ((w13h << 3) | (w13l >>> 29)) ^
                  (w13h >>> 6)) +
                (w15l >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            tl = (0x4a475817 + w15l) | 0;
            th = (0x6c44198c + w15h + (tl >>> 0 < w15l >>> 0 ? 1 : 0)) | 0;
            tl = (tl + hl) | 0;
            th = (th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
            xl =
              (((el >>> 14) | (eh << 18)) ^
                ((el >>> 18) | (eh << 14)) ^
                ((el << 23) | (eh >>> 9))) |
              0;
            tl = (tl + xl) | 0;
            th =
              (th +
                (((eh >>> 14) | (el << 18)) ^
                  ((eh >>> 18) | (el << 14)) ^
                  ((eh << 23) | (el >>> 9))) +
                (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            xl = (gl ^ (el & (fl ^ gl))) | 0;
            tl = (tl + xl) | 0;
            th =
              (th + (gh ^ (eh & (fh ^ gh))) + (tl >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;
            hl = gl;
            hh = gh;
            gl = fl;
            gh = fh;
            fl = el;
            fh = eh;
            el = (dl + tl) | 0;
            eh = (dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            dl = cl;
            dh = ch;
            cl = bl;
            ch = bh;
            bl = al;
            bh = ah;
            al = (tl + ((bl & cl) ^ (dl & (bl ^ cl)))) | 0;
            ah =
              (th +
                ((bh & ch) ^ (dh & (bh ^ ch))) +
                (al >>> 0 < tl >>> 0 ? 1 : 0)) |
              0;
            xl =
              (((bl >>> 28) | (bh << 4)) ^
                ((bl << 30) | (bh >>> 2)) ^
                ((bl << 25) | (bh >>> 7))) |
              0;
            al = (al + xl) | 0;
            ah =
              (ah +
                (((bh >>> 28) | (bl << 4)) ^
                  ((bh << 30) | (bl >>> 2)) ^
                  ((bh << 25) | (bl >>> 7))) +
                (al >>> 0 < xl >>> 0 ? 1 : 0)) |
              0;

            H0l = (H0l + al) | 0;
            H0h = (H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0)) | 0;
            H1l = (H1l + bl) | 0;
            H1h = (H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0)) | 0;
            H2l = (H2l + cl) | 0;
            H2h = (H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0)) | 0;
            H3l = (H3l + dl) | 0;
            H3h = (H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0)) | 0;
            H4l = (H4l + el) | 0;
            H4h = (H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0)) | 0;
            H5l = (H5l + fl) | 0;
            H5h = (H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0)) | 0;
            H6l = (H6l + gl) | 0;
            H6h = (H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0)) | 0;
            H7l = (H7l + hl) | 0;
            H7h = (H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0)) | 0;
          }

          function _core_heap(offset) {
            offset = offset | 0;

            _core(
              (HEAP[offset | 0] << 24) |
                (HEAP[offset | 1] << 16) |
                (HEAP[offset | 2] << 8) |
                HEAP[offset | 3],
              (HEAP[offset | 4] << 24) |
                (HEAP[offset | 5] << 16) |
                (HEAP[offset | 6] << 8) |
                HEAP[offset | 7],
              (HEAP[offset | 8] << 24) |
                (HEAP[offset | 9] << 16) |
                (HEAP[offset | 10] << 8) |
                HEAP[offset | 11],
              (HEAP[offset | 12] << 24) |
                (HEAP[offset | 13] << 16) |
                (HEAP[offset | 14] << 8) |
                HEAP[offset | 15],
              (HEAP[offset | 16] << 24) |
                (HEAP[offset | 17] << 16) |
                (HEAP[offset | 18] << 8) |
                HEAP[offset | 19],
              (HEAP[offset | 20] << 24) |
                (HEAP[offset | 21] << 16) |
                (HEAP[offset | 22] << 8) |
                HEAP[offset | 23],
              (HEAP[offset | 24] << 24) |
                (HEAP[offset | 25] << 16) |
                (HEAP[offset | 26] << 8) |
                HEAP[offset | 27],
              (HEAP[offset | 28] << 24) |
                (HEAP[offset | 29] << 16) |
                (HEAP[offset | 30] << 8) |
                HEAP[offset | 31],
              (HEAP[offset | 32] << 24) |
                (HEAP[offset | 33] << 16) |
                (HEAP[offset | 34] << 8) |
                HEAP[offset | 35],
              (HEAP[offset | 36] << 24) |
                (HEAP[offset | 37] << 16) |
                (HEAP[offset | 38] << 8) |
                HEAP[offset | 39],
              (HEAP[offset | 40] << 24) |
                (HEAP[offset | 41] << 16) |
                (HEAP[offset | 42] << 8) |
                HEAP[offset | 43],
              (HEAP[offset | 44] << 24) |
                (HEAP[offset | 45] << 16) |
                (HEAP[offset | 46] << 8) |
                HEAP[offset | 47],
              (HEAP[offset | 48] << 24) |
                (HEAP[offset | 49] << 16) |
                (HEAP[offset | 50] << 8) |
                HEAP[offset | 51],
              (HEAP[offset | 52] << 24) |
                (HEAP[offset | 53] << 16) |
                (HEAP[offset | 54] << 8) |
                HEAP[offset | 55],
              (HEAP[offset | 56] << 24) |
                (HEAP[offset | 57] << 16) |
                (HEAP[offset | 58] << 8) |
                HEAP[offset | 59],
              (HEAP[offset | 60] << 24) |
                (HEAP[offset | 61] << 16) |
                (HEAP[offset | 62] << 8) |
                HEAP[offset | 63],
              (HEAP[offset | 64] << 24) |
                (HEAP[offset | 65] << 16) |
                (HEAP[offset | 66] << 8) |
                HEAP[offset | 67],
              (HEAP[offset | 68] << 24) |
                (HEAP[offset | 69] << 16) |
                (HEAP[offset | 70] << 8) |
                HEAP[offset | 71],
              (HEAP[offset | 72] << 24) |
                (HEAP[offset | 73] << 16) |
                (HEAP[offset | 74] << 8) |
                HEAP[offset | 75],
              (HEAP[offset | 76] << 24) |
                (HEAP[offset | 77] << 16) |
                (HEAP[offset | 78] << 8) |
                HEAP[offset | 79],
              (HEAP[offset | 80] << 24) |
                (HEAP[offset | 81] << 16) |
                (HEAP[offset | 82] << 8) |
                HEAP[offset | 83],
              (HEAP[offset | 84] << 24) |
                (HEAP[offset | 85] << 16) |
                (HEAP[offset | 86] << 8) |
                HEAP[offset | 87],
              (HEAP[offset | 88] << 24) |
                (HEAP[offset | 89] << 16) |
                (HEAP[offset | 90] << 8) |
                HEAP[offset | 91],
              (HEAP[offset | 92] << 24) |
                (HEAP[offset | 93] << 16) |
                (HEAP[offset | 94] << 8) |
                HEAP[offset | 95],
              (HEAP[offset | 96] << 24) |
                (HEAP[offset | 97] << 16) |
                (HEAP[offset | 98] << 8) |
                HEAP[offset | 99],
              (HEAP[offset | 100] << 24) |
                (HEAP[offset | 101] << 16) |
                (HEAP[offset | 102] << 8) |
                HEAP[offset | 103],
              (HEAP[offset | 104] << 24) |
                (HEAP[offset | 105] << 16) |
                (HEAP[offset | 106] << 8) |
                HEAP[offset | 107],
              (HEAP[offset | 108] << 24) |
                (HEAP[offset | 109] << 16) |
                (HEAP[offset | 110] << 8) |
                HEAP[offset | 111],
              (HEAP[offset | 112] << 24) |
                (HEAP[offset | 113] << 16) |
                (HEAP[offset | 114] << 8) |
                HEAP[offset | 115],
              (HEAP[offset | 116] << 24) |
                (HEAP[offset | 117] << 16) |
                (HEAP[offset | 118] << 8) |
                HEAP[offset | 119],
              (HEAP[offset | 120] << 24) |
                (HEAP[offset | 121] << 16) |
                (HEAP[offset | 122] << 8) |
                HEAP[offset | 123],
              (HEAP[offset | 124] << 24) |
                (HEAP[offset | 125] << 16) |
                (HEAP[offset | 126] << 8) |
                HEAP[offset | 127]
            );
          }

          // offset — multiple of 32
          function _state_to_heap(output) {
            output = output | 0;

            HEAP[output | 0] = H0h >>> 24;
            HEAP[output | 1] = (H0h >>> 16) & 255;
            HEAP[output | 2] = (H0h >>> 8) & 255;
            HEAP[output | 3] = H0h & 255;
            HEAP[output | 4] = H0l >>> 24;
            HEAP[output | 5] = (H0l >>> 16) & 255;
            HEAP[output | 6] = (H0l >>> 8) & 255;
            HEAP[output | 7] = H0l & 255;
            HEAP[output | 8] = H1h >>> 24;
            HEAP[output | 9] = (H1h >>> 16) & 255;
            HEAP[output | 10] = (H1h >>> 8) & 255;
            HEAP[output | 11] = H1h & 255;
            HEAP[output | 12] = H1l >>> 24;
            HEAP[output | 13] = (H1l >>> 16) & 255;
            HEAP[output | 14] = (H1l >>> 8) & 255;
            HEAP[output | 15] = H1l & 255;
            HEAP[output | 16] = H2h >>> 24;
            HEAP[output | 17] = (H2h >>> 16) & 255;
            HEAP[output | 18] = (H2h >>> 8) & 255;
            HEAP[output | 19] = H2h & 255;
            HEAP[output | 20] = H2l >>> 24;
            HEAP[output | 21] = (H2l >>> 16) & 255;
            HEAP[output | 22] = (H2l >>> 8) & 255;
            HEAP[output | 23] = H2l & 255;
            HEAP[output | 24] = H3h >>> 24;
            HEAP[output | 25] = (H3h >>> 16) & 255;
            HEAP[output | 26] = (H3h >>> 8) & 255;
            HEAP[output | 27] = H3h & 255;
            HEAP[output | 28] = H3l >>> 24;
            HEAP[output | 29] = (H3l >>> 16) & 255;
            HEAP[output | 30] = (H3l >>> 8) & 255;
            HEAP[output | 31] = H3l & 255;
            HEAP[output | 32] = H4h >>> 24;
            HEAP[output | 33] = (H4h >>> 16) & 255;
            HEAP[output | 34] = (H4h >>> 8) & 255;
            HEAP[output | 35] = H4h & 255;
            HEAP[output | 36] = H4l >>> 24;
            HEAP[output | 37] = (H4l >>> 16) & 255;
            HEAP[output | 38] = (H4l >>> 8) & 255;
            HEAP[output | 39] = H4l & 255;
            HEAP[output | 40] = H5h >>> 24;
            HEAP[output | 41] = (H5h >>> 16) & 255;
            HEAP[output | 42] = (H5h >>> 8) & 255;
            HEAP[output | 43] = H5h & 255;
            HEAP[output | 44] = H5l >>> 24;
            HEAP[output | 45] = (H5l >>> 16) & 255;
            HEAP[output | 46] = (H5l >>> 8) & 255;
            HEAP[output | 47] = H5l & 255;
            HEAP[output | 48] = H6h >>> 24;
            HEAP[output | 49] = (H6h >>> 16) & 255;
            HEAP[output | 50] = (H6h >>> 8) & 255;
            HEAP[output | 51] = H6h & 255;
            HEAP[output | 52] = H6l >>> 24;
            HEAP[output | 53] = (H6l >>> 16) & 255;
            HEAP[output | 54] = (H6l >>> 8) & 255;
            HEAP[output | 55] = H6l & 255;
            HEAP[output | 56] = H7h >>> 24;
            HEAP[output | 57] = (H7h >>> 16) & 255;
            HEAP[output | 58] = (H7h >>> 8) & 255;
            HEAP[output | 59] = H7h & 255;
            HEAP[output | 60] = H7l >>> 24;
            HEAP[output | 61] = (H7l >>> 16) & 255;
            HEAP[output | 62] = (H7l >>> 8) & 255;
            HEAP[output | 63] = H7l & 255;
          }

          function reset() {
            H0h = 0x6a09e667;
            H0l = 0xf3bcc908;
            H1h = 0xbb67ae85;
            H1l = 0x84caa73b;
            H2h = 0x3c6ef372;
            H2l = 0xfe94f82b;
            H3h = 0xa54ff53a;
            H3l = 0x5f1d36f1;
            H4h = 0x510e527f;
            H4l = 0xade682d1;
            H5h = 0x9b05688c;
            H5l = 0x2b3e6c1f;
            H6h = 0x1f83d9ab;
            H6l = 0xfb41bd6b;
            H7h = 0x5be0cd19;
            H7l = 0x137e2179;

            TOTAL0 = TOTAL1 = 0;
          }

          function init(
            h0h,
            h0l,
            h1h,
            h1l,
            h2h,
            h2l,
            h3h,
            h3l,
            h4h,
            h4l,
            h5h,
            h5l,
            h6h,
            h6l,
            h7h,
            h7l,
            total0,
            total1
          ) {
            h0h = h0h | 0;
            h0l = h0l | 0;
            h1h = h1h | 0;
            h1l = h1l | 0;
            h2h = h2h | 0;
            h2l = h2l | 0;
            h3h = h3h | 0;
            h3l = h3l | 0;
            h4h = h4h | 0;
            h4l = h4l | 0;
            h5h = h5h | 0;
            h5l = h5l | 0;
            h6h = h6h | 0;
            h6l = h6l | 0;
            h7h = h7h | 0;
            h7l = h7l | 0;
            total0 = total0 | 0;
            total1 = total1 | 0;

            H0h = h0h;
            H0l = h0l;
            H1h = h1h;
            H1l = h1l;
            H2h = h2h;
            H2l = h2l;
            H3h = h3h;
            H3l = h3l;
            H4h = h4h;
            H4l = h4l;
            H5h = h5h;
            H5l = h5l;
            H6h = h6h;
            H6l = h6l;
            H7h = h7h;
            H7l = h7l;
            TOTAL0 = total0;
            TOTAL1 = total1;
          }

          // offset — multiple of 128
          function process(offset, length) {
            offset = offset | 0;
            length = length | 0;

            var hashed = 0;

            if (offset & 127) return -1;

            while ((length | 0) >= 128) {
              _core_heap(offset);

              offset = (offset + 128) | 0;
              length = (length - 128) | 0;

              hashed = (hashed + 128) | 0;
            }

            TOTAL0 = (TOTAL0 + hashed) | 0;
            if (TOTAL0 >>> 0 < hashed >>> 0) TOTAL1 = (TOTAL1 + 1) | 0;

            return hashed | 0;
          }

          // offset — multiple of 128
          // output — multiple of 64
          function finish(offset, length, output) {
            offset = offset | 0;
            length = length | 0;
            output = output | 0;

            var hashed = 0,
              i = 0;

            if (offset & 127) return -1;

            if (~output) if (output & 63) return -1;

            if ((length | 0) >= 128) {
              hashed = process(offset, length) | 0;
              if ((hashed | 0) == -1) return -1;

              offset = (offset + hashed) | 0;
              length = (length - hashed) | 0;
            }

            hashed = (hashed + length) | 0;
            TOTAL0 = (TOTAL0 + length) | 0;
            if (TOTAL0 >>> 0 < length >>> 0) TOTAL1 = (TOTAL1 + 1) | 0;

            HEAP[offset | length] = 0x80;

            if ((length | 0) >= 112) {
              for (i = (length + 1) | 0; (i | 0) < 128; i = (i + 1) | 0)
                HEAP[offset | i] = 0x00;

              _core_heap(offset);

              length = 0;

              HEAP[offset | 0] = 0;
            }

            for (i = (length + 1) | 0; (i | 0) < 123; i = (i + 1) | 0)
              HEAP[offset | i] = 0;

            HEAP[offset | 120] = (TOTAL1 >>> 21) & 255;
            HEAP[offset | 121] = (TOTAL1 >>> 13) & 255;
            HEAP[offset | 122] = (TOTAL1 >>> 5) & 255;
            HEAP[offset | 123] = ((TOTAL1 << 3) & 255) | (TOTAL0 >>> 29);
            HEAP[offset | 124] = (TOTAL0 >>> 21) & 255;
            HEAP[offset | 125] = (TOTAL0 >>> 13) & 255;
            HEAP[offset | 126] = (TOTAL0 >>> 5) & 255;
            HEAP[offset | 127] = (TOTAL0 << 3) & 255;
            _core_heap(offset);

            if (~output) _state_to_heap(output);

            return hashed | 0;
          }

          function hmac_reset() {
            H0h = I0h;
            H0l = I0l;
            H1h = I1h;
            H1l = I1l;
            H2h = I2h;
            H2l = I2l;
            H3h = I3h;
            H3l = I3l;
            H4h = I4h;
            H4l = I4l;
            H5h = I5h;
            H5l = I5l;
            H6h = I6h;
            H6l = I6l;
            H7h = I7h;
            H7l = I7l;
            TOTAL0 = 128;
            TOTAL1 = 0;
          }

          function _hmac_opad() {
            H0h = O0h;
            H0l = O0l;
            H1h = O1h;
            H1l = O1l;
            H2h = O2h;
            H2l = O2l;
            H3h = O3h;
            H3l = O3l;
            H4h = O4h;
            H4l = O4l;
            H5h = O5h;
            H5l = O5l;
            H6h = O6h;
            H6l = O6l;
            H7h = O7h;
            H7l = O7l;
            TOTAL0 = 128;
            TOTAL1 = 0;
          }

          function hmac_init(
            p0h,
            p0l,
            p1h,
            p1l,
            p2h,
            p2l,
            p3h,
            p3l,
            p4h,
            p4l,
            p5h,
            p5l,
            p6h,
            p6l,
            p7h,
            p7l,
            p8h,
            p8l,
            p9h,
            p9l,
            p10h,
            p10l,
            p11h,
            p11l,
            p12h,
            p12l,
            p13h,
            p13l,
            p14h,
            p14l,
            p15h,
            p15l
          ) {
            p0h = p0h | 0;
            p0l = p0l | 0;
            p1h = p1h | 0;
            p1l = p1l | 0;
            p2h = p2h | 0;
            p2l = p2l | 0;
            p3h = p3h | 0;
            p3l = p3l | 0;
            p4h = p4h | 0;
            p4l = p4l | 0;
            p5h = p5h | 0;
            p5l = p5l | 0;
            p6h = p6h | 0;
            p6l = p6l | 0;
            p7h = p7h | 0;
            p7l = p7l | 0;
            p8h = p8h | 0;
            p8l = p8l | 0;
            p9h = p9h | 0;
            p9l = p9l | 0;
            p10h = p10h | 0;
            p10l = p10l | 0;
            p11h = p11h | 0;
            p11l = p11l | 0;
            p12h = p12h | 0;
            p12l = p12l | 0;
            p13h = p13h | 0;
            p13l = p13l | 0;
            p14h = p14h | 0;
            p14l = p14l | 0;
            p15h = p15h | 0;
            p15l = p15l | 0;

            // opad
            reset();
            _core(
              p0h ^ 0x5c5c5c5c,
              p0l ^ 0x5c5c5c5c,
              p1h ^ 0x5c5c5c5c,
              p1l ^ 0x5c5c5c5c,
              p2h ^ 0x5c5c5c5c,
              p2l ^ 0x5c5c5c5c,
              p3h ^ 0x5c5c5c5c,
              p3l ^ 0x5c5c5c5c,
              p4h ^ 0x5c5c5c5c,
              p4l ^ 0x5c5c5c5c,
              p5h ^ 0x5c5c5c5c,
              p5l ^ 0x5c5c5c5c,
              p6h ^ 0x5c5c5c5c,
              p6l ^ 0x5c5c5c5c,
              p7h ^ 0x5c5c5c5c,
              p7l ^ 0x5c5c5c5c,
              p8h ^ 0x5c5c5c5c,
              p8l ^ 0x5c5c5c5c,
              p9h ^ 0x5c5c5c5c,
              p9l ^ 0x5c5c5c5c,
              p10h ^ 0x5c5c5c5c,
              p10l ^ 0x5c5c5c5c,
              p11h ^ 0x5c5c5c5c,
              p11l ^ 0x5c5c5c5c,
              p12h ^ 0x5c5c5c5c,
              p12l ^ 0x5c5c5c5c,
              p13h ^ 0x5c5c5c5c,
              p13l ^ 0x5c5c5c5c,
              p14h ^ 0x5c5c5c5c,
              p14l ^ 0x5c5c5c5c,
              p15h ^ 0x5c5c5c5c,
              p15l ^ 0x5c5c5c5c
            );
            O0h = H0h;
            O0l = H0l;
            O1h = H1h;
            O1l = H1l;
            O2h = H2h;
            O2l = H2l;
            O3h = H3h;
            O3l = H3l;
            O4h = H4h;
            O4l = H4l;
            O5h = H5h;
            O5l = H5l;
            O6h = H6h;
            O6l = H6l;
            O7h = H7h;
            O7l = H7l;

            // ipad
            reset();
            _core(
              p0h ^ 0x36363636,
              p0l ^ 0x36363636,
              p1h ^ 0x36363636,
              p1l ^ 0x36363636,
              p2h ^ 0x36363636,
              p2l ^ 0x36363636,
              p3h ^ 0x36363636,
              p3l ^ 0x36363636,
              p4h ^ 0x36363636,
              p4l ^ 0x36363636,
              p5h ^ 0x36363636,
              p5l ^ 0x36363636,
              p6h ^ 0x36363636,
              p6l ^ 0x36363636,
              p7h ^ 0x36363636,
              p7l ^ 0x36363636,
              p8h ^ 0x36363636,
              p8l ^ 0x36363636,
              p9h ^ 0x36363636,
              p9l ^ 0x36363636,
              p10h ^ 0x36363636,
              p10l ^ 0x36363636,
              p11h ^ 0x36363636,
              p11l ^ 0x36363636,
              p12h ^ 0x36363636,
              p12l ^ 0x36363636,
              p13h ^ 0x36363636,
              p13l ^ 0x36363636,
              p14h ^ 0x36363636,
              p14l ^ 0x36363636,
              p15h ^ 0x36363636,
              p15l ^ 0x36363636
            );
            I0h = H0h;
            I0l = H0l;
            I1h = H1h;
            I1l = H1l;
            I2h = H2h;
            I2l = H2l;
            I3h = H3h;
            I3l = H3l;
            I4h = H4h;
            I4l = H4l;
            I5h = H5h;
            I5l = H5l;
            I6h = H6h;
            I6l = H6l;
            I7h = H7h;
            I7l = H7l;

            TOTAL0 = 128;
            TOTAL1 = 0;
          }

          // offset — multiple of 128
          // output — multiple of 64
          function hmac_finish(offset, length, output) {
            offset = offset | 0;
            length = length | 0;
            output = output | 0;

            var t0h = 0,
              t0l = 0,
              t1h = 0,
              t1l = 0,
              t2h = 0,
              t2l = 0,
              t3h = 0,
              t3l = 0,
              t4h = 0,
              t4l = 0,
              t5h = 0,
              t5l = 0,
              t6h = 0,
              t6l = 0,
              t7h = 0,
              t7l = 0,
              hashed = 0;

            if (offset & 127) return -1;

            if (~output) if (output & 63) return -1;

            hashed = finish(offset, length, -1) | 0;
            t0h = H0h;
            t0l = H0l;
            t1h = H1h;
            t1l = H1l;
            t2h = H2h;
            t2l = H2l;
            t3h = H3h;
            t3l = H3l;
            t4h = H4h;
            t4l = H4l;
            t5h = H5h;
            t5l = H5l;
            t6h = H6h;
            t6l = H6l;
            t7h = H7h;
            t7l = H7l;

            _hmac_opad();
            _core(
              t0h,
              t0l,
              t1h,
              t1l,
              t2h,
              t2l,
              t3h,
              t3l,
              t4h,
              t4l,
              t5h,
              t5l,
              t6h,
              t6l,
              t7h,
              t7l,
              0x80000000,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1536
            );

            if (~output) _state_to_heap(output);

            return hashed | 0;
          }

          // salt is assumed to be already processed
          // offset — multiple of 128
          // output — multiple of 64
          function pbkdf2_generate_block(offset, length, block, count, output) {
            offset = offset | 0;
            length = length | 0;
            block = block | 0;
            count = count | 0;
            output = output | 0;

            var h0h = 0,
              h0l = 0,
              h1h = 0,
              h1l = 0,
              h2h = 0,
              h2l = 0,
              h3h = 0,
              h3l = 0,
              h4h = 0,
              h4l = 0,
              h5h = 0,
              h5l = 0,
              h6h = 0,
              h6l = 0,
              h7h = 0,
              h7l = 0,
              t0h = 0,
              t0l = 0,
              t1h = 0,
              t1l = 0,
              t2h = 0,
              t2l = 0,
              t3h = 0,
              t3l = 0,
              t4h = 0,
              t4l = 0,
              t5h = 0,
              t5l = 0,
              t6h = 0,
              t6l = 0,
              t7h = 0,
              t7l = 0;

            if (offset & 127) return -1;

            if (~output) if (output & 63) return -1;

            // pad block number into heap
            // FIXME probable OOB write
            HEAP[(offset + length) | 0] = block >>> 24;
            HEAP[(offset + length + 1) | 0] = (block >>> 16) & 255;
            HEAP[(offset + length + 2) | 0] = (block >>> 8) & 255;
            HEAP[(offset + length + 3) | 0] = block & 255;

            // finish first iteration
            hmac_finish(offset, (length + 4) | 0, -1) | 0;

            h0h = t0h = H0h;
            h0l = t0l = H0l;
            h1h = t1h = H1h;
            h1l = t1l = H1l;
            h2h = t2h = H2h;
            h2l = t2l = H2l;
            h3h = t3h = H3h;
            h3l = t3l = H3l;
            h4h = t4h = H4h;
            h4l = t4l = H4l;
            h5h = t5h = H5h;
            h5l = t5l = H5l;
            h6h = t6h = H6h;
            h6l = t6l = H6l;
            h7h = t7h = H7h;
            h7l = t7l = H7l;

            count = (count - 1) | 0;

            // perform the rest iterations
            while ((count | 0) > 0) {
              hmac_reset();
              _core(
                t0h,
                t0l,
                t1h,
                t1l,
                t2h,
                t2l,
                t3h,
                t3l,
                t4h,
                t4l,
                t5h,
                t5l,
                t6h,
                t6l,
                t7h,
                t7l,
                0x80000000,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1536
              );

              t0h = H0h;
              t0l = H0l;
              t1h = H1h;
              t1l = H1l;
              t2h = H2h;
              t2l = H2l;
              t3h = H3h;
              t3l = H3l;
              t4h = H4h;
              t4l = H4l;
              t5h = H5h;
              t5l = H5l;
              t6h = H6h;
              t6l = H6l;
              t7h = H7h;
              t7l = H7l;

              _hmac_opad();
              _core(
                t0h,
                t0l,
                t1h,
                t1l,
                t2h,
                t2l,
                t3h,
                t3l,
                t4h,
                t4l,
                t5h,
                t5l,
                t6h,
                t6l,
                t7h,
                t7l,
                0x80000000,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1536
              );

              t0h = H0h;
              t0l = H0l;
              t1h = H1h;
              t1l = H1l;
              t2h = H2h;
              t2l = H2l;
              t3h = H3h;
              t3l = H3l;
              t4h = H4h;
              t4l = H4l;
              t5h = H5h;
              t5l = H5l;
              t6h = H6h;
              t6l = H6l;
              t7h = H7h;
              t7l = H7l;

              h0h = h0h ^ H0h;
              h0l = h0l ^ H0l;
              h1h = h1h ^ H1h;
              h1l = h1l ^ H1l;
              h2h = h2h ^ H2h;
              h2l = h2l ^ H2l;
              h3h = h3h ^ H3h;
              h3l = h3l ^ H3l;
              h4h = h4h ^ H4h;
              h4l = h4l ^ H4l;
              h5h = h5h ^ H5h;
              h5l = h5l ^ H5l;
              h6h = h6h ^ H6h;
              h6l = h6l ^ H6l;
              h7h = h7h ^ H7h;
              h7l = h7l ^ H7l;

              count = (count - 1) | 0;
            }

            H0h = h0h;
            H0l = h0l;
            H1h = h1h;
            H1l = h1l;
            H2h = h2h;
            H2l = h2l;
            H3h = h3h;
            H3l = h3l;
            H4h = h4h;
            H4l = h4l;
            H5h = h5h;
            H5l = h5l;
            H6h = h6h;
            H6l = h6l;
            H7h = h7h;
            H7l = h7l;

            if (~output) _state_to_heap(output);

            return 0;
          }

          return {
            // SHA512
            reset: reset,
            init: init,
            process: process,
            finish: finish,

            // HMAC-SHA512
            hmac_reset: hmac_reset,
            hmac_init: hmac_init,
            hmac_finish: hmac_finish,

            // PBKDF2-HMAC-SHA512
            pbkdf2_generate_block: pbkdf2_generate_block,
          };
        };

        const _sha512_block_size = 128;
        const _sha512_hash_size = 64;
        class Sha512 extends Hash {
          constructor() {
            super();
            this.NAME = "sha512";
            this.BLOCK_SIZE = _sha512_block_size;
            this.HASH_SIZE = _sha512_hash_size;
            this.heap = _heap_init();
            this.asm = sha512_asm(
              { Uint8Array: Uint8Array },
              null,
              this.heap.buffer
            );
            this.reset();
          }
        }
        Sha512.NAME = "sha512";

        class Hmac {
          constructor(hash, password, verify) {
            if (!hash.HASH_SIZE)
              throw new SyntaxError(
                "option 'hash' supplied doesn't seem to be a valid hash function"
              );
            this.hash = hash;
            this.BLOCK_SIZE = this.hash.BLOCK_SIZE;
            this.HMAC_SIZE = this.hash.HASH_SIZE;
            this.result = null;
            this.key = _hmac_key(this.hash, password);
            const ipad = new Uint8Array(this.key);
            for (let i = 0; i < ipad.length; ++i) ipad[i] ^= 0x36;
            this.hash.reset().process(ipad);
            if (verify !== undefined) {
              this._hmac_init_verify(verify);
            } else {
              this.verify = null;
            }
          }
          process(data) {
            if (this.result !== null)
              throw new IllegalStateError(
                "state must be reset before processing new data"
              );
            this.hash.process(data);
            return this;
          }
          finish() {
            if (this.result !== null)
              throw new IllegalStateError(
                "state must be reset before processing new data"
              );
            const inner_result = this.hash.finish().result;
            const opad = new Uint8Array(this.key);
            for (let i = 0; i < opad.length; ++i) opad[i] ^= 0x5c;
            const verify = this.verify;
            const result = this.hash
              .reset()
              .process(opad)
              .process(inner_result)
              .finish().result;
            if (verify) {
              if (verify.length === result.length) {
                let diff = 0;
                for (let i = 0; i < verify.length; i++) {
                  diff |= verify[i] ^ result[i];
                }
                if (diff !== 0)
                  throw new Error(
                    "HMAC verification failed, hash value doesn't match"
                  );
              } else {
                throw new Error(
                  "HMAC verification failed, lengths doesn't match"
                );
              }
            }
            this.result = result;
            return this;
          }
          _hmac_init_verify(verify) {
            if (verify.length !== this.HMAC_SIZE)
              throw new IllegalArgumentError("illegal verification tag size");
            this.verify = verify;
          }
        }
        function _hmac_key(hash, password) {
          const key = new Uint8Array(hash.BLOCK_SIZE);
          if (password.length > hash.BLOCK_SIZE) {
            key.set(hash.reset().process(password).finish().result);
          } else {
            key.set(password);
          }
          return key;
        }

        class HmacSha1 extends Hmac {
          constructor(password, verify) {
            const hash = new Sha1();
            // Calculate ipad, init the underlying engine, calculate this.key
            super(hash, password, verify);
            this.reset();
            if (verify !== undefined) {
              this._hmac_init_verify(verify);
            } else {
              this.verify = null;
            }
            return this;
          }
          reset() {
            this.result = null;
            const key = this.key;
            this.hash
              .reset()
              .asm.hmac_init(
                (key[0] << 24) | (key[1] << 16) | (key[2] << 8) | key[3],
                (key[4] << 24) | (key[5] << 16) | (key[6] << 8) | key[7],
                (key[8] << 24) | (key[9] << 16) | (key[10] << 8) | key[11],
                (key[12] << 24) | (key[13] << 16) | (key[14] << 8) | key[15],
                (key[16] << 24) | (key[17] << 16) | (key[18] << 8) | key[19],
                (key[20] << 24) | (key[21] << 16) | (key[22] << 8) | key[23],
                (key[24] << 24) | (key[25] << 16) | (key[26] << 8) | key[27],
                (key[28] << 24) | (key[29] << 16) | (key[30] << 8) | key[31],
                (key[32] << 24) | (key[33] << 16) | (key[34] << 8) | key[35],
                (key[36] << 24) | (key[37] << 16) | (key[38] << 8) | key[39],
                (key[40] << 24) | (key[41] << 16) | (key[42] << 8) | key[43],
                (key[44] << 24) | (key[45] << 16) | (key[46] << 8) | key[47],
                (key[48] << 24) | (key[49] << 16) | (key[50] << 8) | key[51],
                (key[52] << 24) | (key[53] << 16) | (key[54] << 8) | key[55],
                (key[56] << 24) | (key[57] << 16) | (key[58] << 8) | key[59],
                (key[60] << 24) | (key[61] << 16) | (key[62] << 8) | key[63]
              );
            return this;
          }
          finish() {
            if (this.result !== null)
              throw new IllegalStateError(
                "state must be reset before processing new data"
              );
            const hash = this.hash;
            const asm = this.hash.asm;
            const heap = this.hash.heap;
            asm.hmac_finish(hash.pos, hash.len, 0);
            const verify = this.verify;
            const result = new Uint8Array(_sha1_hash_size);
            result.set(heap.subarray(0, _sha1_hash_size));
            if (verify) {
              if (verify.length === result.length) {
                let diff = 0;
                for (let i = 0; i < verify.length; i++) {
                  diff |= verify[i] ^ result[i];
                }
                if (diff !== 0)
                  throw new Error(
                    "HMAC verification failed, hash value doesn't match"
                  );
              } else {
                throw new Error(
                  "HMAC verification failed, lengths doesn't match"
                );
              }
            } else {
              this.result = result;
            }
            return this;
          }
        }

        class HmacSha256 extends Hmac {
          constructor(password, verify) {
            const hash = new Sha256();
            // Calculate ipad, init the underlying engine, calculate this.key
            super(hash, password, verify);
            this.reset();
            if (verify !== undefined) {
              this._hmac_init_verify(verify);
            } else {
              this.verify = null;
            }
            return this;
          }
          reset() {
            const key = this.key;
            this.hash
              .reset()
              .asm.hmac_init(
                (key[0] << 24) | (key[1] << 16) | (key[2] << 8) | key[3],
                (key[4] << 24) | (key[5] << 16) | (key[6] << 8) | key[7],
                (key[8] << 24) | (key[9] << 16) | (key[10] << 8) | key[11],
                (key[12] << 24) | (key[13] << 16) | (key[14] << 8) | key[15],
                (key[16] << 24) | (key[17] << 16) | (key[18] << 8) | key[19],
                (key[20] << 24) | (key[21] << 16) | (key[22] << 8) | key[23],
                (key[24] << 24) | (key[25] << 16) | (key[26] << 8) | key[27],
                (key[28] << 24) | (key[29] << 16) | (key[30] << 8) | key[31],
                (key[32] << 24) | (key[33] << 16) | (key[34] << 8) | key[35],
                (key[36] << 24) | (key[37] << 16) | (key[38] << 8) | key[39],
                (key[40] << 24) | (key[41] << 16) | (key[42] << 8) | key[43],
                (key[44] << 24) | (key[45] << 16) | (key[46] << 8) | key[47],
                (key[48] << 24) | (key[49] << 16) | (key[50] << 8) | key[51],
                (key[52] << 24) | (key[53] << 16) | (key[54] << 8) | key[55],
                (key[56] << 24) | (key[57] << 16) | (key[58] << 8) | key[59],
                (key[60] << 24) | (key[61] << 16) | (key[62] << 8) | key[63]
              );
            return this;
          }
          finish() {
            if (this.key === null)
              throw new IllegalStateError(
                "no key is associated with the instance"
              );
            if (this.result !== null)
              throw new IllegalStateError(
                "state must be reset before processing new data"
              );
            const hash = this.hash;
            const asm = this.hash.asm;
            const heap = this.hash.heap;
            asm.hmac_finish(hash.pos, hash.len, 0);
            const verify = this.verify;
            const result = new Uint8Array(_sha256_hash_size);
            result.set(heap.subarray(0, _sha256_hash_size));
            if (verify) {
              if (verify.length === result.length) {
                let diff = 0;
                for (let i = 0; i < verify.length; i++) {
                  diff |= verify[i] ^ result[i];
                }
                if (diff !== 0)
                  throw new Error(
                    "HMAC verification failed, hash value doesn't match"
                  );
              } else {
                throw new Error(
                  "HMAC verification failed, lengths doesn't match"
                );
              }
            } else {
              this.result = result;
            }
            return this;
          }
        }

        class HmacSha512 extends Hmac {
          constructor(password, verify) {
            const hash = new Sha512();
            // Calculate ipad, init the underlying engine, calculate this.key
            super(hash, password, verify);
            this.reset();
            if (verify !== undefined) {
              this._hmac_init_verify(verify);
            } else {
              this.verify = null;
            }
            return this;
          }
          reset() {
            const key = this.key;
            this.hash
              .reset()
              .asm.hmac_init(
                (key[0] << 24) | (key[1] << 16) | (key[2] << 8) | key[3],
                (key[4] << 24) | (key[5] << 16) | (key[6] << 8) | key[7],
                (key[8] << 24) | (key[9] << 16) | (key[10] << 8) | key[11],
                (key[12] << 24) | (key[13] << 16) | (key[14] << 8) | key[15],
                (key[16] << 24) | (key[17] << 16) | (key[18] << 8) | key[19],
                (key[20] << 24) | (key[21] << 16) | (key[22] << 8) | key[23],
                (key[24] << 24) | (key[25] << 16) | (key[26] << 8) | key[27],
                (key[28] << 24) | (key[29] << 16) | (key[30] << 8) | key[31],
                (key[32] << 24) | (key[33] << 16) | (key[34] << 8) | key[35],
                (key[36] << 24) | (key[37] << 16) | (key[38] << 8) | key[39],
                (key[40] << 24) | (key[41] << 16) | (key[42] << 8) | key[43],
                (key[44] << 24) | (key[45] << 16) | (key[46] << 8) | key[47],
                (key[48] << 24) | (key[49] << 16) | (key[50] << 8) | key[51],
                (key[52] << 24) | (key[53] << 16) | (key[54] << 8) | key[55],
                (key[56] << 24) | (key[57] << 16) | (key[58] << 8) | key[59],
                (key[60] << 24) | (key[61] << 16) | (key[62] << 8) | key[63],
                (key[64] << 24) | (key[65] << 16) | (key[66] << 8) | key[67],
                (key[68] << 24) | (key[69] << 16) | (key[70] << 8) | key[71],
                (key[72] << 24) | (key[73] << 16) | (key[74] << 8) | key[75],
                (key[76] << 24) | (key[77] << 16) | (key[78] << 8) | key[79],
                (key[80] << 24) | (key[81] << 16) | (key[82] << 8) | key[83],
                (key[84] << 24) | (key[85] << 16) | (key[86] << 8) | key[87],
                (key[88] << 24) | (key[89] << 16) | (key[90] << 8) | key[91],
                (key[92] << 24) | (key[93] << 16) | (key[94] << 8) | key[95],
                (key[96] << 24) | (key[97] << 16) | (key[98] << 8) | key[99],
                (key[100] << 24) |
                  (key[101] << 16) |
                  (key[102] << 8) |
                  key[103],
                (key[104] << 24) |
                  (key[105] << 16) |
                  (key[106] << 8) |
                  key[107],
                (key[108] << 24) |
                  (key[109] << 16) |
                  (key[110] << 8) |
                  key[111],
                (key[112] << 24) |
                  (key[113] << 16) |
                  (key[114] << 8) |
                  key[115],
                (key[116] << 24) |
                  (key[117] << 16) |
                  (key[118] << 8) |
                  key[119],
                (key[120] << 24) |
                  (key[121] << 16) |
                  (key[122] << 8) |
                  key[123],
                (key[124] << 24) | (key[125] << 16) | (key[126] << 8) | key[127]
              );
            return this;
          }
          finish() {
            if (this.key === null)
              throw new IllegalStateError(
                "no key is associated with the instance"
              );
            if (this.result !== null)
              throw new IllegalStateError(
                "state must be reset before processing new data"
              );
            const hash = this.hash;
            const asm = this.hash.asm;
            const heap = this.hash.heap;
            asm.hmac_finish(hash.pos, hash.len, 0);
            const verify = this.verify;
            const result = new Uint8Array(_sha512_hash_size);
            result.set(heap.subarray(0, _sha512_hash_size));
            if (verify) {
              if (verify.length === result.length) {
                let diff = 0;
                for (let i = 0; i < verify.length; i++) {
                  diff |= verify[i] ^ result[i];
                }
                if (diff !== 0)
                  throw new Error(
                    "HMAC verification failed, hash value doesn't match"
                  );
              } else {
                throw new Error(
                  "HMAC verification failed, lengths doesn't match"
                );
              }
            } else {
              this.result = result;
            }
            return this;
          }
        }

        function Pbkdf2HmacSha1(password, salt, count, length) {
          const hmac = new HmacSha1(password);
          const result = new Uint8Array(length);
          const blocks = Math.ceil(length / hmac.HMAC_SIZE);
          for (let i = 1; i <= blocks; ++i) {
            const j = (i - 1) * hmac.HMAC_SIZE;
            const l =
              (i < blocks ? 0 : length % hmac.HMAC_SIZE) || hmac.HMAC_SIZE;
            hmac.reset().process(salt);
            hmac.hash.asm.pbkdf2_generate_block(
              hmac.hash.pos,
              hmac.hash.len,
              i,
              count,
              0
            );
            result.set(hmac.hash.heap.subarray(0, l), j);
          }
          return result;
        }

        function Pbkdf2HmacSha256(password, salt, count, length) {
          const hmac = new HmacSha256(password);
          const result = new Uint8Array(length);
          const blocks = Math.ceil(length / hmac.HMAC_SIZE);
          for (let i = 1; i <= blocks; ++i) {
            const j = (i - 1) * hmac.HMAC_SIZE;
            const l =
              (i < blocks ? 0 : length % hmac.HMAC_SIZE) || hmac.HMAC_SIZE;
            hmac.reset().process(salt);
            hmac.hash.asm.pbkdf2_generate_block(
              hmac.hash.pos,
              hmac.hash.len,
              i,
              count,
              0
            );
            result.set(hmac.hash.heap.subarray(0, l), j);
          }
          return result;
        }

        function Pbkdf2HmacSha512(password, salt, count, length) {
          const hmac = new HmacSha512(password);
          const result = new Uint8Array(length);
          const blocks = Math.ceil(length / hmac.HMAC_SIZE);
          for (let i = 1; i <= blocks; ++i) {
            const j = (i - 1) * hmac.HMAC_SIZE;
            const l =
              (i < blocks ? 0 : length % hmac.HMAC_SIZE) || hmac.HMAC_SIZE;
            hmac.reset().process(salt);
            hmac.hash.asm.pbkdf2_generate_block(
              hmac.hash.pos,
              hmac.hash.len,
              i,
              count,
              0
            );
            result.set(hmac.hash.heap.subarray(0, l), j);
          }
          return result;
        }

        class RSA {
          constructor(key) {
            const l = key.length;
            if (l !== 2 && l !== 3 && l !== 8)
              throw new SyntaxError("unexpected key type");
            const k0 = new Modulus(new BigNumber(key[0]));
            const k1 = new BigNumber(key[1]);
            this.key = {
              0: k0,
              1: k1,
            };
            if (l > 2) {
              this.key[2] = new BigNumber(key[2]);
            }
            if (l > 3) {
              this.key[3] = new Modulus(new BigNumber(key[3]));
              this.key[4] = new Modulus(new BigNumber(key[4]));
              this.key[5] = new BigNumber(key[5]);
              this.key[6] = new BigNumber(key[6]);
              this.key[7] = new BigNumber(key[7]);
            }
          }
          encrypt(msg) {
            if (!this.key)
              throw new IllegalStateError(
                "no key is associated with the instance"
              );
            if (this.key[0].compare(msg) <= 0)
              throw new RangeError("data too large");
            const m = this.key[0];
            const e = this.key[1];
            let result = m.power(msg, e).toBytes();
            const bytelen = (m.bitLength + 7) >> 3;
            if (result.length < bytelen) {
              const r = new Uint8Array(bytelen);
              r.set(result, bytelen - result.length);
              result = r;
            }
            this.result = result;
            return this;
          }
          decrypt(msg) {
            if (this.key[0].compare(msg) <= 0)
              throw new RangeError("data too large");
            let result;
            let m;
            if (this.key[3] !== undefined) {
              m = this.key[0];
              const p = this.key[3];
              const q = this.key[4];
              const dp = this.key[5];
              const dq = this.key[6];
              const u = this.key[7];
              const x = p.power(msg, dp);
              const y = q.power(msg, dq);
              let t = x.subtract(y);
              while (t.sign < 0) t = t.add(p);
              const h = p.reduce(u.multiply(t));
              result = h.multiply(q).add(y).clamp(m.bitLength).toBytes();
            } else {
              m = this.key[0];
              const d = this.key[2];
              result = m.power(msg, d).toBytes();
            }
            const bytelen = (m.bitLength + 7) >> 3;
            if (result.length < bytelen) {
              let r = new Uint8Array(bytelen);
              r.set(result, bytelen - result.length);
              result = r;
            }
            this.result = result;
            return this;
          }
        }

        class RSA_OAEP {
          constructor(key, hash, label) {
            this.rsa = new RSA(key);
            this.hash = hash;
            if (label !== undefined) {
              this.label = label.length > 0 ? label : null;
            } else {
              this.label = null;
            }
          }
          encrypt(data, random) {
            const key_size = Math.ceil(this.rsa.key[0].bitLength / 8);
            const hash_size = this.hash.HASH_SIZE;
            const data_length = data.byteLength || data.length || 0;
            const ps_length = key_size - data_length - 2 * hash_size - 2;
            if (data_length > key_size - 2 * this.hash.HASH_SIZE - 2)
              throw new IllegalArgumentError("data too large");
            const message = new Uint8Array(key_size);
            const seed = message.subarray(1, hash_size + 1);
            const data_block = message.subarray(hash_size + 1);
            data_block.set(data, hash_size + ps_length + 1);
            data_block.set(
              this.hash.process(this.label || new Uint8Array(0)).finish()
                .result,
              0
            );
            data_block[hash_size + ps_length] = 1;
            if (random !== undefined) {
              if (seed.length !== random.length)
                throw new IllegalArgumentError(
                  "random size must equal the hash size"
                );
              seed.set(random);
            } else {
              getRandomValues(seed);
            }
            const data_block_mask = this.RSA_MGF1_generate(
              seed,
              data_block.length
            );
            for (let i = 0; i < data_block.length; i++)
              data_block[i] ^= data_block_mask[i];
            const seed_mask = this.RSA_MGF1_generate(data_block, seed.length);
            for (let i = 0; i < seed.length; i++) seed[i] ^= seed_mask[i];
            this.rsa.encrypt(new BigNumber(message));
            return new Uint8Array(this.rsa.result);
          }
          decrypt(data) {
            if (!this.rsa.key)
              throw new IllegalStateError(
                "no key is associated with the instance"
              );
            const key_size = Math.ceil(this.rsa.key[0].bitLength / 8);
            const hash_size = this.hash.HASH_SIZE;
            const data_length = data.byteLength || data.length || 0;
            if (data_length !== key_size)
              throw new IllegalArgumentError("bad data");
            this.rsa.decrypt(new BigNumber(data));
            const z = this.rsa.result[0];
            const seed = this.rsa.result.subarray(1, hash_size + 1);
            const data_block = this.rsa.result.subarray(hash_size + 1);
            if (z !== 0) throw new SecurityError("decryption failed");
            const seed_mask = this.RSA_MGF1_generate(data_block, seed.length);
            for (let i = 0; i < seed.length; i++) seed[i] ^= seed_mask[i];
            const data_block_mask = this.RSA_MGF1_generate(
              seed,
              data_block.length
            );
            for (let i = 0; i < data_block.length; i++)
              data_block[i] ^= data_block_mask[i];
            const lhash = this.hash
              .reset()
              .process(this.label || new Uint8Array(0))
              .finish().result;
            for (let i = 0; i < hash_size; i++) {
              if (lhash[i] !== data_block[i])
                throw new SecurityError("decryption failed");
            }
            let ps_end = hash_size;
            for (; ps_end < data_block.length; ps_end++) {
              const psz = data_block[ps_end];
              if (psz === 1) break;
              if (psz !== 0) throw new SecurityError("decryption failed");
            }
            if (ps_end === data_block.length)
              throw new SecurityError("decryption failed");
            this.rsa.result = data_block.subarray(ps_end + 1);
            return new Uint8Array(this.rsa.result);
          }
          RSA_MGF1_generate(seed, length = 0) {
            const hash_size = this.hash.HASH_SIZE;
            //    if ( length > (hash_size * 0x100000000) )
            //        throw new IllegalArgumentError("mask length too large");
            const mask = new Uint8Array(length);
            const counter = new Uint8Array(4);
            const chunks = Math.ceil(length / hash_size);
            for (let i = 0; i < chunks; i++) {
              (counter[0] = i >>> 24),
                (counter[1] = (i >>> 16) & 255),
                (counter[2] = (i >>> 8) & 255),
                (counter[3] = i & 255);
              const submask = mask.subarray(i * hash_size);
              let chunk = this.hash
                .reset()
                .process(seed)
                .process(counter)
                .finish().result;
              if (chunk.length > submask.length)
                chunk = chunk.subarray(0, submask.length);
              submask.set(chunk);
            }
            return mask;
          }
        }
        class RSA_PSS {
          constructor(key, hash, saltLength = 4) {
            this.rsa = new RSA(key);
            this.hash = hash;
            this.saltLength = saltLength;
            if (this.saltLength < 0)
              throw new TypeError("saltLength should be a non-negative number");
            if (
              this.rsa.key !== null &&
              Math.ceil((this.rsa.key[0].bitLength - 1) / 8) <
                this.hash.HASH_SIZE + this.saltLength + 2
            )
              throw new SyntaxError("saltLength is too large");
          }
          sign(data, random) {
            const key_bits = this.rsa.key[0].bitLength;
            const hash_size = this.hash.HASH_SIZE;
            const message_length = Math.ceil((key_bits - 1) / 8);
            const salt_length = this.saltLength;
            const ps_length = message_length - salt_length - hash_size - 2;
            const message = new Uint8Array(message_length);
            const h_block = message.subarray(
              message_length - hash_size - 1,
              message_length - 1
            );
            const d_block = message.subarray(0, message_length - hash_size - 1);
            const d_salt = d_block.subarray(ps_length + 1);
            const m_block = new Uint8Array(8 + hash_size + salt_length);
            const m_hash = m_block.subarray(8, 8 + hash_size);
            const m_salt = m_block.subarray(8 + hash_size);
            m_hash.set(this.hash.process(data).finish().result);
            if (salt_length > 0) {
              if (random !== undefined) {
                if (m_salt.length !== random.length)
                  throw new IllegalArgumentError(
                    "random size must equal the salt size"
                  );
                m_salt.set(random);
              } else {
                getRandomValues(m_salt);
              }
            }
            d_block[ps_length] = 1;
            d_salt.set(m_salt);
            h_block.set(this.hash.reset().process(m_block).finish().result);
            const d_block_mask = this.RSA_MGF1_generate(
              h_block,
              d_block.length
            );
            for (let i = 0; i < d_block.length; i++)
              d_block[i] ^= d_block_mask[i];
            message[message_length - 1] = 0xbc;
            const zbits = 8 * message_length - key_bits + 1;
            if (zbits % 8) message[0] &= 0xff >>> zbits;
            this.rsa.decrypt(new BigNumber(message));
            return this.rsa.result;
          }
          verify(signature, data) {
            const key_bits = this.rsa.key[0].bitLength;
            const hash_size = this.hash.HASH_SIZE;
            const message_length = Math.ceil((key_bits - 1) / 8);
            const salt_length = this.saltLength;
            const ps_length = message_length - salt_length - hash_size - 2;
            this.rsa.encrypt(new BigNumber(signature));
            const message = this.rsa.result;
            if (message[message_length - 1] !== 0xbc)
              throw new SecurityError("bad signature");
            const h_block = message.subarray(
              message_length - hash_size - 1,
              message_length - 1
            );
            const d_block = message.subarray(0, message_length - hash_size - 1);
            const d_salt = d_block.subarray(ps_length + 1);
            const zbits = 8 * message_length - key_bits + 1;
            if (zbits % 8 && message[0] >>> (8 - zbits))
              throw new SecurityError("bad signature");
            const d_block_mask = this.RSA_MGF1_generate(
              h_block,
              d_block.length
            );
            for (let i = 0; i < d_block.length; i++)
              d_block[i] ^= d_block_mask[i];
            if (zbits % 8) message[0] &= 0xff >>> zbits;
            for (let i = 0; i < ps_length; i++) {
              if (d_block[i] !== 0) throw new SecurityError("bad signature");
            }
            if (d_block[ps_length] !== 1)
              throw new SecurityError("bad signature");
            const m_block = new Uint8Array(8 + hash_size + salt_length);
            const m_hash = m_block.subarray(8, 8 + hash_size);
            const m_salt = m_block.subarray(8 + hash_size);
            m_hash.set(this.hash.reset().process(data).finish().result);
            m_salt.set(d_salt);
            const h_block_verify = this.hash
              .reset()
              .process(m_block)
              .finish().result;
            for (let i = 0; i < hash_size; i++) {
              if (h_block[i] !== h_block_verify[i])
                throw new SecurityError("bad signature");
            }
          }
          RSA_MGF1_generate(seed, length = 0) {
            const hash_size = this.hash.HASH_SIZE;
            //    if ( length > (hash_size * 0x100000000) )
            //        throw new IllegalArgumentError("mask length too large");
            const mask = new Uint8Array(length);
            const counter = new Uint8Array(4);
            const chunks = Math.ceil(length / hash_size);
            for (let i = 0; i < chunks; i++) {
              (counter[0] = i >>> 24),
                (counter[1] = (i >>> 16) & 255),
                (counter[2] = (i >>> 8) & 255),
                (counter[3] = i & 255);
              const submask = mask.subarray(i * hash_size);
              let chunk = this.hash
                .reset()
                .process(seed)
                .process(counter)
                .finish().result;
              if (chunk.length > submask.length)
                chunk = chunk.subarray(0, submask.length);
              submask.set(chunk);
            }
            return mask;
          }
        }
        class RSA_PKCS1_v1_5 {
          constructor(key, hash) {
            this.rsa = new RSA(key);
            this.hash = hash;
          }
          sign(data) {
            if (!this.rsa.key) {
              throw new IllegalStateError(
                "no key is associated with the instance"
              );
            }
            const prefix = getHashPrefix(this.hash);
            const hash_size = this.hash.HASH_SIZE;
            const t_len = prefix.length + hash_size;
            const k = (this.rsa.key[0].bitLength + 7) >> 3;
            if (k < t_len + 11) {
              throw new Error("Message too long");
            }
            const m_hash = new Uint8Array(hash_size);
            m_hash.set(this.hash.process(data).finish().result);
            // EM = 0x00 || 0x01 || PS || 0x00 || T
            const em = new Uint8Array(k);
            let i = 0;
            em[i++] = 0; // 0x00
            em[i++] = 1; // 0x01
            // PS
            for (i; i < k - t_len - 1; i++) {
              em[i] = 0xff;
            }
            em[i++] = 0;
            em.set(prefix, i); // 0x00
            // T
            em.set(m_hash, em.length - hash_size);
            this.rsa.decrypt(new BigNumber(em));
            return this.rsa.result;
          }
          verify(signature, data) {
            const prefix = getHashPrefix(this.hash);
            const hash_size = this.hash.HASH_SIZE;
            const t_len = prefix.length + hash_size;
            const k = (this.rsa.key[0].bitLength + 7) >> 3;
            if (k < t_len + 11) {
              throw new SecurityError("Bad signature");
            }
            this.rsa.encrypt(new BigNumber(signature));
            const m_hash = new Uint8Array(hash_size);
            m_hash.set(this.hash.process(data).finish().result);
            let res = 1;
            // EM = 0x00 || 0x01 || PS || 0x00 || T
            const decryptedSignature = this.rsa.result;
            let i = 0;
            res &= decryptedSignature[i++] === 0 ? 1 : 0; // 0x00
            res &= decryptedSignature[i++] === 1 ? 1 : 0; // 0x01
            // PS
            for (i; i < k - t_len - 1; i++) {
              res &= decryptedSignature[i] === 0xff ? 1 : 0;
            }
            res &= decryptedSignature[i++] === 0 ? 1 : 0; // 0x00
            // T
            let j = 0;
            let n = i + prefix.length;
            // prefix
            for (i; i < n; i++) {
              res &= decryptedSignature[i] === prefix[j++] ? 1 : 0;
            }
            j = 0;
            n = i + m_hash.length;
            // hash
            for (i; i < n; i++) {
              res &= decryptedSignature[i] === m_hash[j++] ? 1 : 0;
            }
            if (!res) {
              throw new SecurityError("Bad signature");
            }
          }
        }
        const HASH_PREFIXES = {
          sha1: new Uint8Array([
            0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x1a,
            0x05, 0x00, 0x04, 0x14,
          ]),
          sha256: new Uint8Array([
            0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65,
            0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20,
          ]),
          sha384: new Uint8Array([
            0x30, 0x41, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65,
            0x03, 0x04, 0x02, 0x02, 0x05, 0x00, 0x04, 0x30,
          ]),
          sha512: new Uint8Array([
            0x30, 0x51, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65,
            0x03, 0x04, 0x02, 0x03, 0x05, 0x00, 0x04, 0x40,
          ]),
        };
        function getHashPrefix(hash) {
          const prefix = HASH_PREFIXES[hash.NAME];
          if (!prefix) {
            throw new Error(
              "Cannot get hash prefix for hash algorithm '" + hash.NAME + "'"
            );
          }
          return prefix;
        }

        /***/
      },

    /***/ "../node_modules/base64-js/index.js":
      /*!******************************************!*\
  !*** ../node_modules/base64-js/index.js ***!
  \******************************************/
      /***/ (__unused_webpack_module, exports) => {
        "use strict";

        exports.byteLength = byteLength;
        exports.toByteArray = toByteArray;
        exports.fromByteArray = fromByteArray;

        var lookup = [];
        var revLookup = [];
        var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;

        var code =
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        for (var i = 0, len = code.length; i < len; ++i) {
          lookup[i] = code[i];
          revLookup[code.charCodeAt(i)] = i;
        }

        // Support decoding URL-safe base64 strings, as Node.js does.
        // See: https://en.wikipedia.org/wiki/Base64#URL_applications
        revLookup["-".charCodeAt(0)] = 62;
        revLookup["_".charCodeAt(0)] = 63;

        function getLens(b64) {
          var len = b64.length;

          if (len % 4 > 0) {
            throw new Error("Invalid string. Length must be a multiple of 4");
          }

          // Trim off extra bytes after placeholder bytes are found
          // See: https://github.com/beatgammit/base64-js/issues/42
          var validLen = b64.indexOf("=");
          if (validLen === -1) validLen = len;

          var placeHoldersLen = validLen === len ? 0 : 4 - (validLen % 4);

          return [validLen, placeHoldersLen];
        }

        // base64 is 4/3 + up to two characters of the original data
        function byteLength(b64) {
          var lens = getLens(b64);
          var validLen = lens[0];
          var placeHoldersLen = lens[1];
          return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
        }

        function _byteLength(b64, validLen, placeHoldersLen) {
          return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
        }

        function toByteArray(b64) {
          var tmp;
          var lens = getLens(b64);
          var validLen = lens[0];
          var placeHoldersLen = lens[1];

          var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

          var curByte = 0;

          // if there are placeholders, only get up to the last complete 4 chars
          var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

          var i;
          for (i = 0; i < len; i += 4) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 18) |
              (revLookup[b64.charCodeAt(i + 1)] << 12) |
              (revLookup[b64.charCodeAt(i + 2)] << 6) |
              revLookup[b64.charCodeAt(i + 3)];
            arr[curByte++] = (tmp >> 16) & 0xff;
            arr[curByte++] = (tmp >> 8) & 0xff;
            arr[curByte++] = tmp & 0xff;
          }

          if (placeHoldersLen === 2) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 2) |
              (revLookup[b64.charCodeAt(i + 1)] >> 4);
            arr[curByte++] = tmp & 0xff;
          }

          if (placeHoldersLen === 1) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 10) |
              (revLookup[b64.charCodeAt(i + 1)] << 4) |
              (revLookup[b64.charCodeAt(i + 2)] >> 2);
            arr[curByte++] = (tmp >> 8) & 0xff;
            arr[curByte++] = tmp & 0xff;
          }

          return arr;
        }

        function tripletToBase64(num) {
          return (
            lookup[(num >> 18) & 0x3f] +
            lookup[(num >> 12) & 0x3f] +
            lookup[(num >> 6) & 0x3f] +
            lookup[num & 0x3f]
          );
        }

        function encodeChunk(uint8, start, end) {
          var tmp;
          var output = [];
          for (var i = start; i < end; i += 3) {
            tmp =
              ((uint8[i] << 16) & 0xff0000) +
              ((uint8[i + 1] << 8) & 0xff00) +
              (uint8[i + 2] & 0xff);
            output.push(tripletToBase64(tmp));
          }
          return output.join("");
        }

        function fromByteArray(uint8) {
          var tmp;
          var len = uint8.length;
          var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
          var parts = [];
          var maxChunkLength = 16383; // must be multiple of 3

          // go through the array every three bytes, we'll deal with trailing stuff later
          for (
            var i = 0, len2 = len - extraBytes;
            i < len2;
            i += maxChunkLength
          ) {
            parts.push(
              encodeChunk(
                uint8,
                i,
                i + maxChunkLength > len2 ? len2 : i + maxChunkLength
              )
            );
          }

          // pad the end with zeros, but make sure to not forget the extra bytes
          if (extraBytes === 1) {
            tmp = uint8[len - 1];
            parts.push(lookup[tmp >> 2] + lookup[(tmp << 4) & 0x3f] + "==");
          } else if (extraBytes === 2) {
            tmp = (uint8[len - 2] << 8) + uint8[len - 1];
            parts.push(
              lookup[tmp >> 10] +
                lookup[(tmp >> 4) & 0x3f] +
                lookup[(tmp << 2) & 0x3f] +
                "="
            );
          }

          return parts.join("");
        }

        /***/
      },

    /***/ "../node_modules/buffer/index.js":
      /*!***************************************!*\
  !*** ../node_modules/buffer/index.js ***!
  \***************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        "use strict";
        /*!
         * The buffer module from node.js, for the browser.
         *
         * @author   Feross Aboukhadijeh <https://feross.org>
         * @license  MIT
         */
        /* eslint-disable no-proto */

        const base64 = __webpack_require__(
          /*! base64-js */ "../node_modules/base64-js/index.js"
        );
        const ieee754 = __webpack_require__(
          /*! ieee754 */ "../node_modules/ieee754/index.js"
        );
        const customInspectSymbol =
          typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
            ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
            : null;

        exports.Buffer = Buffer;
        exports.SlowBuffer = SlowBuffer;
        exports.INSPECT_MAX_BYTES = 50;

        const K_MAX_LENGTH = 0x7fffffff;
        exports.kMaxLength = K_MAX_LENGTH;

        /**
         * If `Buffer.TYPED_ARRAY_SUPPORT`:
         *   === true    Use Uint8Array implementation (fastest)
         *   === false   Print warning and recommend using `buffer` v4.x which has an Object
         *               implementation (most compatible, even IE6)
         *
         * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
         * Opera 11.6+, iOS 4.2+.
         *
         * We report that the browser does not support typed arrays if the are not subclassable
         * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
         * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
         * for __proto__ and has a buggy typed array implementation.
         */
        Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

        if (
          !Buffer.TYPED_ARRAY_SUPPORT &&
          typeof console !== "undefined" &&
          typeof console.error === "function"
        ) {
          console.error(
            "This browser lacks typed array (Uint8Array) support which is required by " +
              "`buffer` v5.x. Use `buffer` v4.x if you require old browser support."
          );
        }

        function typedArraySupport() {
          // Can typed array instances can be augmented?
          try {
            const arr = new Uint8Array(1);
            const proto = {
              foo: function () {
                return 42;
              },
            };
            Object.setPrototypeOf(proto, Uint8Array.prototype);
            Object.setPrototypeOf(arr, proto);
            return arr.foo() === 42;
          } catch (e) {
            return false;
          }
        }

        Object.defineProperty(Buffer.prototype, "parent", {
          enumerable: true,
          get: function () {
            if (!Buffer.isBuffer(this)) return undefined;
            return this.buffer;
          },
        });

        Object.defineProperty(Buffer.prototype, "offset", {
          enumerable: true,
          get: function () {
            if (!Buffer.isBuffer(this)) return undefined;
            return this.byteOffset;
          },
        });

        function createBuffer(length) {
          if (length > K_MAX_LENGTH) {
            throw new RangeError(
              'The value "' + length + '" is invalid for option "size"'
            );
          }
          // Return an augmented `Uint8Array` instance
          const buf = new Uint8Array(length);
          Object.setPrototypeOf(buf, Buffer.prototype);
          return buf;
        }

        /**
         * The Buffer constructor returns instances of `Uint8Array` that have their
         * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
         * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
         * and the `Uint8Array` methods. Square bracket notation works as expected -- it
         * returns a single octet.
         *
         * The `Uint8Array` prototype remains unmodified.
         */

        function Buffer(arg, encodingOrOffset, length) {
          // Common case.
          if (typeof arg === "number") {
            if (typeof encodingOrOffset === "string") {
              throw new TypeError(
                'The "string" argument must be of type string. Received type number'
              );
            }
            return allocUnsafe(arg);
          }
          return from(arg, encodingOrOffset, length);
        }

        Buffer.poolSize = 8192; // not used by this implementation

        function from(value, encodingOrOffset, length) {
          if (typeof value === "string") {
            return fromString(value, encodingOrOffset);
          }

          if (ArrayBuffer.isView(value)) {
            return fromArrayView(value);
          }

          if (value == null) {
            throw new TypeError(
              "The first argument must be one of type string, Buffer, ArrayBuffer, Array, " +
                "or Array-like Object. Received type " +
                typeof value
            );
          }

          if (
            isInstance(value, ArrayBuffer) ||
            (value && isInstance(value.buffer, ArrayBuffer))
          ) {
            return fromArrayBuffer(value, encodingOrOffset, length);
          }

          if (
            typeof SharedArrayBuffer !== "undefined" &&
            (isInstance(value, SharedArrayBuffer) ||
              (value && isInstance(value.buffer, SharedArrayBuffer)))
          ) {
            return fromArrayBuffer(value, encodingOrOffset, length);
          }

          if (typeof value === "number") {
            throw new TypeError(
              'The "value" argument must not be of type number. Received type number'
            );
          }

          const valueOf = value.valueOf && value.valueOf();
          if (valueOf != null && valueOf !== value) {
            return Buffer.from(valueOf, encodingOrOffset, length);
          }

          const b = fromObject(value);
          if (b) return b;

          if (
            typeof Symbol !== "undefined" &&
            Symbol.toPrimitive != null &&
            typeof value[Symbol.toPrimitive] === "function"
          ) {
            return Buffer.from(
              value[Symbol.toPrimitive]("string"),
              encodingOrOffset,
              length
            );
          }

          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, " +
              "or Array-like Object. Received type " +
              typeof value
          );
        }

        /**
         * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
         * if value is a number.
         * Buffer.from(str[, encoding])
         * Buffer.from(array)
         * Buffer.from(buffer)
         * Buffer.from(arrayBuffer[, byteOffset[, length]])
         **/
        Buffer.from = function (value, encodingOrOffset, length) {
          return from(value, encodingOrOffset, length);
        };

        // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
        // https://github.com/feross/buffer/pull/148
        Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
        Object.setPrototypeOf(Buffer, Uint8Array);

        function assertSize(size) {
          if (typeof size !== "number") {
            throw new TypeError('"size" argument must be of type number');
          } else if (size < 0) {
            throw new RangeError(
              'The value "' + size + '" is invalid for option "size"'
            );
          }
        }

        function alloc(size, fill, encoding) {
          assertSize(size);
          if (size <= 0) {
            return createBuffer(size);
          }
          if (fill !== undefined) {
            // Only pay attention to encoding if it's a string. This
            // prevents accidentally sending in a number that would
            // be interpreted as a start offset.
            return typeof encoding === "string"
              ? createBuffer(size).fill(fill, encoding)
              : createBuffer(size).fill(fill);
          }
          return createBuffer(size);
        }

        /**
         * Creates a new filled Buffer instance.
         * alloc(size[, fill[, encoding]])
         **/
        Buffer.alloc = function (size, fill, encoding) {
          return alloc(size, fill, encoding);
        };

        function allocUnsafe(size) {
          assertSize(size);
          return createBuffer(size < 0 ? 0 : checked(size) | 0);
        }

        /**
         * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
         * */
        Buffer.allocUnsafe = function (size) {
          return allocUnsafe(size);
        };
        /**
         * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
         */
        Buffer.allocUnsafeSlow = function (size) {
          return allocUnsafe(size);
        };

        function fromString(string, encoding) {
          if (typeof encoding !== "string" || encoding === "") {
            encoding = "utf8";
          }

          if (!Buffer.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }

          const length = byteLength(string, encoding) | 0;
          let buf = createBuffer(length);

          const actual = buf.write(string, encoding);

          if (actual !== length) {
            // Writing a hex string, for example, that contains invalid characters will
            // cause everything after the first invalid character to be ignored. (e.g.
            // 'abxxcd' will be treated as 'ab')
            buf = buf.slice(0, actual);
          }

          return buf;
        }

        function fromArrayLike(array) {
          const length = array.length < 0 ? 0 : checked(array.length) | 0;
          const buf = createBuffer(length);
          for (let i = 0; i < length; i += 1) {
            buf[i] = array[i] & 255;
          }
          return buf;
        }

        function fromArrayView(arrayView) {
          if (isInstance(arrayView, Uint8Array)) {
            const copy = new Uint8Array(arrayView);
            return fromArrayBuffer(
              copy.buffer,
              copy.byteOffset,
              copy.byteLength
            );
          }
          return fromArrayLike(arrayView);
        }

        function fromArrayBuffer(array, byteOffset, length) {
          if (byteOffset < 0 || array.byteLength < byteOffset) {
            throw new RangeError('"offset" is outside of buffer bounds');
          }

          if (array.byteLength < byteOffset + (length || 0)) {
            throw new RangeError('"length" is outside of buffer bounds');
          }

          let buf;
          if (byteOffset === undefined && length === undefined) {
            buf = new Uint8Array(array);
          } else if (length === undefined) {
            buf = new Uint8Array(array, byteOffset);
          } else {
            buf = new Uint8Array(array, byteOffset, length);
          }

          // Return an augmented `Uint8Array` instance
          Object.setPrototypeOf(buf, Buffer.prototype);

          return buf;
        }

        function fromObject(obj) {
          if (Buffer.isBuffer(obj)) {
            const len = checked(obj.length) | 0;
            const buf = createBuffer(len);

            if (buf.length === 0) {
              return buf;
            }

            obj.copy(buf, 0, 0, len);
            return buf;
          }

          if (obj.length !== undefined) {
            if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
              return createBuffer(0);
            }
            return fromArrayLike(obj);
          }

          if (obj.type === "Buffer" && Array.isArray(obj.data)) {
            return fromArrayLike(obj.data);
          }
        }

        function checked(length) {
          // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
          // length is NaN (which is otherwise coerced to zero.)
          if (length >= K_MAX_LENGTH) {
            throw new RangeError(
              "Attempt to allocate Buffer larger than maximum " +
                "size: 0x" +
                K_MAX_LENGTH.toString(16) +
                " bytes"
            );
          }
          return length | 0;
        }

        function SlowBuffer(length) {
          if (+length != length) {
            // eslint-disable-line eqeqeq
            length = 0;
          }
          return Buffer.alloc(+length);
        }

        Buffer.isBuffer = function isBuffer(b) {
          return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
        };

        Buffer.compare = function compare(a, b) {
          if (isInstance(a, Uint8Array))
            a = Buffer.from(a, a.offset, a.byteLength);
          if (isInstance(b, Uint8Array))
            b = Buffer.from(b, b.offset, b.byteLength);
          if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
            throw new TypeError(
              'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
            );
          }

          if (a === b) return 0;

          let x = a.length;
          let y = b.length;

          for (let i = 0, len = Math.min(x, y); i < len; ++i) {
            if (a[i] !== b[i]) {
              x = a[i];
              y = b[i];
              break;
            }
          }

          if (x < y) return -1;
          if (y < x) return 1;
          return 0;
        };

        Buffer.isEncoding = function isEncoding(encoding) {
          switch (String(encoding).toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "latin1":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return true;
            default:
              return false;
          }
        };

        Buffer.concat = function concat(list, length) {
          if (!Array.isArray(list)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          }

          if (list.length === 0) {
            return Buffer.alloc(0);
          }

          let i;
          if (length === undefined) {
            length = 0;
            for (i = 0; i < list.length; ++i) {
              length += list[i].length;
            }
          }

          const buffer = Buffer.allocUnsafe(length);
          let pos = 0;
          for (i = 0; i < list.length; ++i) {
            let buf = list[i];
            if (isInstance(buf, Uint8Array)) {
              if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
              } else {
                Uint8Array.prototype.set.call(buffer, buf, pos);
              }
            } else if (!Buffer.isBuffer(buf)) {
              throw new TypeError(
                '"list" argument must be an Array of Buffers'
              );
            } else {
              buf.copy(buffer, pos);
            }
            pos += buf.length;
          }
          return buffer;
        };

        function byteLength(string, encoding) {
          if (Buffer.isBuffer(string)) {
            return string.length;
          }
          if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
            return string.byteLength;
          }
          if (typeof string !== "string") {
            throw new TypeError(
              'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
                "Received type " +
                typeof string
            );
          }

          const len = string.length;
          const mustMatch = arguments.length > 2 && arguments[2] === true;
          if (!mustMatch && len === 0) return 0;

          // Use a for loop to avoid recursion
          let loweredCase = false;
          for (;;) {
            switch (encoding) {
              case "ascii":
              case "latin1":
              case "binary":
                return len;
              case "utf8":
              case "utf-8":
                return utf8ToBytes(string).length;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return len * 2;
              case "hex":
                return len >>> 1;
              case "base64":
                return base64ToBytes(string).length;
              default:
                if (loweredCase) {
                  return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
                }
                encoding = ("" + encoding).toLowerCase();
                loweredCase = true;
            }
          }
        }
        Buffer.byteLength = byteLength;

        function slowToString(encoding, start, end) {
          let loweredCase = false;

          // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
          // property of a typed array.

          // This behaves neither like String nor Uint8Array in that we set start/end
          // to their upper/lower bounds if the value passed is out of range.
          // undefined is handled specially as per ECMA-262 6th Edition,
          // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
          if (start === undefined || start < 0) {
            start = 0;
          }
          // Return early if start > this.length. Done here to prevent potential uint32
          // coercion fail below.
          if (start > this.length) {
            return "";
          }

          if (end === undefined || end > this.length) {
            end = this.length;
          }

          if (end <= 0) {
            return "";
          }

          // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
          end >>>= 0;
          start >>>= 0;

          if (end <= start) {
            return "";
          }

          if (!encoding) encoding = "utf8";

          while (true) {
            switch (encoding) {
              case "hex":
                return hexSlice(this, start, end);

              case "utf8":
              case "utf-8":
                return utf8Slice(this, start, end);

              case "ascii":
                return asciiSlice(this, start, end);

              case "latin1":
              case "binary":
                return latin1Slice(this, start, end);

              case "base64":
                return base64Slice(this, start, end);

              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return utf16leSlice(this, start, end);

              default:
                if (loweredCase)
                  throw new TypeError("Unknown encoding: " + encoding);
                encoding = (encoding + "").toLowerCase();
                loweredCase = true;
            }
          }
        }

        // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
        // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
        // reliably in a browserify context because there could be multiple different
        // copies of the 'buffer' package in use. This method works even for Buffer
        // instances that were created from another copy of the `buffer` package.
        // See: https://github.com/feross/buffer/issues/154
        Buffer.prototype._isBuffer = true;

        function swap(b, n, m) {
          const i = b[n];
          b[n] = b[m];
          b[m] = i;
        }

        Buffer.prototype.swap16 = function swap16() {
          const len = this.length;
          if (len % 2 !== 0) {
            throw new RangeError("Buffer size must be a multiple of 16-bits");
          }
          for (let i = 0; i < len; i += 2) {
            swap(this, i, i + 1);
          }
          return this;
        };

        Buffer.prototype.swap32 = function swap32() {
          const len = this.length;
          if (len % 4 !== 0) {
            throw new RangeError("Buffer size must be a multiple of 32-bits");
          }
          for (let i = 0; i < len; i += 4) {
            swap(this, i, i + 3);
            swap(this, i + 1, i + 2);
          }
          return this;
        };

        Buffer.prototype.swap64 = function swap64() {
          const len = this.length;
          if (len % 8 !== 0) {
            throw new RangeError("Buffer size must be a multiple of 64-bits");
          }
          for (let i = 0; i < len; i += 8) {
            swap(this, i, i + 7);
            swap(this, i + 1, i + 6);
            swap(this, i + 2, i + 5);
            swap(this, i + 3, i + 4);
          }
          return this;
        };

        Buffer.prototype.toString = function toString() {
          const length = this.length;
          if (length === 0) return "";
          if (arguments.length === 0) return utf8Slice(this, 0, length);
          return slowToString.apply(this, arguments);
        };

        Buffer.prototype.toLocaleString = Buffer.prototype.toString;

        Buffer.prototype.equals = function equals(b) {
          if (!Buffer.isBuffer(b))
            throw new TypeError("Argument must be a Buffer");
          if (this === b) return true;
          return Buffer.compare(this, b) === 0;
        };

        Buffer.prototype.inspect = function inspect() {
          let str = "";
          const max = exports.INSPECT_MAX_BYTES;
          str = this.toString("hex", 0, max)
            .replace(/(.{2})/g, "$1 ")
            .trim();
          if (this.length > max) str += " ... ";
          return "<Buffer " + str + ">";
        };
        if (customInspectSymbol) {
          Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
        }

        Buffer.prototype.compare = function compare(
          target,
          start,
          end,
          thisStart,
          thisEnd
        ) {
          if (isInstance(target, Uint8Array)) {
            target = Buffer.from(target, target.offset, target.byteLength);
          }
          if (!Buffer.isBuffer(target)) {
            throw new TypeError(
              'The "target" argument must be one of type Buffer or Uint8Array. ' +
                "Received type " +
                typeof target
            );
          }

          if (start === undefined) {
            start = 0;
          }
          if (end === undefined) {
            end = target ? target.length : 0;
          }
          if (thisStart === undefined) {
            thisStart = 0;
          }
          if (thisEnd === undefined) {
            thisEnd = this.length;
          }

          if (
            start < 0 ||
            end > target.length ||
            thisStart < 0 ||
            thisEnd > this.length
          ) {
            throw new RangeError("out of range index");
          }

          if (thisStart >= thisEnd && start >= end) {
            return 0;
          }
          if (thisStart >= thisEnd) {
            return -1;
          }
          if (start >= end) {
            return 1;
          }

          start >>>= 0;
          end >>>= 0;
          thisStart >>>= 0;
          thisEnd >>>= 0;

          if (this === target) return 0;

          let x = thisEnd - thisStart;
          let y = end - start;
          const len = Math.min(x, y);

          const thisCopy = this.slice(thisStart, thisEnd);
          const targetCopy = target.slice(start, end);

          for (let i = 0; i < len; ++i) {
            if (thisCopy[i] !== targetCopy[i]) {
              x = thisCopy[i];
              y = targetCopy[i];
              break;
            }
          }

          if (x < y) return -1;
          if (y < x) return 1;
          return 0;
        };

        // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
        // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
        //
        // Arguments:
        // - buffer - a Buffer to search
        // - val - a string, Buffer, or number
        // - byteOffset - an index into `buffer`; will be clamped to an int32
        // - encoding - an optional encoding, relevant is val is a string
        // - dir - true for indexOf, false for lastIndexOf
        function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
          // Empty buffer means no match
          if (buffer.length === 0) return -1;

          // Normalize byteOffset
          if (typeof byteOffset === "string") {
            encoding = byteOffset;
            byteOffset = 0;
          } else if (byteOffset > 0x7fffffff) {
            byteOffset = 0x7fffffff;
          } else if (byteOffset < -0x80000000) {
            byteOffset = -0x80000000;
          }
          byteOffset = +byteOffset; // Coerce to Number.
          if (numberIsNaN(byteOffset)) {
            // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
            byteOffset = dir ? 0 : buffer.length - 1;
          }

          // Normalize byteOffset: negative offsets start from the end of the buffer
          if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
          if (byteOffset >= buffer.length) {
            if (dir) return -1;
            else byteOffset = buffer.length - 1;
          } else if (byteOffset < 0) {
            if (dir) byteOffset = 0;
            else return -1;
          }

          // Normalize val
          if (typeof val === "string") {
            val = Buffer.from(val, encoding);
          }

          // Finally, search either indexOf (if dir is true) or lastIndexOf
          if (Buffer.isBuffer(val)) {
            // Special case: looking for empty string/buffer always fails
            if (val.length === 0) {
              return -1;
            }
            return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
          } else if (typeof val === "number") {
            val = val & 0xff; // Search for a byte value [0-255]
            if (typeof Uint8Array.prototype.indexOf === "function") {
              if (dir) {
                return Uint8Array.prototype.indexOf.call(
                  buffer,
                  val,
                  byteOffset
                );
              } else {
                return Uint8Array.prototype.lastIndexOf.call(
                  buffer,
                  val,
                  byteOffset
                );
              }
            }
            return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
          }

          throw new TypeError("val must be string, number or Buffer");
        }

        function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
          let indexSize = 1;
          let arrLength = arr.length;
          let valLength = val.length;

          if (encoding !== undefined) {
            encoding = String(encoding).toLowerCase();
            if (
              encoding === "ucs2" ||
              encoding === "ucs-2" ||
              encoding === "utf16le" ||
              encoding === "utf-16le"
            ) {
              if (arr.length < 2 || val.length < 2) {
                return -1;
              }
              indexSize = 2;
              arrLength /= 2;
              valLength /= 2;
              byteOffset /= 2;
            }
          }

          function read(buf, i) {
            if (indexSize === 1) {
              return buf[i];
            } else {
              return buf.readUInt16BE(i * indexSize);
            }
          }

          let i;
          if (dir) {
            let foundIndex = -1;
            for (i = byteOffset; i < arrLength; i++) {
              if (
                read(arr, i) ===
                read(val, foundIndex === -1 ? 0 : i - foundIndex)
              ) {
                if (foundIndex === -1) foundIndex = i;
                if (i - foundIndex + 1 === valLength)
                  return foundIndex * indexSize;
              } else {
                if (foundIndex !== -1) i -= i - foundIndex;
                foundIndex = -1;
              }
            }
          } else {
            if (byteOffset + valLength > arrLength)
              byteOffset = arrLength - valLength;
            for (i = byteOffset; i >= 0; i--) {
              let found = true;
              for (let j = 0; j < valLength; j++) {
                if (read(arr, i + j) !== read(val, j)) {
                  found = false;
                  break;
                }
              }
              if (found) return i;
            }
          }

          return -1;
        }

        Buffer.prototype.includes = function includes(
          val,
          byteOffset,
          encoding
        ) {
          return this.indexOf(val, byteOffset, encoding) !== -1;
        };

        Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
        };

        Buffer.prototype.lastIndexOf = function lastIndexOf(
          val,
          byteOffset,
          encoding
        ) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
        };

        function hexWrite(buf, string, offset, length) {
          offset = Number(offset) || 0;
          const remaining = buf.length - offset;
          if (!length) {
            length = remaining;
          } else {
            length = Number(length);
            if (length > remaining) {
              length = remaining;
            }
          }

          const strLen = string.length;

          if (length > strLen / 2) {
            length = strLen / 2;
          }
          let i;
          for (i = 0; i < length; ++i) {
            const parsed = parseInt(string.substr(i * 2, 2), 16);
            if (numberIsNaN(parsed)) return i;
            buf[offset + i] = parsed;
          }
          return i;
        }

        function utf8Write(buf, string, offset, length) {
          return blitBuffer(
            utf8ToBytes(string, buf.length - offset),
            buf,
            offset,
            length
          );
        }

        function asciiWrite(buf, string, offset, length) {
          return blitBuffer(asciiToBytes(string), buf, offset, length);
        }

        function base64Write(buf, string, offset, length) {
          return blitBuffer(base64ToBytes(string), buf, offset, length);
        }

        function ucs2Write(buf, string, offset, length) {
          return blitBuffer(
            utf16leToBytes(string, buf.length - offset),
            buf,
            offset,
            length
          );
        }

        Buffer.prototype.write = function write(
          string,
          offset,
          length,
          encoding
        ) {
          // Buffer#write(string)
          if (offset === undefined) {
            encoding = "utf8";
            length = this.length;
            offset = 0;
            // Buffer#write(string, encoding)
          } else if (length === undefined && typeof offset === "string") {
            encoding = offset;
            length = this.length;
            offset = 0;
            // Buffer#write(string, offset[, length][, encoding])
          } else if (isFinite(offset)) {
            offset = offset >>> 0;
            if (isFinite(length)) {
              length = length >>> 0;
              if (encoding === undefined) encoding = "utf8";
            } else {
              encoding = length;
              length = undefined;
            }
          } else {
            throw new Error(
              "Buffer.write(string, encoding, offset[, length]) is no longer supported"
            );
          }

          const remaining = this.length - offset;
          if (length === undefined || length > remaining) length = remaining;

          if (
            (string.length > 0 && (length < 0 || offset < 0)) ||
            offset > this.length
          ) {
            throw new RangeError("Attempt to write outside buffer bounds");
          }

          if (!encoding) encoding = "utf8";

          let loweredCase = false;
          for (;;) {
            switch (encoding) {
              case "hex":
                return hexWrite(this, string, offset, length);

              case "utf8":
              case "utf-8":
                return utf8Write(this, string, offset, length);

              case "ascii":
              case "latin1":
              case "binary":
                return asciiWrite(this, string, offset, length);

              case "base64":
                // Warning: maxLength not taken into account in base64Write
                return base64Write(this, string, offset, length);

              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return ucs2Write(this, string, offset, length);

              default:
                if (loweredCase)
                  throw new TypeError("Unknown encoding: " + encoding);
                encoding = ("" + encoding).toLowerCase();
                loweredCase = true;
            }
          }
        };

        Buffer.prototype.toJSON = function toJSON() {
          return {
            type: "Buffer",
            data: Array.prototype.slice.call(this._arr || this, 0),
          };
        };

        function base64Slice(buf, start, end) {
          if (start === 0 && end === buf.length) {
            return base64.fromByteArray(buf);
          } else {
            return base64.fromByteArray(buf.slice(start, end));
          }
        }

        function utf8Slice(buf, start, end) {
          end = Math.min(buf.length, end);
          const res = [];

          let i = start;
          while (i < end) {
            const firstByte = buf[i];
            let codePoint = null;
            let bytesPerSequence =
              firstByte > 0xef
                ? 4
                : firstByte > 0xdf
                ? 3
                : firstByte > 0xbf
                ? 2
                : 1;

            if (i + bytesPerSequence <= end) {
              let secondByte, thirdByte, fourthByte, tempCodePoint;

              switch (bytesPerSequence) {
                case 1:
                  if (firstByte < 0x80) {
                    codePoint = firstByte;
                  }
                  break;
                case 2:
                  secondByte = buf[i + 1];
                  if ((secondByte & 0xc0) === 0x80) {
                    tempCodePoint =
                      ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f);
                    if (tempCodePoint > 0x7f) {
                      codePoint = tempCodePoint;
                    }
                  }
                  break;
                case 3:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];
                  if (
                    (secondByte & 0xc0) === 0x80 &&
                    (thirdByte & 0xc0) === 0x80
                  ) {
                    tempCodePoint =
                      ((firstByte & 0xf) << 0xc) |
                      ((secondByte & 0x3f) << 0x6) |
                      (thirdByte & 0x3f);
                    if (
                      tempCodePoint > 0x7ff &&
                      (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)
                    ) {
                      codePoint = tempCodePoint;
                    }
                  }
                  break;
                case 4:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];
                  fourthByte = buf[i + 3];
                  if (
                    (secondByte & 0xc0) === 0x80 &&
                    (thirdByte & 0xc0) === 0x80 &&
                    (fourthByte & 0xc0) === 0x80
                  ) {
                    tempCodePoint =
                      ((firstByte & 0xf) << 0x12) |
                      ((secondByte & 0x3f) << 0xc) |
                      ((thirdByte & 0x3f) << 0x6) |
                      (fourthByte & 0x3f);
                    if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {
                      codePoint = tempCodePoint;
                    }
                  }
              }
            }

            if (codePoint === null) {
              // we did not generate a valid codePoint so insert a
              // replacement char (U+FFFD) and advance only 1 byte
              codePoint = 0xfffd;
              bytesPerSequence = 1;
            } else if (codePoint > 0xffff) {
              // encode to utf16 (surrogate pair dance)
              codePoint -= 0x10000;
              res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);
              codePoint = 0xdc00 | (codePoint & 0x3ff);
            }

            res.push(codePoint);
            i += bytesPerSequence;
          }

          return decodeCodePointsArray(res);
        }

        // Based on http://stackoverflow.com/a/22747272/680742, the browser with
        // the lowest limit is Chrome, with 0x10000 args.
        // We go 1 magnitude less, for safety
        const MAX_ARGUMENTS_LENGTH = 0x1000;

        function decodeCodePointsArray(codePoints) {
          const len = codePoints.length;
          if (len <= MAX_ARGUMENTS_LENGTH) {
            return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
          }

          // Decode in chunks to avoid "call stack size exceeded".
          let res = "";
          let i = 0;
          while (i < len) {
            res += String.fromCharCode.apply(
              String,
              codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH))
            );
          }
          return res;
        }

        function asciiSlice(buf, start, end) {
          let ret = "";
          end = Math.min(buf.length, end);

          for (let i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i] & 0x7f);
          }
          return ret;
        }

        function latin1Slice(buf, start, end) {
          let ret = "";
          end = Math.min(buf.length, end);

          for (let i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i]);
          }
          return ret;
        }

        function hexSlice(buf, start, end) {
          const len = buf.length;

          if (!start || start < 0) start = 0;
          if (!end || end < 0 || end > len) end = len;

          let out = "";
          for (let i = start; i < end; ++i) {
            out += hexSliceLookupTable[buf[i]];
          }
          return out;
        }

        function utf16leSlice(buf, start, end) {
          const bytes = buf.slice(start, end);
          let res = "";
          // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
          for (let i = 0; i < bytes.length - 1; i += 2) {
            res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
          }
          return res;
        }

        Buffer.prototype.slice = function slice(start, end) {
          const len = this.length;
          start = ~~start;
          end = end === undefined ? len : ~~end;

          if (start < 0) {
            start += len;
            if (start < 0) start = 0;
          } else if (start > len) {
            start = len;
          }

          if (end < 0) {
            end += len;
            if (end < 0) end = 0;
          } else if (end > len) {
            end = len;
          }

          if (end < start) end = start;

          const newBuf = this.subarray(start, end);
          // Return an augmented `Uint8Array` instance
          Object.setPrototypeOf(newBuf, Buffer.prototype);

          return newBuf;
        };

        /*
         * Need to make sure that buffer isn't trying to write out of bounds.
         */
        function checkOffset(offset, ext, length) {
          if (offset % 1 !== 0 || offset < 0)
            throw new RangeError("offset is not uint");
          if (offset + ext > length)
            throw new RangeError("Trying to access beyond buffer length");
        }

        Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE =
          function readUIntLE(offset, byteLength, noAssert) {
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);

            let val = this[offset];
            let mul = 1;
            let i = 0;
            while (++i < byteLength && (mul *= 0x100)) {
              val += this[offset + i] * mul;
            }

            return val;
          };

        Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE =
          function readUIntBE(offset, byteLength, noAssert) {
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;
            if (!noAssert) {
              checkOffset(offset, byteLength, this.length);
            }

            let val = this[offset + --byteLength];
            let mul = 1;
            while (byteLength > 0 && (mul *= 0x100)) {
              val += this[offset + --byteLength] * mul;
            }

            return val;
          };

        Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 =
          function readUInt8(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 1, this.length);
            return this[offset];
          };

        Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE =
          function readUInt16LE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 2, this.length);
            return this[offset] | (this[offset + 1] << 8);
          };

        Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE =
          function readUInt16BE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 2, this.length);
            return (this[offset] << 8) | this[offset + 1];
          };

        Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE =
          function readUInt32LE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 4, this.length);

            return (
              (this[offset] |
                (this[offset + 1] << 8) |
                (this[offset + 2] << 16)) +
              this[offset + 3] * 0x1000000
            );
          };

        Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE =
          function readUInt32BE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 4, this.length);

            return (
              this[offset] * 0x1000000 +
              ((this[offset + 1] << 16) |
                (this[offset + 2] << 8) |
                this[offset + 3])
            );
          };

        Buffer.prototype.readBigUInt64LE = defineBigIntMethod(
          function readBigUInt64LE(offset) {
            offset = offset >>> 0;
            validateNumber(offset, "offset");
            const first = this[offset];
            const last = this[offset + 7];
            if (first === undefined || last === undefined) {
              boundsError(offset, this.length - 8);
            }

            const lo =
              first +
              this[++offset] * 2 ** 8 +
              this[++offset] * 2 ** 16 +
              this[++offset] * 2 ** 24;

            const hi =
              this[++offset] +
              this[++offset] * 2 ** 8 +
              this[++offset] * 2 ** 16 +
              last * 2 ** 24;

            return BigInt(lo) + (BigInt(hi) << BigInt(32));
          }
        );

        Buffer.prototype.readBigUInt64BE = defineBigIntMethod(
          function readBigUInt64BE(offset) {
            offset = offset >>> 0;
            validateNumber(offset, "offset");
            const first = this[offset];
            const last = this[offset + 7];
            if (first === undefined || last === undefined) {
              boundsError(offset, this.length - 8);
            }

            const hi =
              first * 2 ** 24 +
              this[++offset] * 2 ** 16 +
              this[++offset] * 2 ** 8 +
              this[++offset];

            const lo =
              this[++offset] * 2 ** 24 +
              this[++offset] * 2 ** 16 +
              this[++offset] * 2 ** 8 +
              last;

            return (BigInt(hi) << BigInt(32)) + BigInt(lo);
          }
        );

        Buffer.prototype.readIntLE = function readIntLE(
          offset,
          byteLength,
          noAssert
        ) {
          offset = offset >>> 0;
          byteLength = byteLength >>> 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);

          let val = this[offset];
          let mul = 1;
          let i = 0;
          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul;
          }
          mul *= 0x80;

          if (val >= mul) val -= Math.pow(2, 8 * byteLength);

          return val;
        };

        Buffer.prototype.readIntBE = function readIntBE(
          offset,
          byteLength,
          noAssert
        ) {
          offset = offset >>> 0;
          byteLength = byteLength >>> 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);

          let i = byteLength;
          let mul = 1;
          let val = this[offset + --i];
          while (i > 0 && (mul *= 0x100)) {
            val += this[offset + --i] * mul;
          }
          mul *= 0x80;

          if (val >= mul) val -= Math.pow(2, 8 * byteLength);

          return val;
        };

        Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 1, this.length);
          if (!(this[offset] & 0x80)) return this[offset];
          return (0xff - this[offset] + 1) * -1;
        };

        Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 2, this.length);
          const val = this[offset] | (this[offset + 1] << 8);
          return val & 0x8000 ? val | 0xffff0000 : val;
        };

        Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 2, this.length);
          const val = this[offset + 1] | (this[offset] << 8);
          return val & 0x8000 ? val | 0xffff0000 : val;
        };

        Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);

          return (
            this[offset] |
            (this[offset + 1] << 8) |
            (this[offset + 2] << 16) |
            (this[offset + 3] << 24)
          );
        };

        Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);

          return (
            (this[offset] << 24) |
            (this[offset + 1] << 16) |
            (this[offset + 2] << 8) |
            this[offset + 3]
          );
        };

        Buffer.prototype.readBigInt64LE = defineBigIntMethod(
          function readBigInt64LE(offset) {
            offset = offset >>> 0;
            validateNumber(offset, "offset");
            const first = this[offset];
            const last = this[offset + 7];
            if (first === undefined || last === undefined) {
              boundsError(offset, this.length - 8);
            }

            const val =
              this[offset + 4] +
              this[offset + 5] * 2 ** 8 +
              this[offset + 6] * 2 ** 16 +
              (last << 24); // Overflow

            return (
              (BigInt(val) << BigInt(32)) +
              BigInt(
                first +
                  this[++offset] * 2 ** 8 +
                  this[++offset] * 2 ** 16 +
                  this[++offset] * 2 ** 24
              )
            );
          }
        );

        Buffer.prototype.readBigInt64BE = defineBigIntMethod(
          function readBigInt64BE(offset) {
            offset = offset >>> 0;
            validateNumber(offset, "offset");
            const first = this[offset];
            const last = this[offset + 7];
            if (first === undefined || last === undefined) {
              boundsError(offset, this.length - 8);
            }

            const val =
              (first << 24) + // Overflow
              this[++offset] * 2 ** 16 +
              this[++offset] * 2 ** 8 +
              this[++offset];

            return (
              (BigInt(val) << BigInt(32)) +
              BigInt(
                this[++offset] * 2 ** 24 +
                  this[++offset] * 2 ** 16 +
                  this[++offset] * 2 ** 8 +
                  last
              )
            );
          }
        );

        Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return ieee754.read(this, offset, true, 23, 4);
        };

        Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return ieee754.read(this, offset, false, 23, 4);
        };

        Buffer.prototype.readDoubleLE = function readDoubleLE(
          offset,
          noAssert
        ) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 8, this.length);
          return ieee754.read(this, offset, true, 52, 8);
        };

        Buffer.prototype.readDoubleBE = function readDoubleBE(
          offset,
          noAssert
        ) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 8, this.length);
          return ieee754.read(this, offset, false, 52, 8);
        };

        function checkInt(buf, value, offset, ext, max, min) {
          if (!Buffer.isBuffer(buf))
            throw new TypeError('"buffer" argument must be a Buffer instance');
          if (value > max || value < min)
            throw new RangeError('"value" argument is out of bounds');
          if (offset + ext > buf.length)
            throw new RangeError("Index out of range");
        }

        Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE =
          function writeUIntLE(value, offset, byteLength, noAssert) {
            value = +value;
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;
            if (!noAssert) {
              const maxBytes = Math.pow(2, 8 * byteLength) - 1;
              checkInt(this, value, offset, byteLength, maxBytes, 0);
            }

            let mul = 1;
            let i = 0;
            this[offset] = value & 0xff;
            while (++i < byteLength && (mul *= 0x100)) {
              this[offset + i] = (value / mul) & 0xff;
            }

            return offset + byteLength;
          };

        Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE =
          function writeUIntBE(value, offset, byteLength, noAssert) {
            value = +value;
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;
            if (!noAssert) {
              const maxBytes = Math.pow(2, 8 * byteLength) - 1;
              checkInt(this, value, offset, byteLength, maxBytes, 0);
            }

            let i = byteLength - 1;
            let mul = 1;
            this[offset + i] = value & 0xff;
            while (--i >= 0 && (mul *= 0x100)) {
              this[offset + i] = (value / mul) & 0xff;
            }

            return offset + byteLength;
          };

        Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 =
          function writeUInt8(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
            this[offset] = value & 0xff;
            return offset + 1;
          };

        Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE =
          function writeUInt16LE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
            return offset + 2;
          };

        Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE =
          function writeUInt16BE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
            this[offset] = value >>> 8;
            this[offset + 1] = value & 0xff;
            return offset + 2;
          };

        Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE =
          function writeUInt32LE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
            this[offset + 3] = value >>> 24;
            this[offset + 2] = value >>> 16;
            this[offset + 1] = value >>> 8;
            this[offset] = value & 0xff;
            return offset + 4;
          };

        Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE =
          function writeUInt32BE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
            this[offset] = value >>> 24;
            this[offset + 1] = value >>> 16;
            this[offset + 2] = value >>> 8;
            this[offset + 3] = value & 0xff;
            return offset + 4;
          };

        function wrtBigUInt64LE(buf, value, offset, min, max) {
          checkIntBI(value, min, max, buf, offset, 7);

          let lo = Number(value & BigInt(0xffffffff));
          buf[offset++] = lo;
          lo = lo >> 8;
          buf[offset++] = lo;
          lo = lo >> 8;
          buf[offset++] = lo;
          lo = lo >> 8;
          buf[offset++] = lo;
          let hi = Number((value >> BigInt(32)) & BigInt(0xffffffff));
          buf[offset++] = hi;
          hi = hi >> 8;
          buf[offset++] = hi;
          hi = hi >> 8;
          buf[offset++] = hi;
          hi = hi >> 8;
          buf[offset++] = hi;
          return offset;
        }

        function wrtBigUInt64BE(buf, value, offset, min, max) {
          checkIntBI(value, min, max, buf, offset, 7);

          let lo = Number(value & BigInt(0xffffffff));
          buf[offset + 7] = lo;
          lo = lo >> 8;
          buf[offset + 6] = lo;
          lo = lo >> 8;
          buf[offset + 5] = lo;
          lo = lo >> 8;
          buf[offset + 4] = lo;
          let hi = Number((value >> BigInt(32)) & BigInt(0xffffffff));
          buf[offset + 3] = hi;
          hi = hi >> 8;
          buf[offset + 2] = hi;
          hi = hi >> 8;
          buf[offset + 1] = hi;
          hi = hi >> 8;
          buf[offset] = hi;
          return offset + 8;
        }

        Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(
          function writeBigUInt64LE(value, offset = 0) {
            return wrtBigUInt64LE(
              this,
              value,
              offset,
              BigInt(0),
              BigInt("0xffffffffffffffff")
            );
          }
        );

        Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(
          function writeBigUInt64BE(value, offset = 0) {
            return wrtBigUInt64BE(
              this,
              value,
              offset,
              BigInt(0),
              BigInt("0xffffffffffffffff")
            );
          }
        );

        Buffer.prototype.writeIntLE = function writeIntLE(
          value,
          offset,
          byteLength,
          noAssert
        ) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) {
            const limit = Math.pow(2, 8 * byteLength - 1);

            checkInt(this, value, offset, byteLength, limit - 1, -limit);
          }

          let i = 0;
          let mul = 1;
          let sub = 0;
          this[offset] = value & 0xff;
          while (++i < byteLength && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
              sub = 1;
            }
            this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeIntBE = function writeIntBE(
          value,
          offset,
          byteLength,
          noAssert
        ) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) {
            const limit = Math.pow(2, 8 * byteLength - 1);

            checkInt(this, value, offset, byteLength, limit - 1, -limit);
          }

          let i = byteLength - 1;
          let mul = 1;
          let sub = 0;
          this[offset + i] = value & 0xff;
          while (--i >= 0 && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
              sub = 1;
            }
            this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeInt8 = function writeInt8(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
          if (value < 0) value = 0xff + value + 1;
          this[offset] = value & 0xff;
          return offset + 1;
        };

        Buffer.prototype.writeInt16LE = function writeInt16LE(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
          this[offset] = value & 0xff;
          this[offset + 1] = value >>> 8;
          return offset + 2;
        };

        Buffer.prototype.writeInt16BE = function writeInt16BE(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
          this[offset] = value >>> 8;
          this[offset + 1] = value & 0xff;
          return offset + 2;
        };

        Buffer.prototype.writeInt32LE = function writeInt32LE(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert)
            checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
          this[offset] = value & 0xff;
          this[offset + 1] = value >>> 8;
          this[offset + 2] = value >>> 16;
          this[offset + 3] = value >>> 24;
          return offset + 4;
        };

        Buffer.prototype.writeInt32BE = function writeInt32BE(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert)
            checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
          if (value < 0) value = 0xffffffff + value + 1;
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = value & 0xff;
          return offset + 4;
        };

        Buffer.prototype.writeBigInt64LE = defineBigIntMethod(
          function writeBigInt64LE(value, offset = 0) {
            return wrtBigUInt64LE(
              this,
              value,
              offset,
              -BigInt("0x8000000000000000"),
              BigInt("0x7fffffffffffffff")
            );
          }
        );

        Buffer.prototype.writeBigInt64BE = defineBigIntMethod(
          function writeBigInt64BE(value, offset = 0) {
            return wrtBigUInt64BE(
              this,
              value,
              offset,
              -BigInt("0x8000000000000000"),
              BigInt("0x7fffffffffffffff")
            );
          }
        );

        function checkIEEE754(buf, value, offset, ext, max, min) {
          if (offset + ext > buf.length)
            throw new RangeError("Index out of range");
          if (offset < 0) throw new RangeError("Index out of range");
        }

        function writeFloat(buf, value, offset, littleEndian, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) {
            checkIEEE754(
              buf,
              value,
              offset,
              4,
              3.4028234663852886e38,
              -3.4028234663852886e38
            );
          }
          ieee754.write(buf, value, offset, littleEndian, 23, 4);
          return offset + 4;
        }

        Buffer.prototype.writeFloatLE = function writeFloatLE(
          value,
          offset,
          noAssert
        ) {
          return writeFloat(this, value, offset, true, noAssert);
        };

        Buffer.prototype.writeFloatBE = function writeFloatBE(
          value,
          offset,
          noAssert
        ) {
          return writeFloat(this, value, offset, false, noAssert);
        };

        function writeDouble(buf, value, offset, littleEndian, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) {
            checkIEEE754(
              buf,
              value,
              offset,
              8,
              1.7976931348623157e308,
              -1.7976931348623157e308
            );
          }
          ieee754.write(buf, value, offset, littleEndian, 52, 8);
          return offset + 8;
        }

        Buffer.prototype.writeDoubleLE = function writeDoubleLE(
          value,
          offset,
          noAssert
        ) {
          return writeDouble(this, value, offset, true, noAssert);
        };

        Buffer.prototype.writeDoubleBE = function writeDoubleBE(
          value,
          offset,
          noAssert
        ) {
          return writeDouble(this, value, offset, false, noAssert);
        };

        // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
        Buffer.prototype.copy = function copy(target, targetStart, start, end) {
          if (!Buffer.isBuffer(target))
            throw new TypeError("argument should be a Buffer");
          if (!start) start = 0;
          if (!end && end !== 0) end = this.length;
          if (targetStart >= target.length) targetStart = target.length;
          if (!targetStart) targetStart = 0;
          if (end > 0 && end < start) end = start;

          // Copy 0 bytes; we're done
          if (end === start) return 0;
          if (target.length === 0 || this.length === 0) return 0;

          // Fatal error conditions
          if (targetStart < 0) {
            throw new RangeError("targetStart out of bounds");
          }
          if (start < 0 || start >= this.length)
            throw new RangeError("Index out of range");
          if (end < 0) throw new RangeError("sourceEnd out of bounds");

          // Are we oob?
          if (end > this.length) end = this.length;
          if (target.length - targetStart < end - start) {
            end = target.length - targetStart + start;
          }

          const len = end - start;

          if (
            this === target &&
            typeof Uint8Array.prototype.copyWithin === "function"
          ) {
            // Use built-in when available, missing from IE11
            this.copyWithin(targetStart, start, end);
          } else {
            Uint8Array.prototype.set.call(
              target,
              this.subarray(start, end),
              targetStart
            );
          }

          return len;
        };

        // Usage:
        //    buffer.fill(number[, offset[, end]])
        //    buffer.fill(buffer[, offset[, end]])
        //    buffer.fill(string[, offset[, end]][, encoding])
        Buffer.prototype.fill = function fill(val, start, end, encoding) {
          // Handle string cases:
          if (typeof val === "string") {
            if (typeof start === "string") {
              encoding = start;
              start = 0;
              end = this.length;
            } else if (typeof end === "string") {
              encoding = end;
              end = this.length;
            }
            if (encoding !== undefined && typeof encoding !== "string") {
              throw new TypeError("encoding must be a string");
            }
            if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) {
              throw new TypeError("Unknown encoding: " + encoding);
            }
            if (val.length === 1) {
              const code = val.charCodeAt(0);
              if (
                (encoding === "utf8" && code < 128) ||
                encoding === "latin1"
              ) {
                // Fast path: If `val` fits into a single byte, use that numeric value.
                val = code;
              }
            }
          } else if (typeof val === "number") {
            val = val & 255;
          } else if (typeof val === "boolean") {
            val = Number(val);
          }

          // Invalid ranges are not set to a default, so can range check early.
          if (start < 0 || this.length < start || this.length < end) {
            throw new RangeError("Out of range index");
          }

          if (end <= start) {
            return this;
          }

          start = start >>> 0;
          end = end === undefined ? this.length : end >>> 0;

          if (!val) val = 0;

          let i;
          if (typeof val === "number") {
            for (i = start; i < end; ++i) {
              this[i] = val;
            }
          } else {
            const bytes = Buffer.isBuffer(val)
              ? val
              : Buffer.from(val, encoding);
            const len = bytes.length;
            if (len === 0) {
              throw new TypeError(
                'The value "' + val + '" is invalid for argument "value"'
              );
            }
            for (i = 0; i < end - start; ++i) {
              this[i + start] = bytes[i % len];
            }
          }

          return this;
        };

        // CUSTOM ERRORS
        // =============

        // Simplified versions from Node, changed for Buffer-only usage
        const errors = {};
        function E(sym, getMessage, Base) {
          errors[sym] = class NodeError extends Base {
            constructor() {
              super();

              Object.defineProperty(this, "message", {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true,
              });

              // Add the error code to the name to include it in the stack trace.
              this.name = `${this.name} [${sym}]`;
              // Access the stack to generate the error message including the error code
              // from the name.
              this.stack; // eslint-disable-line no-unused-expressions
              // Reset the name to the actual name.
              delete this.name;
            }

            get code() {
              return sym;
            }

            set code(value) {
              Object.defineProperty(this, "code", {
                configurable: true,
                enumerable: true,
                value,
                writable: true,
              });
            }

            toString() {
              return `${this.name} [${sym}]: ${this.message}`;
            }
          };
        }

        E(
          "ERR_BUFFER_OUT_OF_BOUNDS",
          function (name) {
            if (name) {
              return `${name} is outside of buffer bounds`;
            }

            return "Attempt to access memory outside buffer bounds";
          },
          RangeError
        );
        E(
          "ERR_INVALID_ARG_TYPE",
          function (name, actual) {
            return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
          },
          TypeError
        );
        E(
          "ERR_OUT_OF_RANGE",
          function (str, range, input) {
            let msg = `The value of "${str}" is out of range.`;
            let received = input;
            if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
              received = addNumericalSeparator(String(input));
            } else if (typeof input === "bigint") {
              received = String(input);
              if (
                input > BigInt(2) ** BigInt(32) ||
                input < -(BigInt(2) ** BigInt(32))
              ) {
                received = addNumericalSeparator(received);
              }
              received += "n";
            }
            msg += ` It must be ${range}. Received ${received}`;
            return msg;
          },
          RangeError
        );

        function addNumericalSeparator(val) {
          let res = "";
          let i = val.length;
          const start = val[0] === "-" ? 1 : 0;
          for (; i >= start + 4; i -= 3) {
            res = `_${val.slice(i - 3, i)}${res}`;
          }
          return `${val.slice(0, i)}${res}`;
        }

        // CHECK FUNCTIONS
        // ===============

        function checkBounds(buf, offset, byteLength) {
          validateNumber(offset, "offset");
          if (
            buf[offset] === undefined ||
            buf[offset + byteLength] === undefined
          ) {
            boundsError(offset, buf.length - (byteLength + 1));
          }
        }

        function checkIntBI(value, min, max, buf, offset, byteLength) {
          if (value > max || value < min) {
            const n = typeof min === "bigint" ? "n" : "";
            let range;
            if (byteLength > 3) {
              if (min === 0 || min === BigInt(0)) {
                range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
              } else {
                range =
                  `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
                  `${(byteLength + 1) * 8 - 1}${n}`;
              }
            } else {
              range = `>= ${min}${n} and <= ${max}${n}`;
            }
            throw new errors.ERR_OUT_OF_RANGE("value", range, value);
          }
          checkBounds(buf, offset, byteLength);
        }

        function validateNumber(value, name) {
          if (typeof value !== "number") {
            throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
          }
        }

        function boundsError(value, length, type) {
          if (Math.floor(value) !== value) {
            validateNumber(value, type);
            throw new errors.ERR_OUT_OF_RANGE(
              type || "offset",
              "an integer",
              value
            );
          }

          if (length < 0) {
            throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
          }

          throw new errors.ERR_OUT_OF_RANGE(
            type || "offset",
            `>= ${type ? 1 : 0} and <= ${length}`,
            value
          );
        }

        // HELPER FUNCTIONS
        // ================

        const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

        function base64clean(str) {
          // Node takes equal signs as end of the Base64 encoding
          str = str.split("=")[0];
          // Node strips out invalid characters like \n and \t from the string, base64-js does not
          str = str.trim().replace(INVALID_BASE64_RE, "");
          // Node converts strings with length < 2 to ''
          if (str.length < 2) return "";
          // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
          while (str.length % 4 !== 0) {
            str = str + "=";
          }
          return str;
        }

        function utf8ToBytes(string, units) {
          units = units || Infinity;
          let codePoint;
          const length = string.length;
          let leadSurrogate = null;
          const bytes = [];

          for (let i = 0; i < length; ++i) {
            codePoint = string.charCodeAt(i);

            // is surrogate component
            if (codePoint > 0xd7ff && codePoint < 0xe000) {
              // last char was a lead
              if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xdbff) {
                  // unexpected trail
                  if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                  continue;
                } else if (i + 1 === length) {
                  // unpaired lead
                  if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                  continue;
                }

                // valid lead
                leadSurrogate = codePoint;

                continue;
              }

              // 2 leads in a row
              if (codePoint < 0xdc00) {
                if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                leadSurrogate = codePoint;
                continue;
              }

              // valid surrogate pair
              codePoint =
                (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) +
                0x10000;
            } else if (leadSurrogate) {
              // valid bmp char, but last char was a lead
              if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
            }

            leadSurrogate = null;

            // encode utf8
            if (codePoint < 0x80) {
              if ((units -= 1) < 0) break;
              bytes.push(codePoint);
            } else if (codePoint < 0x800) {
              if ((units -= 2) < 0) break;
              bytes.push((codePoint >> 0x6) | 0xc0, (codePoint & 0x3f) | 0x80);
            } else if (codePoint < 0x10000) {
              if ((units -= 3) < 0) break;
              bytes.push(
                (codePoint >> 0xc) | 0xe0,
                ((codePoint >> 0x6) & 0x3f) | 0x80,
                (codePoint & 0x3f) | 0x80
              );
            } else if (codePoint < 0x110000) {
              if ((units -= 4) < 0) break;
              bytes.push(
                (codePoint >> 0x12) | 0xf0,
                ((codePoint >> 0xc) & 0x3f) | 0x80,
                ((codePoint >> 0x6) & 0x3f) | 0x80,
                (codePoint & 0x3f) | 0x80
              );
            } else {
              throw new Error("Invalid code point");
            }
          }

          return bytes;
        }

        function asciiToBytes(str) {
          const byteArray = [];
          for (let i = 0; i < str.length; ++i) {
            // Node's code seems to be doing this and not & 0x7F..
            byteArray.push(str.charCodeAt(i) & 0xff);
          }
          return byteArray;
        }

        function utf16leToBytes(str, units) {
          let c, hi, lo;
          const byteArray = [];
          for (let i = 0; i < str.length; ++i) {
            if ((units -= 2) < 0) break;

            c = str.charCodeAt(i);
            hi = c >> 8;
            lo = c % 256;
            byteArray.push(lo);
            byteArray.push(hi);
          }

          return byteArray;
        }

        function base64ToBytes(str) {
          return base64.toByteArray(base64clean(str));
        }

        function blitBuffer(src, dst, offset, length) {
          let i;
          for (i = 0; i < length; ++i) {
            if (i + offset >= dst.length || i >= src.length) break;
            dst[i + offset] = src[i];
          }
          return i;
        }

        // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
        // the `instanceof` check but they should be treated as of that type.
        // See: https://github.com/feross/buffer/issues/166
        function isInstance(obj, type) {
          return (
            obj instanceof type ||
            (obj != null &&
              obj.constructor != null &&
              obj.constructor.name != null &&
              obj.constructor.name === type.name)
          );
        }
        function numberIsNaN(obj) {
          // For IE11 support
          return obj !== obj; // eslint-disable-line no-self-compare
        }

        // Create lookup table for `toString('hex')`
        // See: https://github.com/feross/buffer/issues/219
        const hexSliceLookupTable = (function () {
          const alphabet = "0123456789abcdef";
          const table = new Array(256);
          for (let i = 0; i < 16; ++i) {
            const i16 = i * 16;
            for (let j = 0; j < 16; ++j) {
              table[i16 + j] = alphabet[i] + alphabet[j];
            }
          }
          return table;
        })();

        // Return not function with Error if BigInt not supported
        function defineBigIntMethod(fn) {
          return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
        }

        function BufferBigIntNotDefined() {
          throw new Error("BigInt not supported");
        }

        /***/
      },

    /***/ "../node_modules/ieee754/index.js":
      /*!****************************************!*\
  !*** ../node_modules/ieee754/index.js ***!
  \****************************************/
      /***/ (__unused_webpack_module, exports) => {
        /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
        exports.read = function (buffer, offset, isLE, mLen, nBytes) {
          var e, m;
          var eLen = nBytes * 8 - mLen - 1;
          var eMax = (1 << eLen) - 1;
          var eBias = eMax >> 1;
          var nBits = -7;
          var i = isLE ? nBytes - 1 : 0;
          var d = isLE ? -1 : 1;
          var s = buffer[offset + i];

          i += d;

          e = s & ((1 << -nBits) - 1);
          s >>= -nBits;
          nBits += eLen;
          for (
            ;
            nBits > 0;
            e = e * 256 + buffer[offset + i], i += d, nBits -= 8
          ) {}

          m = e & ((1 << -nBits) - 1);
          e >>= -nBits;
          nBits += mLen;
          for (
            ;
            nBits > 0;
            m = m * 256 + buffer[offset + i], i += d, nBits -= 8
          ) {}

          if (e === 0) {
            e = 1 - eBias;
          } else if (e === eMax) {
            return m ? NaN : (s ? -1 : 1) * Infinity;
          } else {
            m = m + Math.pow(2, mLen);
            e = e - eBias;
          }
          return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
        };

        exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
          var e, m, c;
          var eLen = nBytes * 8 - mLen - 1;
          var eMax = (1 << eLen) - 1;
          var eBias = eMax >> 1;
          var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
          var i = isLE ? 0 : nBytes - 1;
          var d = isLE ? 1 : -1;
          var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

          value = Math.abs(value);

          if (isNaN(value) || value === Infinity) {
            m = isNaN(value) ? 1 : 0;
            e = eMax;
          } else {
            e = Math.floor(Math.log(value) / Math.LN2);
            if (value * (c = Math.pow(2, -e)) < 1) {
              e--;
              c *= 2;
            }
            if (e + eBias >= 1) {
              value += rt / c;
            } else {
              value += rt * Math.pow(2, 1 - eBias);
            }
            if (value * c >= 2) {
              e++;
              c /= 2;
            }

            if (e + eBias >= eMax) {
              m = 0;
              e = eMax;
            } else if (e + eBias >= 1) {
              m = (value * c - 1) * Math.pow(2, mLen);
              e = e + eBias;
            } else {
              m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
              e = 0;
            }
          }

          for (
            ;
            mLen >= 8;
            buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8
          ) {}

          e = (e << mLen) | m;
          eLen += mLen;
          for (
            ;
            eLen > 0;
            buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8
          ) {}

          buffer[offset + i - d] |= s * 128;
        };

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/NotificationFactories.js":
      /*!************************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/NotificationFactories.js ***!
  \************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ COMPLETE_NOTIFICATION: () =>
            /* binding */ COMPLETE_NOTIFICATION,
          /* harmony export */ createNotification: () =>
            /* binding */ createNotification,
          /* harmony export */ errorNotification: () =>
            /* binding */ errorNotification,
          /* harmony export */ nextNotification: () =>
            /* binding */ nextNotification,
          /* harmony export */
        });
        var COMPLETE_NOTIFICATION = (function () {
          return createNotification("C", undefined, undefined);
        })();
        function errorNotification(error) {
          return createNotification("E", undefined, error);
        }
        function nextNotification(value) {
          return createNotification("N", value, undefined);
        }
        function createNotification(kind, value, error) {
          return {
            kind: kind,
            value: value,
            error: error,
          };
        }
        //# sourceMappingURL=NotificationFactories.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/Observable.js":
      /*!*************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/Observable.js ***!
  \*************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ Observable: () => /* binding */ Observable,
          /* harmony export */
        });
        /* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./Subscriber */ "../node_modules/rxjs/dist/esm5/internal/Subscriber.js"
          );
        /* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! ./Subscription */ "../node_modules/rxjs/dist/esm5/internal/Subscription.js"
          );
        /* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./symbol/observable */ "../node_modules/rxjs/dist/esm5/internal/symbol/observable.js"
          );
        /* harmony import */ var _util_pipe__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ./util/pipe */ "../node_modules/rxjs/dist/esm5/internal/util/pipe.js"
          );
        /* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ./config */ "../node_modules/rxjs/dist/esm5/internal/config.js"
          );
        /* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! ./util/isFunction */ "../node_modules/rxjs/dist/esm5/internal/util/isFunction.js"
          );
        /* harmony import */ var _util_errorContext__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./util/errorContext */ "../node_modules/rxjs/dist/esm5/internal/util/errorContext.js"
          );

        var Observable = (function () {
          function Observable(subscribe) {
            if (subscribe) {
              this._subscribe = subscribe;
            }
          }
          Observable.prototype.lift = function (operator) {
            var observable = new Observable();
            observable.source = this;
            observable.operator = operator;
            return observable;
          };
          Observable.prototype.subscribe = function (
            observerOrNext,
            error,
            complete
          ) {
            var _this = this;
            var subscriber = isSubscriber(observerOrNext)
              ? observerOrNext
              : new _Subscriber__WEBPACK_IMPORTED_MODULE_0__.SafeSubscriber(
                  observerOrNext,
                  error,
                  complete
                );
            (0, _util_errorContext__WEBPACK_IMPORTED_MODULE_1__.errorContext)(
              function () {
                var _a = _this,
                  operator = _a.operator,
                  source = _a.source;
                subscriber.add(
                  operator
                    ? operator.call(subscriber, source)
                    : source
                    ? _this._subscribe(subscriber)
                    : _this._trySubscribe(subscriber)
                );
              }
            );
            return subscriber;
          };
          Observable.prototype._trySubscribe = function (sink) {
            try {
              return this._subscribe(sink);
            } catch (err) {
              sink.error(err);
            }
          };
          Observable.prototype.forEach = function (next, promiseCtor) {
            var _this = this;
            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
              var subscriber =
                new _Subscriber__WEBPACK_IMPORTED_MODULE_0__.SafeSubscriber({
                  next: function (value) {
                    try {
                      next(value);
                    } catch (err) {
                      reject(err);
                      subscriber.unsubscribe();
                    }
                  },
                  error: reject,
                  complete: resolve,
                });
              _this.subscribe(subscriber);
            });
          };
          Observable.prototype._subscribe = function (subscriber) {
            var _a;
            return (_a = this.source) === null || _a === void 0
              ? void 0
              : _a.subscribe(subscriber);
          };
          Observable.prototype[
            _symbol_observable__WEBPACK_IMPORTED_MODULE_2__.observable
          ] = function () {
            return this;
          };
          Observable.prototype.pipe = function () {
            var operations = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              operations[_i] = arguments[_i];
            }
            return (0, _util_pipe__WEBPACK_IMPORTED_MODULE_3__.pipeFromArray)(
              operations
            )(this);
          };
          Observable.prototype.toPromise = function (promiseCtor) {
            var _this = this;
            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
              var value;
              _this.subscribe(
                function (x) {
                  return (value = x);
                },
                function (err) {
                  return reject(err);
                },
                function () {
                  return resolve(value);
                }
              );
            });
          };
          Observable.create = function (subscribe) {
            return new Observable(subscribe);
          };
          return Observable;
        })();

        function getPromiseCtor(promiseCtor) {
          var _a;
          return (_a =
            promiseCtor !== null && promiseCtor !== void 0
              ? promiseCtor
              : _config__WEBPACK_IMPORTED_MODULE_4__.config.Promise) !== null &&
            _a !== void 0
            ? _a
            : Promise;
        }
        function isObserver(value) {
          return (
            value &&
            (0, _util_isFunction__WEBPACK_IMPORTED_MODULE_5__.isFunction)(
              value.next
            ) &&
            (0, _util_isFunction__WEBPACK_IMPORTED_MODULE_5__.isFunction)(
              value.error
            ) &&
            (0, _util_isFunction__WEBPACK_IMPORTED_MODULE_5__.isFunction)(
              value.complete
            )
          );
        }
        function isSubscriber(value) {
          return (
            (value &&
              value instanceof
                _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber) ||
            (isObserver(value) &&
              (0, _Subscription__WEBPACK_IMPORTED_MODULE_6__.isSubscription)(
                value
              ))
          );
        }
        //# sourceMappingURL=Observable.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/Subject.js":
      /*!**********************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/Subject.js ***!
  \**********************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ AnonymousSubject: () =>
            /* binding */ AnonymousSubject,
          /* harmony export */ Subject: () => /* binding */ Subject,
          /* harmony export */
        });
        /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! tslib */ "../node_modules/tslib/tslib.es6.js"
          );
        /* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! ./Observable */ "../node_modules/rxjs/dist/esm5/internal/Observable.js"
          );
        /* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ./Subscription */ "../node_modules/rxjs/dist/esm5/internal/Subscription.js"
          );
        /* harmony import */ var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./util/ObjectUnsubscribedError */ "../node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js"
          );
        /* harmony import */ var _util_arrRemove__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ./util/arrRemove */ "../node_modules/rxjs/dist/esm5/internal/util/arrRemove.js"
          );
        /* harmony import */ var _util_errorContext__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./util/errorContext */ "../node_modules/rxjs/dist/esm5/internal/util/errorContext.js"
          );

        var Subject = (function (_super) {
          (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Subject, _super);
          function Subject() {
            var _this = _super.call(this) || this;
            _this.closed = false;
            _this.currentObservers = null;
            _this.observers = [];
            _this.isStopped = false;
            _this.hasError = false;
            _this.thrownError = null;
            return _this;
          }
          Subject.prototype.lift = function (operator) {
            var subject = new AnonymousSubject(this, this);
            subject.operator = operator;
            return subject;
          };
          Subject.prototype._throwIfClosed = function () {
            if (this.closed) {
              throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__.ObjectUnsubscribedError();
            }
          };
          Subject.prototype.next = function (value) {
            var _this = this;
            (0, _util_errorContext__WEBPACK_IMPORTED_MODULE_2__.errorContext)(
              function () {
                var e_1, _a;
                _this._throwIfClosed();
                if (!_this.isStopped) {
                  if (!_this.currentObservers) {
                    _this.currentObservers = Array.from(_this.observers);
                  }
                  try {
                    for (
                      var _b = (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__values)(
                          _this.currentObservers
                        ),
                        _c = _b.next();
                      !_c.done;
                      _c = _b.next()
                    ) {
                      var observer = _c.value;
                      observer.next(value);
                    }
                  } catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                  } finally {
                    try {
                      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    } finally {
                      if (e_1) throw e_1.error;
                    }
                  }
                }
              }
            );
          };
          Subject.prototype.error = function (err) {
            var _this = this;
            (0, _util_errorContext__WEBPACK_IMPORTED_MODULE_2__.errorContext)(
              function () {
                _this._throwIfClosed();
                if (!_this.isStopped) {
                  _this.hasError = _this.isStopped = true;
                  _this.thrownError = err;
                  var observers = _this.observers;
                  while (observers.length) {
                    observers.shift().error(err);
                  }
                }
              }
            );
          };
          Subject.prototype.complete = function () {
            var _this = this;
            (0, _util_errorContext__WEBPACK_IMPORTED_MODULE_2__.errorContext)(
              function () {
                _this._throwIfClosed();
                if (!_this.isStopped) {
                  _this.isStopped = true;
                  var observers = _this.observers;
                  while (observers.length) {
                    observers.shift().complete();
                  }
                }
              }
            );
          };
          Subject.prototype.unsubscribe = function () {
            this.isStopped = this.closed = true;
            this.observers = this.currentObservers = null;
          };
          Object.defineProperty(Subject.prototype, "observed", {
            get: function () {
              var _a;
              return (
                ((_a = this.observers) === null || _a === void 0
                  ? void 0
                  : _a.length) > 0
              );
            },
            enumerable: false,
            configurable: true,
          });
          Subject.prototype._trySubscribe = function (subscriber) {
            this._throwIfClosed();
            return _super.prototype._trySubscribe.call(this, subscriber);
          };
          Subject.prototype._subscribe = function (subscriber) {
            this._throwIfClosed();
            this._checkFinalizedStatuses(subscriber);
            return this._innerSubscribe(subscriber);
          };
          Subject.prototype._innerSubscribe = function (subscriber) {
            var _this = this;
            var _a = this,
              hasError = _a.hasError,
              isStopped = _a.isStopped,
              observers = _a.observers;
            if (hasError || isStopped) {
              return _Subscription__WEBPACK_IMPORTED_MODULE_3__.EMPTY_SUBSCRIPTION;
            }
            this.currentObservers = null;
            observers.push(subscriber);
            return new _Subscription__WEBPACK_IMPORTED_MODULE_3__.Subscription(
              function () {
                _this.currentObservers = null;
                (0, _util_arrRemove__WEBPACK_IMPORTED_MODULE_4__.arrRemove)(
                  observers,
                  subscriber
                );
              }
            );
          };
          Subject.prototype._checkFinalizedStatuses = function (subscriber) {
            var _a = this,
              hasError = _a.hasError,
              thrownError = _a.thrownError,
              isStopped = _a.isStopped;
            if (hasError) {
              subscriber.error(thrownError);
            } else if (isStopped) {
              subscriber.complete();
            }
          };
          Subject.prototype.asObservable = function () {
            var observable =
              new _Observable__WEBPACK_IMPORTED_MODULE_5__.Observable();
            observable.source = this;
            return observable;
          };
          Subject.create = function (destination, source) {
            return new AnonymousSubject(destination, source);
          };
          return Subject;
        })(_Observable__WEBPACK_IMPORTED_MODULE_5__.Observable);

        var AnonymousSubject = (function (_super) {
          (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(
            AnonymousSubject,
            _super
          );
          function AnonymousSubject(destination, source) {
            var _this = _super.call(this) || this;
            _this.destination = destination;
            _this.source = source;
            return _this;
          }
          AnonymousSubject.prototype.next = function (value) {
            var _a, _b;
            (_b =
              (_a = this.destination) === null || _a === void 0
                ? void 0
                : _a.next) === null || _b === void 0
              ? void 0
              : _b.call(_a, value);
          };
          AnonymousSubject.prototype.error = function (err) {
            var _a, _b;
            (_b =
              (_a = this.destination) === null || _a === void 0
                ? void 0
                : _a.error) === null || _b === void 0
              ? void 0
              : _b.call(_a, err);
          };
          AnonymousSubject.prototype.complete = function () {
            var _a, _b;
            (_b =
              (_a = this.destination) === null || _a === void 0
                ? void 0
                : _a.complete) === null || _b === void 0
              ? void 0
              : _b.call(_a);
          };
          AnonymousSubject.prototype._subscribe = function (subscriber) {
            var _a, _b;
            return (_b =
              (_a = this.source) === null || _a === void 0
                ? void 0
                : _a.subscribe(subscriber)) !== null && _b !== void 0
              ? _b
              : _Subscription__WEBPACK_IMPORTED_MODULE_3__.EMPTY_SUBSCRIPTION;
          };
          return AnonymousSubject;
        })(Subject);

        //# sourceMappingURL=Subject.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/Subscriber.js":
      /*!*************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/Subscriber.js ***!
  \*************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ EMPTY_OBSERVER: () =>
            /* binding */ EMPTY_OBSERVER,
          /* harmony export */ SafeSubscriber: () =>
            /* binding */ SafeSubscriber,
          /* harmony export */ Subscriber: () => /* binding */ Subscriber,
          /* harmony export */
        });
        /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! tslib */ "../node_modules/tslib/tslib.es6.js"
          );
        /* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ./util/isFunction */ "../node_modules/rxjs/dist/esm5/internal/util/isFunction.js"
          );
        /* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./Subscription */ "../node_modules/rxjs/dist/esm5/internal/Subscription.js"
          );
        /* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ./config */ "../node_modules/rxjs/dist/esm5/internal/config.js"
          );
        /* harmony import */ var _util_reportUnhandledError__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! ./util/reportUnhandledError */ "../node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js"
          );
        /* harmony import */ var _util_noop__WEBPACK_IMPORTED_MODULE_8__ =
          __webpack_require__(
            /*! ./util/noop */ "../node_modules/rxjs/dist/esm5/internal/util/noop.js"
          );
        /* harmony import */ var _NotificationFactories__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./NotificationFactories */ "../node_modules/rxjs/dist/esm5/internal/NotificationFactories.js"
          );
        /* harmony import */ var _scheduler_timeoutProvider__WEBPACK_IMPORTED_MODULE_7__ =
          __webpack_require__(
            /*! ./scheduler/timeoutProvider */ "../node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js"
          );
        /* harmony import */ var _util_errorContext__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! ./util/errorContext */ "../node_modules/rxjs/dist/esm5/internal/util/errorContext.js"
          );

        var Subscriber = (function (_super) {
          (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Subscriber, _super);
          function Subscriber(destination) {
            var _this = _super.call(this) || this;
            _this.isStopped = false;
            if (destination) {
              _this.destination = destination;
              if (
                (0, _Subscription__WEBPACK_IMPORTED_MODULE_1__.isSubscription)(
                  destination
                )
              ) {
                destination.add(_this);
              }
            } else {
              _this.destination = EMPTY_OBSERVER;
            }
            return _this;
          }
          Subscriber.create = function (next, error, complete) {
            return new SafeSubscriber(next, error, complete);
          };
          Subscriber.prototype.next = function (value) {
            if (this.isStopped) {
              handleStoppedNotification(
                (0,
                _NotificationFactories__WEBPACK_IMPORTED_MODULE_2__.nextNotification)(
                  value
                ),
                this
              );
            } else {
              this._next(value);
            }
          };
          Subscriber.prototype.error = function (err) {
            if (this.isStopped) {
              handleStoppedNotification(
                (0,
                _NotificationFactories__WEBPACK_IMPORTED_MODULE_2__.errorNotification)(
                  err
                ),
                this
              );
            } else {
              this.isStopped = true;
              this._error(err);
            }
          };
          Subscriber.prototype.complete = function () {
            if (this.isStopped) {
              handleStoppedNotification(
                _NotificationFactories__WEBPACK_IMPORTED_MODULE_2__.COMPLETE_NOTIFICATION,
                this
              );
            } else {
              this.isStopped = true;
              this._complete();
            }
          };
          Subscriber.prototype.unsubscribe = function () {
            if (!this.closed) {
              this.isStopped = true;
              _super.prototype.unsubscribe.call(this);
              this.destination = null;
            }
          };
          Subscriber.prototype._next = function (value) {
            this.destination.next(value);
          };
          Subscriber.prototype._error = function (err) {
            try {
              this.destination.error(err);
            } finally {
              this.unsubscribe();
            }
          };
          Subscriber.prototype._complete = function () {
            try {
              this.destination.complete();
            } finally {
              this.unsubscribe();
            }
          };
          return Subscriber;
        })(_Subscription__WEBPACK_IMPORTED_MODULE_1__.Subscription);

        var _bind = Function.prototype.bind;
        function bind(fn, thisArg) {
          return _bind.call(fn, thisArg);
        }
        var ConsumerObserver = (function () {
          function ConsumerObserver(partialObserver) {
            this.partialObserver = partialObserver;
          }
          ConsumerObserver.prototype.next = function (value) {
            var partialObserver = this.partialObserver;
            if (partialObserver.next) {
              try {
                partialObserver.next(value);
              } catch (error) {
                handleUnhandledError(error);
              }
            }
          };
          ConsumerObserver.prototype.error = function (err) {
            var partialObserver = this.partialObserver;
            if (partialObserver.error) {
              try {
                partialObserver.error(err);
              } catch (error) {
                handleUnhandledError(error);
              }
            } else {
              handleUnhandledError(err);
            }
          };
          ConsumerObserver.prototype.complete = function () {
            var partialObserver = this.partialObserver;
            if (partialObserver.complete) {
              try {
                partialObserver.complete();
              } catch (error) {
                handleUnhandledError(error);
              }
            }
          };
          return ConsumerObserver;
        })();
        var SafeSubscriber = (function (_super) {
          (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(
            SafeSubscriber,
            _super
          );
          function SafeSubscriber(observerOrNext, error, complete) {
            var _this = _super.call(this) || this;
            var partialObserver;
            if (
              (0, _util_isFunction__WEBPACK_IMPORTED_MODULE_3__.isFunction)(
                observerOrNext
              ) ||
              !observerOrNext
            ) {
              partialObserver = {
                next:
                  observerOrNext !== null && observerOrNext !== void 0
                    ? observerOrNext
                    : undefined,
                error: error !== null && error !== void 0 ? error : undefined,
                complete:
                  complete !== null && complete !== void 0
                    ? complete
                    : undefined,
              };
            } else {
              var context_1;
              if (
                _this &&
                _config__WEBPACK_IMPORTED_MODULE_4__.config
                  .useDeprecatedNextContext
              ) {
                context_1 = Object.create(observerOrNext);
                context_1.unsubscribe = function () {
                  return _this.unsubscribe();
                };
                partialObserver = {
                  next:
                    observerOrNext.next && bind(observerOrNext.next, context_1),
                  error:
                    observerOrNext.error &&
                    bind(observerOrNext.error, context_1),
                  complete:
                    observerOrNext.complete &&
                    bind(observerOrNext.complete, context_1),
                };
              } else {
                partialObserver = observerOrNext;
              }
            }
            _this.destination = new ConsumerObserver(partialObserver);
            return _this;
          }
          return SafeSubscriber;
        })(Subscriber);

        function handleUnhandledError(error) {
          if (
            _config__WEBPACK_IMPORTED_MODULE_4__.config
              .useDeprecatedSynchronousErrorHandling
          ) {
            (0, _util_errorContext__WEBPACK_IMPORTED_MODULE_5__.captureError)(
              error
            );
          } else {
            (0,
            _util_reportUnhandledError__WEBPACK_IMPORTED_MODULE_6__.reportUnhandledError)(
              error
            );
          }
        }
        function defaultErrorHandler(err) {
          throw err;
        }
        function handleStoppedNotification(notification, subscriber) {
          var onStoppedNotification =
            _config__WEBPACK_IMPORTED_MODULE_4__.config.onStoppedNotification;
          onStoppedNotification &&
            _scheduler_timeoutProvider__WEBPACK_IMPORTED_MODULE_7__.timeoutProvider.setTimeout(
              function () {
                return onStoppedNotification(notification, subscriber);
              }
            );
        }
        var EMPTY_OBSERVER = {
          closed: true,
          next: _util_noop__WEBPACK_IMPORTED_MODULE_8__.noop,
          error: defaultErrorHandler,
          complete: _util_noop__WEBPACK_IMPORTED_MODULE_8__.noop,
        };
        //# sourceMappingURL=Subscriber.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/Subscription.js":
      /*!***************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/Subscription.js ***!
  \***************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ EMPTY_SUBSCRIPTION: () =>
            /* binding */ EMPTY_SUBSCRIPTION,
          /* harmony export */ Subscription: () => /* binding */ Subscription,
          /* harmony export */ isSubscription: () =>
            /* binding */ isSubscription,
          /* harmony export */
        });
        /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! tslib */ "../node_modules/tslib/tslib.es6.js"
          );
        /* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./util/isFunction */ "../node_modules/rxjs/dist/esm5/internal/util/isFunction.js"
          );
        /* harmony import */ var _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./util/UnsubscriptionError */ "../node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js"
          );
        /* harmony import */ var _util_arrRemove__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ./util/arrRemove */ "../node_modules/rxjs/dist/esm5/internal/util/arrRemove.js"
          );

        var Subscription = (function () {
          function Subscription(initialTeardown) {
            this.initialTeardown = initialTeardown;
            this.closed = false;
            this._parentage = null;
            this._finalizers = null;
          }
          Subscription.prototype.unsubscribe = function () {
            var e_1, _a, e_2, _b;
            var errors;
            if (!this.closed) {
              this.closed = true;
              var _parentage = this._parentage;
              if (_parentage) {
                this._parentage = null;
                if (Array.isArray(_parentage)) {
                  try {
                    for (
                      var _parentage_1 = (0,
                        tslib__WEBPACK_IMPORTED_MODULE_0__.__values)(
                          _parentage
                        ),
                        _parentage_1_1 = _parentage_1.next();
                      !_parentage_1_1.done;
                      _parentage_1_1 = _parentage_1.next()
                    ) {
                      var parent_1 = _parentage_1_1.value;
                      parent_1.remove(this);
                    }
                  } catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                  } finally {
                    try {
                      if (
                        _parentage_1_1 &&
                        !_parentage_1_1.done &&
                        (_a = _parentage_1.return)
                      )
                        _a.call(_parentage_1);
                    } finally {
                      if (e_1) throw e_1.error;
                    }
                  }
                } else {
                  _parentage.remove(this);
                }
              }
              var initialFinalizer = this.initialTeardown;
              if (
                (0, _util_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(
                  initialFinalizer
                )
              ) {
                try {
                  initialFinalizer();
                } catch (e) {
                  errors =
                    e instanceof
                    _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_2__.UnsubscriptionError
                      ? e.errors
                      : [e];
                }
              }
              var _finalizers = this._finalizers;
              if (_finalizers) {
                this._finalizers = null;
                try {
                  for (
                    var _finalizers_1 = (0,
                      tslib__WEBPACK_IMPORTED_MODULE_0__.__values)(_finalizers),
                      _finalizers_1_1 = _finalizers_1.next();
                    !_finalizers_1_1.done;
                    _finalizers_1_1 = _finalizers_1.next()
                  ) {
                    var finalizer = _finalizers_1_1.value;
                    try {
                      execFinalizer(finalizer);
                    } catch (err) {
                      errors =
                        errors !== null && errors !== void 0 ? errors : [];
                      if (
                        err instanceof
                        _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_2__.UnsubscriptionError
                      ) {
                        errors = (0,
                        tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)(
                          (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)(
                            [],
                            (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(
                              errors
                            )
                          ),
                          (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(
                            err.errors
                          )
                        );
                      } else {
                        errors.push(err);
                      }
                    }
                  }
                } catch (e_2_1) {
                  e_2 = { error: e_2_1 };
                } finally {
                  try {
                    if (
                      _finalizers_1_1 &&
                      !_finalizers_1_1.done &&
                      (_b = _finalizers_1.return)
                    )
                      _b.call(_finalizers_1);
                  } finally {
                    if (e_2) throw e_2.error;
                  }
                }
              }
              if (errors) {
                throw new _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_2__.UnsubscriptionError(
                  errors
                );
              }
            }
          };
          Subscription.prototype.add = function (teardown) {
            var _a;
            if (teardown && teardown !== this) {
              if (this.closed) {
                execFinalizer(teardown);
              } else {
                if (teardown instanceof Subscription) {
                  if (teardown.closed || teardown._hasParent(this)) {
                    return;
                  }
                  teardown._addParent(this);
                }
                (this._finalizers =
                  (_a = this._finalizers) !== null && _a !== void 0
                    ? _a
                    : []).push(teardown);
              }
            }
          };
          Subscription.prototype._hasParent = function (parent) {
            var _parentage = this._parentage;
            return (
              _parentage === parent ||
              (Array.isArray(_parentage) && _parentage.includes(parent))
            );
          };
          Subscription.prototype._addParent = function (parent) {
            var _parentage = this._parentage;
            this._parentage = Array.isArray(_parentage)
              ? (_parentage.push(parent), _parentage)
              : _parentage
              ? [_parentage, parent]
              : parent;
          };
          Subscription.prototype._removeParent = function (parent) {
            var _parentage = this._parentage;
            if (_parentage === parent) {
              this._parentage = null;
            } else if (Array.isArray(_parentage)) {
              (0, _util_arrRemove__WEBPACK_IMPORTED_MODULE_3__.arrRemove)(
                _parentage,
                parent
              );
            }
          };
          Subscription.prototype.remove = function (teardown) {
            var _finalizers = this._finalizers;
            _finalizers &&
              (0, _util_arrRemove__WEBPACK_IMPORTED_MODULE_3__.arrRemove)(
                _finalizers,
                teardown
              );
            if (teardown instanceof Subscription) {
              teardown._removeParent(this);
            }
          };
          Subscription.EMPTY = (function () {
            var empty = new Subscription();
            empty.closed = true;
            return empty;
          })();
          return Subscription;
        })();

        var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
        function isSubscription(value) {
          return (
            value instanceof Subscription ||
            (value &&
              "closed" in value &&
              (0, _util_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(
                value.remove
              ) &&
              (0, _util_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(
                value.add
              ) &&
              (0, _util_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(
                value.unsubscribe
              ))
          );
        }
        function execFinalizer(finalizer) {
          if (
            (0, _util_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(
              finalizer
            )
          ) {
            finalizer();
          } else {
            finalizer.unsubscribe();
          }
        }
        //# sourceMappingURL=Subscription.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/config.js":
      /*!*********************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/config.js ***!
  \*********************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ config: () => /* binding */ config,
          /* harmony export */
        });
        var config = {
          onUnhandledError: null,
          onStoppedNotification: null,
          Promise: undefined,
          useDeprecatedSynchronousErrorHandling: false,
          useDeprecatedNextContext: false,
        };
        //# sourceMappingURL=config.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/lastValueFrom.js":
      /*!****************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/lastValueFrom.js ***!
  \****************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ lastValueFrom: () => /* binding */ lastValueFrom,
          /* harmony export */
        });
        /* harmony import */ var _util_EmptyError__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./util/EmptyError */ "../node_modules/rxjs/dist/esm5/internal/util/EmptyError.js"
          );

        function lastValueFrom(source, config) {
          var hasConfig = typeof config === "object";
          return new Promise(function (resolve, reject) {
            var _hasValue = false;
            var _value;
            source.subscribe({
              next: function (value) {
                _value = value;
                _hasValue = true;
              },
              error: reject,
              complete: function () {
                if (_hasValue) {
                  resolve(_value);
                } else if (hasConfig) {
                  resolve(config.defaultValue);
                } else {
                  reject(
                    new _util_EmptyError__WEBPACK_IMPORTED_MODULE_0__.EmptyError()
                  );
                }
              },
            });
          });
        }
        //# sourceMappingURL=lastValueFrom.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/observable/empty.js":
      /*!*******************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/observable/empty.js ***!
  \*******************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ EMPTY: () => /* binding */ EMPTY,
          /* harmony export */ empty: () => /* binding */ empty,
          /* harmony export */
        });
        /* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../Observable */ "../node_modules/rxjs/dist/esm5/internal/Observable.js"
          );

        var EMPTY = new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(
          function (subscriber) {
            return subscriber.complete();
          }
        );
        function empty(scheduler) {
          return scheduler ? emptyScheduled(scheduler) : EMPTY;
        }
        function emptyScheduled(scheduler) {
          return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(
            function (subscriber) {
              return scheduler.schedule(function () {
                return subscriber.complete();
              });
            }
          );
        }
        //# sourceMappingURL=empty.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/observable/fromEventPattern.js":
      /*!******************************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/observable/fromEventPattern.js ***!
  \******************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ fromEventPattern: () =>
            /* binding */ fromEventPattern,
          /* harmony export */
        });
        /* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../Observable */ "../node_modules/rxjs/dist/esm5/internal/Observable.js"
          );
        /* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../util/isFunction */ "../node_modules/rxjs/dist/esm5/internal/util/isFunction.js"
          );
        /* harmony import */ var _util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../util/mapOneOrManyArgs */ "../node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js"
          );

        function fromEventPattern(addHandler, removeHandler, resultSelector) {
          if (resultSelector) {
            return fromEventPattern(addHandler, removeHandler).pipe(
              (0,
              _util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_0__.mapOneOrManyArgs)(
                resultSelector
              )
            );
          }
          return new _Observable__WEBPACK_IMPORTED_MODULE_1__.Observable(
            function (subscriber) {
              var handler = function () {
                var e = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  e[_i] = arguments[_i];
                }
                return subscriber.next(e.length === 1 ? e[0] : e);
              };
              var retValue = addHandler(handler);
              return (0,
              _util_isFunction__WEBPACK_IMPORTED_MODULE_2__.isFunction)(
                removeHandler
              )
                ? function () {
                    return removeHandler(handler, retValue);
                  }
                : undefined;
            }
          );
        }
        //# sourceMappingURL=fromEventPattern.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js":
      /*!***********************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js ***!
  \***********************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ fromArrayLike: () => /* binding */ fromArrayLike,
          /* harmony export */ fromAsyncIterable: () =>
            /* binding */ fromAsyncIterable,
          /* harmony export */ fromInteropObservable: () =>
            /* binding */ fromInteropObservable,
          /* harmony export */ fromIterable: () => /* binding */ fromIterable,
          /* harmony export */ fromPromise: () => /* binding */ fromPromise,
          /* harmony export */ fromReadableStreamLike: () =>
            /* binding */ fromReadableStreamLike,
          /* harmony export */ innerFrom: () => /* binding */ innerFrom,
          /* harmony export */
        });
        /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_11__ =
          __webpack_require__(
            /*! tslib */ "../node_modules/tslib/tslib.es6.js"
          );
        /* harmony import */ var _util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../util/isArrayLike */ "../node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js"
          );
        /* harmony import */ var _util_isPromise__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../util/isPromise */ "../node_modules/rxjs/dist/esm5/internal/util/isPromise.js"
          );
        /* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../Observable */ "../node_modules/rxjs/dist/esm5/internal/Observable.js"
          );
        /* harmony import */ var _util_isInteropObservable__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../util/isInteropObservable */ "../node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js"
          );
        /* harmony import */ var _util_isAsyncIterable__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ../util/isAsyncIterable */ "../node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js"
          );
        /* harmony import */ var _util_throwUnobservableError__WEBPACK_IMPORTED_MODULE_7__ =
          __webpack_require__(
            /*! ../util/throwUnobservableError */ "../node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js"
          );
        /* harmony import */ var _util_isIterable__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! ../util/isIterable */ "../node_modules/rxjs/dist/esm5/internal/util/isIterable.js"
          );
        /* harmony import */ var _util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! ../util/isReadableStreamLike */ "../node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js"
          );
        /* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_9__ =
          __webpack_require__(
            /*! ../util/isFunction */ "../node_modules/rxjs/dist/esm5/internal/util/isFunction.js"
          );
        /* harmony import */ var _util_reportUnhandledError__WEBPACK_IMPORTED_MODULE_10__ =
          __webpack_require__(
            /*! ../util/reportUnhandledError */ "../node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js"
          );
        /* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_8__ =
          __webpack_require__(
            /*! ../symbol/observable */ "../node_modules/rxjs/dist/esm5/internal/symbol/observable.js"
          );

        function innerFrom(input) {
          if (
            input instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable
          ) {
            return input;
          }
          if (input != null) {
            if (
              (0,
              _util_isInteropObservable__WEBPACK_IMPORTED_MODULE_1__.isInteropObservable)(
                input
              )
            ) {
              return fromInteropObservable(input);
            }
            if (
              (0, _util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__.isArrayLike)(
                input
              )
            ) {
              return fromArrayLike(input);
            }
            if (
              (0, _util_isPromise__WEBPACK_IMPORTED_MODULE_3__.isPromise)(input)
            ) {
              return fromPromise(input);
            }
            if (
              (0,
              _util_isAsyncIterable__WEBPACK_IMPORTED_MODULE_4__.isAsyncIterable)(
                input
              )
            ) {
              return fromAsyncIterable(input);
            }
            if (
              (0, _util_isIterable__WEBPACK_IMPORTED_MODULE_5__.isIterable)(
                input
              )
            ) {
              return fromIterable(input);
            }
            if (
              (0,
              _util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_6__.isReadableStreamLike)(
                input
              )
            ) {
              return fromReadableStreamLike(input);
            }
          }
          throw (0,
          _util_throwUnobservableError__WEBPACK_IMPORTED_MODULE_7__.createInvalidObservableTypeError)(
            input
          );
        }
        function fromInteropObservable(obj) {
          return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(
            function (subscriber) {
              var obs =
                obj[
                  _symbol_observable__WEBPACK_IMPORTED_MODULE_8__.observable
                ]();
              if (
                (0, _util_isFunction__WEBPACK_IMPORTED_MODULE_9__.isFunction)(
                  obs.subscribe
                )
              ) {
                return obs.subscribe(subscriber);
              }
              throw new TypeError(
                "Provided object does not correctly implement Symbol.observable"
              );
            }
          );
        }
        function fromArrayLike(array) {
          return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(
            function (subscriber) {
              for (var i = 0; i < array.length && !subscriber.closed; i++) {
                subscriber.next(array[i]);
              }
              subscriber.complete();
            }
          );
        }
        function fromPromise(promise) {
          return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(
            function (subscriber) {
              promise
                .then(
                  function (value) {
                    if (!subscriber.closed) {
                      subscriber.next(value);
                      subscriber.complete();
                    }
                  },
                  function (err) {
                    return subscriber.error(err);
                  }
                )
                .then(
                  null,
                  _util_reportUnhandledError__WEBPACK_IMPORTED_MODULE_10__.reportUnhandledError
                );
            }
          );
        }
        function fromIterable(iterable) {
          return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(
            function (subscriber) {
              var e_1, _a;
              try {
                for (
                  var iterable_1 = (0,
                    tslib__WEBPACK_IMPORTED_MODULE_11__.__values)(iterable),
                    iterable_1_1 = iterable_1.next();
                  !iterable_1_1.done;
                  iterable_1_1 = iterable_1.next()
                ) {
                  var value = iterable_1_1.value;
                  subscriber.next(value);
                  if (subscriber.closed) {
                    return;
                  }
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (
                    iterable_1_1 &&
                    !iterable_1_1.done &&
                    (_a = iterable_1.return)
                  )
                    _a.call(iterable_1);
                } finally {
                  if (e_1) throw e_1.error;
                }
              }
              subscriber.complete();
            }
          );
        }
        function fromAsyncIterable(asyncIterable) {
          return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(
            function (subscriber) {
              process(asyncIterable, subscriber).catch(function (err) {
                return subscriber.error(err);
              });
            }
          );
        }
        function fromReadableStreamLike(readableStream) {
          return fromAsyncIterable(
            (0,
            _util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_6__.readableStreamLikeToAsyncGenerator)(
              readableStream
            )
          );
        }
        function process(asyncIterable, subscriber) {
          var asyncIterable_1, asyncIterable_1_1;
          var e_2, _a;
          return (0, tslib__WEBPACK_IMPORTED_MODULE_11__.__awaiter)(
            this,
            void 0,
            void 0,
            function () {
              var value, e_2_1;
              return (0, tslib__WEBPACK_IMPORTED_MODULE_11__.__generator)(
                this,
                function (_b) {
                  switch (_b.label) {
                    case 0:
                      _b.trys.push([0, 5, 6, 11]);
                      asyncIterable_1 = (0,
                      tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncValues)(
                        asyncIterable
                      );
                      _b.label = 1;
                    case 1:
                      return [4, asyncIterable_1.next()];
                    case 2:
                      if (
                        !((asyncIterable_1_1 = _b.sent()),
                        !asyncIterable_1_1.done)
                      )
                        return [3, 4];
                      value = asyncIterable_1_1.value;
                      subscriber.next(value);
                      if (subscriber.closed) {
                        return [2];
                      }
                      _b.label = 3;
                    case 3:
                      return [3, 1];
                    case 4:
                      return [3, 11];
                    case 5:
                      e_2_1 = _b.sent();
                      e_2 = { error: e_2_1 };
                      return [3, 11];
                    case 6:
                      _b.trys.push([6, , 9, 10]);
                      if (
                        !(
                          asyncIterable_1_1 &&
                          !asyncIterable_1_1.done &&
                          (_a = asyncIterable_1.return)
                        )
                      )
                        return [3, 8];
                      return [4, _a.call(asyncIterable_1)];
                    case 7:
                      _b.sent();
                      _b.label = 8;
                    case 8:
                      return [3, 10];
                    case 9:
                      if (e_2) throw e_2.error;
                      return [7];
                    case 10:
                      return [7];
                    case 11:
                      subscriber.complete();
                      return [2];
                  }
                }
              );
            }
          );
        }
        //# sourceMappingURL=innerFrom.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/observable/race.js":
      /*!******************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/observable/race.js ***!
  \******************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ race: () => /* binding */ race,
          /* harmony export */ raceInit: () => /* binding */ raceInit,
          /* harmony export */
        });
        /* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../Observable */ "../node_modules/rxjs/dist/esm5/internal/Observable.js"
          );
        /* harmony import */ var _innerFrom__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./innerFrom */ "../node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js"
          );
        /* harmony import */ var _util_argsOrArgArray__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../util/argsOrArgArray */ "../node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js"
          );
        /* harmony import */ var _operators_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../operators/OperatorSubscriber */ "../node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js"
          );

        function race() {
          var sources = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            sources[_i] = arguments[_i];
          }
          sources = (0,
          _util_argsOrArgArray__WEBPACK_IMPORTED_MODULE_0__.argsOrArgArray)(
            sources
          );
          return sources.length === 1
            ? (0, _innerFrom__WEBPACK_IMPORTED_MODULE_1__.innerFrom)(sources[0])
            : new _Observable__WEBPACK_IMPORTED_MODULE_2__.Observable(
                raceInit(sources)
              );
        }
        function raceInit(sources) {
          return function (subscriber) {
            var subscriptions = [];
            var _loop_1 = function (i) {
              subscriptions.push(
                (0, _innerFrom__WEBPACK_IMPORTED_MODULE_1__.innerFrom)(
                  sources[i]
                ).subscribe(
                  (0,
                  _operators_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_3__.createOperatorSubscriber)(
                    subscriber,
                    function (value) {
                      if (subscriptions) {
                        for (var s = 0; s < subscriptions.length; s++) {
                          s !== i && subscriptions[s].unsubscribe();
                        }
                        subscriptions = null;
                      }
                      subscriber.next(value);
                    }
                  )
                )
              );
            };
            for (
              var i = 0;
              subscriptions && !subscriber.closed && i < sources.length;
              i++
            ) {
              _loop_1(i);
            }
          };
        }
        //# sourceMappingURL=race.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js":
      /*!*******************************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js ***!
  \*******************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ OperatorSubscriber: () =>
            /* binding */ OperatorSubscriber,
          /* harmony export */ createOperatorSubscriber: () =>
            /* binding */ createOperatorSubscriber,
          /* harmony export */
        });
        /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! tslib */ "../node_modules/tslib/tslib.es6.js"
          );
        /* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../Subscriber */ "../node_modules/rxjs/dist/esm5/internal/Subscriber.js"
          );

        function createOperatorSubscriber(
          destination,
          onNext,
          onComplete,
          onError,
          onFinalize
        ) {
          return new OperatorSubscriber(
            destination,
            onNext,
            onComplete,
            onError,
            onFinalize
          );
        }
        var OperatorSubscriber = (function (_super) {
          (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(
            OperatorSubscriber,
            _super
          );
          function OperatorSubscriber(
            destination,
            onNext,
            onComplete,
            onError,
            onFinalize,
            shouldUnsubscribe
          ) {
            var _this = _super.call(this, destination) || this;
            _this.onFinalize = onFinalize;
            _this.shouldUnsubscribe = shouldUnsubscribe;
            _this._next = onNext
              ? function (value) {
                  try {
                    onNext(value);
                  } catch (err) {
                    destination.error(err);
                  }
                }
              : _super.prototype._next;
            _this._error = onError
              ? function (err) {
                  try {
                    onError(err);
                  } catch (err) {
                    destination.error(err);
                  } finally {
                    this.unsubscribe();
                  }
                }
              : _super.prototype._error;
            _this._complete = onComplete
              ? function () {
                  try {
                    onComplete();
                  } catch (err) {
                    destination.error(err);
                  } finally {
                    this.unsubscribe();
                  }
                }
              : _super.prototype._complete;
            return _this;
          }
          OperatorSubscriber.prototype.unsubscribe = function () {
            var _a;
            if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
              var closed_1 = this.closed;
              _super.prototype.unsubscribe.call(this);
              !closed_1 &&
                ((_a = this.onFinalize) === null || _a === void 0
                  ? void 0
                  : _a.call(this));
            }
          };
          return OperatorSubscriber;
        })(_Subscriber__WEBPACK_IMPORTED_MODULE_1__.Subscriber);

        //# sourceMappingURL=OperatorSubscriber.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/operators/filter.js":
      /*!*******************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/operators/filter.js ***!
  \*******************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ filter: () => /* binding */ filter,
          /* harmony export */
        });
        /* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../util/lift */ "../node_modules/rxjs/dist/esm5/internal/util/lift.js"
          );
        /* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./OperatorSubscriber */ "../node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js"
          );

        function filter(predicate, thisArg) {
          return (0, _util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)(function (
            source,
            subscriber
          ) {
            var index = 0;
            source.subscribe(
              (0,
              _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(
                subscriber,
                function (value) {
                  return (
                    predicate.call(thisArg, value, index++) &&
                    subscriber.next(value)
                  );
                }
              )
            );
          });
        }
        //# sourceMappingURL=filter.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/operators/map.js":
      /*!****************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/operators/map.js ***!
  \****************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ map: () => /* binding */ map,
          /* harmony export */
        });
        /* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../util/lift */ "../node_modules/rxjs/dist/esm5/internal/util/lift.js"
          );
        /* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./OperatorSubscriber */ "../node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js"
          );

        function map(project, thisArg) {
          return (0, _util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)(function (
            source,
            subscriber
          ) {
            var index = 0;
            source.subscribe(
              (0,
              _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(
                subscriber,
                function (value) {
                  subscriber.next(project.call(thisArg, value, index++));
                }
              )
            );
          });
        }
        //# sourceMappingURL=map.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/operators/share.js":
      /*!******************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/operators/share.js ***!
  \******************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ share: () => /* binding */ share,
          /* harmony export */
        });
        /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! tslib */ "../node_modules/tslib/tslib.es6.js"
          );
        /* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../observable/innerFrom */ "../node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js"
          );
        /* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../Subject */ "../node_modules/rxjs/dist/esm5/internal/Subject.js"
          );
        /* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../Subscriber */ "../node_modules/rxjs/dist/esm5/internal/Subscriber.js"
          );
        /* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../util/lift */ "../node_modules/rxjs/dist/esm5/internal/util/lift.js"
          );

        function share(options) {
          if (options === void 0) {
            options = {};
          }
          var _a = options.connector,
            connector =
              _a === void 0
                ? function () {
                    return new _Subject__WEBPACK_IMPORTED_MODULE_0__.Subject();
                  }
                : _a,
            _b = options.resetOnError,
            resetOnError = _b === void 0 ? true : _b,
            _c = options.resetOnComplete,
            resetOnComplete = _c === void 0 ? true : _c,
            _d = options.resetOnRefCountZero,
            resetOnRefCountZero = _d === void 0 ? true : _d;
          return function (wrapperSource) {
            var connection;
            var resetConnection;
            var subject;
            var refCount = 0;
            var hasCompleted = false;
            var hasErrored = false;
            var cancelReset = function () {
              resetConnection === null || resetConnection === void 0
                ? void 0
                : resetConnection.unsubscribe();
              resetConnection = undefined;
            };
            var reset = function () {
              cancelReset();
              connection = subject = undefined;
              hasCompleted = hasErrored = false;
            };
            var resetAndUnsubscribe = function () {
              var conn = connection;
              reset();
              conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
            };
            return (0, _util_lift__WEBPACK_IMPORTED_MODULE_1__.operate)(
              function (source, subscriber) {
                refCount++;
                if (!hasErrored && !hasCompleted) {
                  cancelReset();
                }
                var dest = (subject =
                  subject !== null && subject !== void 0
                    ? subject
                    : connector());
                subscriber.add(function () {
                  refCount--;
                  if (refCount === 0 && !hasErrored && !hasCompleted) {
                    resetConnection = handleReset(
                      resetAndUnsubscribe,
                      resetOnRefCountZero
                    );
                  }
                });
                dest.subscribe(subscriber);
                if (!connection && refCount > 0) {
                  connection =
                    new _Subscriber__WEBPACK_IMPORTED_MODULE_2__.SafeSubscriber(
                      {
                        next: function (value) {
                          return dest.next(value);
                        },
                        error: function (err) {
                          hasErrored = true;
                          cancelReset();
                          resetConnection = handleReset(
                            reset,
                            resetOnError,
                            err
                          );
                          dest.error(err);
                        },
                        complete: function () {
                          hasCompleted = true;
                          cancelReset();
                          resetConnection = handleReset(reset, resetOnComplete);
                          dest.complete();
                        },
                      }
                    );
                  (0,
                  _observable_innerFrom__WEBPACK_IMPORTED_MODULE_3__.innerFrom)(
                    source
                  ).subscribe(connection);
                }
              }
            )(wrapperSource);
          };
        }
        function handleReset(reset, on) {
          var args = [];
          for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
          }
          if (on === true) {
            reset();
            return;
          }
          if (on === false) {
            return;
          }
          var onSubscriber =
            new _Subscriber__WEBPACK_IMPORTED_MODULE_2__.SafeSubscriber({
              next: function () {
                onSubscriber.unsubscribe();
                reset();
              },
            });
          return on
            .apply(
              void 0,
              (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__spreadArray)(
                [],
                (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__read)(args)
              )
            )
            .subscribe(onSubscriber);
        }
        //# sourceMappingURL=share.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/operators/take.js":
      /*!*****************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/operators/take.js ***!
  \*****************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ take: () => /* binding */ take,
          /* harmony export */
        });
        /* harmony import */ var _observable_empty__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../observable/empty */ "../node_modules/rxjs/dist/esm5/internal/observable/empty.js"
          );
        /* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../util/lift */ "../node_modules/rxjs/dist/esm5/internal/util/lift.js"
          );
        /* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./OperatorSubscriber */ "../node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js"
          );

        function take(count) {
          return count <= 0
            ? function () {
                return _observable_empty__WEBPACK_IMPORTED_MODULE_0__.EMPTY;
              }
            : (0, _util_lift__WEBPACK_IMPORTED_MODULE_1__.operate)(function (
                source,
                subscriber
              ) {
                var seen = 0;
                source.subscribe(
                  (0,
                  _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.createOperatorSubscriber)(
                    subscriber,
                    function (value) {
                      if (++seen <= count) {
                        subscriber.next(value);
                        if (count <= seen) {
                          subscriber.complete();
                        }
                      }
                    }
                  )
                );
              });
        }
        //# sourceMappingURL=take.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js":
      /*!**********************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js ***!
  \**********************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ takeUntil: () => /* binding */ takeUntil,
          /* harmony export */
        });
        /* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../util/lift */ "../node_modules/rxjs/dist/esm5/internal/util/lift.js"
          );
        /* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./OperatorSubscriber */ "../node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js"
          );
        /* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../observable/innerFrom */ "../node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js"
          );
        /* harmony import */ var _util_noop__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../util/noop */ "../node_modules/rxjs/dist/esm5/internal/util/noop.js"
          );

        function takeUntil(notifier) {
          return (0, _util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)(function (
            source,
            subscriber
          ) {
            (0, _observable_innerFrom__WEBPACK_IMPORTED_MODULE_1__.innerFrom)(
              notifier
            ).subscribe(
              (0,
              _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.createOperatorSubscriber)(
                subscriber,
                function () {
                  return subscriber.complete();
                },
                _util_noop__WEBPACK_IMPORTED_MODULE_3__.noop
              )
            );
            !subscriber.closed && source.subscribe(subscriber);
          });
        }
        //# sourceMappingURL=takeUntil.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js":
      /*!**********************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js ***!
  \**********************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ takeWhile: () => /* binding */ takeWhile,
          /* harmony export */
        });
        /* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../util/lift */ "../node_modules/rxjs/dist/esm5/internal/util/lift.js"
          );
        /* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./OperatorSubscriber */ "../node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js"
          );

        function takeWhile(predicate, inclusive) {
          if (inclusive === void 0) {
            inclusive = false;
          }
          return (0, _util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)(function (
            source,
            subscriber
          ) {
            var index = 0;
            source.subscribe(
              (0,
              _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(
                subscriber,
                function (value) {
                  var result = predicate(value, index++);
                  (result || inclusive) && subscriber.next(value);
                  !result && subscriber.complete();
                }
              )
            );
          });
        }
        //# sourceMappingURL=takeWhile.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/operators/tap.js":
      /*!****************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/operators/tap.js ***!
  \****************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ tap: () => /* binding */ tap,
          /* harmony export */
        });
        /* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../util/isFunction */ "../node_modules/rxjs/dist/esm5/internal/util/isFunction.js"
          );
        /* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../util/lift */ "../node_modules/rxjs/dist/esm5/internal/util/lift.js"
          );
        /* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./OperatorSubscriber */ "../node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js"
          );
        /* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../util/identity */ "../node_modules/rxjs/dist/esm5/internal/util/identity.js"
          );

        function tap(observerOrNext, error, complete) {
          var tapObserver =
            (0, _util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(
              observerOrNext
            ) ||
            error ||
            complete
              ? { next: observerOrNext, error: error, complete: complete }
              : observerOrNext;
          return tapObserver
            ? (0, _util_lift__WEBPACK_IMPORTED_MODULE_1__.operate)(function (
                source,
                subscriber
              ) {
                var _a;
                (_a = tapObserver.subscribe) === null || _a === void 0
                  ? void 0
                  : _a.call(tapObserver);
                var isUnsub = true;
                source.subscribe(
                  (0,
                  _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.createOperatorSubscriber)(
                    subscriber,
                    function (value) {
                      var _a;
                      (_a = tapObserver.next) === null || _a === void 0
                        ? void 0
                        : _a.call(tapObserver, value);
                      subscriber.next(value);
                    },
                    function () {
                      var _a;
                      isUnsub = false;
                      (_a = tapObserver.complete) === null || _a === void 0
                        ? void 0
                        : _a.call(tapObserver);
                      subscriber.complete();
                    },
                    function (err) {
                      var _a;
                      isUnsub = false;
                      (_a = tapObserver.error) === null || _a === void 0
                        ? void 0
                        : _a.call(tapObserver, err);
                      subscriber.error(err);
                    },
                    function () {
                      var _a, _b;
                      if (isUnsub) {
                        (_a = tapObserver.unsubscribe) === null || _a === void 0
                          ? void 0
                          : _a.call(tapObserver);
                      }
                      (_b = tapObserver.finalize) === null || _b === void 0
                        ? void 0
                        : _b.call(tapObserver);
                    }
                  )
                );
              })
            : _util_identity__WEBPACK_IMPORTED_MODULE_3__.identity;
        }
        //# sourceMappingURL=tap.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js":
      /*!****************************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js ***!
  \****************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ timeoutProvider: () =>
            /* binding */ timeoutProvider,
          /* harmony export */
        });
        /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! tslib */ "../node_modules/tslib/tslib.es6.js"
          );

        var timeoutProvider = {
          setTimeout: function (handler, timeout) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
              args[_i - 2] = arguments[_i];
            }
            var delegate = timeoutProvider.delegate;
            if (
              delegate === null || delegate === void 0
                ? void 0
                : delegate.setTimeout
            ) {
              return delegate.setTimeout.apply(
                delegate,
                (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)(
                  [handler, timeout],
                  (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(args)
                )
              );
            }
            return setTimeout.apply(
              void 0,
              (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)(
                [handler, timeout],
                (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(args)
              )
            );
          },
          clearTimeout: function (handle) {
            var delegate = timeoutProvider.delegate;
            return (
              (delegate === null || delegate === void 0
                ? void 0
                : delegate.clearTimeout) || clearTimeout
            )(handle);
          },
          delegate: undefined,
        };
        //# sourceMappingURL=timeoutProvider.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/symbol/iterator.js":
      /*!******************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/symbol/iterator.js ***!
  \******************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ getSymbolIterator: () =>
            /* binding */ getSymbolIterator,
          /* harmony export */ iterator: () => /* binding */ iterator,
          /* harmony export */
        });
        function getSymbolIterator() {
          if (typeof Symbol !== "function" || !Symbol.iterator) {
            return "@@iterator";
          }
          return Symbol.iterator;
        }
        var iterator = getSymbolIterator();
        //# sourceMappingURL=iterator.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/symbol/observable.js":
      /*!********************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/symbol/observable.js ***!
  \********************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ observable: () => /* binding */ observable,
          /* harmony export */
        });
        var observable = (function () {
          return (
            (typeof Symbol === "function" && Symbol.observable) ||
            "@@observable"
          );
        })();
        //# sourceMappingURL=observable.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/EmptyError.js":
      /*!******************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/EmptyError.js ***!
  \******************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ EmptyError: () => /* binding */ EmptyError,
          /* harmony export */
        });
        /* harmony import */ var _createErrorClass__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./createErrorClass */ "../node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js"
          );

        var EmptyError = (0,
        _createErrorClass__WEBPACK_IMPORTED_MODULE_0__.createErrorClass)(
          function (_super) {
            return function EmptyErrorImpl() {
              _super(this);
              this.name = "EmptyError";
              this.message = "no elements in sequence";
            };
          }
        );
        //# sourceMappingURL=EmptyError.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js":
      /*!*******************************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js ***!
  \*******************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ ObjectUnsubscribedError: () =>
            /* binding */ ObjectUnsubscribedError,
          /* harmony export */
        });
        /* harmony import */ var _createErrorClass__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./createErrorClass */ "../node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js"
          );

        var ObjectUnsubscribedError = (0,
        _createErrorClass__WEBPACK_IMPORTED_MODULE_0__.createErrorClass)(
          function (_super) {
            return function ObjectUnsubscribedErrorImpl() {
              _super(this);
              this.name = "ObjectUnsubscribedError";
              this.message = "object unsubscribed";
            };
          }
        );
        //# sourceMappingURL=ObjectUnsubscribedError.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js":
      /*!***************************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js ***!
  \***************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ UnsubscriptionError: () =>
            /* binding */ UnsubscriptionError,
          /* harmony export */
        });
        /* harmony import */ var _createErrorClass__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./createErrorClass */ "../node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js"
          );

        var UnsubscriptionError = (0,
        _createErrorClass__WEBPACK_IMPORTED_MODULE_0__.createErrorClass)(
          function (_super) {
            return function UnsubscriptionErrorImpl(errors) {
              _super(this);
              this.message = errors
                ? errors.length +
                  " errors occurred during unsubscription:\n" +
                  errors
                    .map(function (err, i) {
                      return i + 1 + ") " + err.toString();
                    })
                    .join("\n  ")
                : "";
              this.name = "UnsubscriptionError";
              this.errors = errors;
            };
          }
        );
        //# sourceMappingURL=UnsubscriptionError.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js":
      /*!**********************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js ***!
  \**********************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ argsOrArgArray: () =>
            /* binding */ argsOrArgArray,
          /* harmony export */
        });
        var isArray = Array.isArray;
        function argsOrArgArray(args) {
          return args.length === 1 && isArray(args[0]) ? args[0] : args;
        }
        //# sourceMappingURL=argsOrArgArray.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/arrRemove.js":
      /*!*****************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/arrRemove.js ***!
  \*****************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ arrRemove: () => /* binding */ arrRemove,
          /* harmony export */
        });
        function arrRemove(arr, item) {
          if (arr) {
            var index = arr.indexOf(item);
            0 <= index && arr.splice(index, 1);
          }
        }
        //# sourceMappingURL=arrRemove.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js":
      /*!************************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js ***!
  \************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ createErrorClass: () =>
            /* binding */ createErrorClass,
          /* harmony export */
        });
        function createErrorClass(createImpl) {
          var _super = function (instance) {
            Error.call(instance);
            instance.stack = new Error().stack;
          };
          var ctorFunc = createImpl(_super);
          ctorFunc.prototype = Object.create(Error.prototype);
          ctorFunc.prototype.constructor = ctorFunc;
          return ctorFunc;
        }
        //# sourceMappingURL=createErrorClass.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/errorContext.js":
      /*!********************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/errorContext.js ***!
  \********************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ captureError: () => /* binding */ captureError,
          /* harmony export */ errorContext: () => /* binding */ errorContext,
          /* harmony export */
        });
        /* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../config */ "../node_modules/rxjs/dist/esm5/internal/config.js"
          );

        var context = null;
        function errorContext(cb) {
          if (
            _config__WEBPACK_IMPORTED_MODULE_0__.config
              .useDeprecatedSynchronousErrorHandling
          ) {
            var isRoot = !context;
            if (isRoot) {
              context = { errorThrown: false, error: null };
            }
            cb();
            if (isRoot) {
              var _a = context,
                errorThrown = _a.errorThrown,
                error = _a.error;
              context = null;
              if (errorThrown) {
                throw error;
              }
            }
          } else {
            cb();
          }
        }
        function captureError(err) {
          if (
            _config__WEBPACK_IMPORTED_MODULE_0__.config
              .useDeprecatedSynchronousErrorHandling &&
            context
          ) {
            context.errorThrown = true;
            context.error = err;
          }
        }
        //# sourceMappingURL=errorContext.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/identity.js":
      /*!****************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/identity.js ***!
  \****************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ identity: () => /* binding */ identity,
          /* harmony export */
        });
        function identity(x) {
          return x;
        }
        //# sourceMappingURL=identity.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js":
      /*!*******************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js ***!
  \*******************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isArrayLike: () => /* binding */ isArrayLike,
          /* harmony export */
        });
        var isArrayLike = function (x) {
          return x && typeof x.length === "number" && typeof x !== "function";
        };
        //# sourceMappingURL=isArrayLike.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js":
      /*!***********************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js ***!
  \***********************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isAsyncIterable: () =>
            /* binding */ isAsyncIterable,
          /* harmony export */
        });
        /* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./isFunction */ "../node_modules/rxjs/dist/esm5/internal/util/isFunction.js"
          );

        function isAsyncIterable(obj) {
          return (
            Symbol.asyncIterator &&
            (0, _isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(
              obj === null || obj === void 0
                ? void 0
                : obj[Symbol.asyncIterator]
            )
          );
        }
        //# sourceMappingURL=isAsyncIterable.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/isFunction.js":
      /*!******************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/isFunction.js ***!
  \******************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isFunction: () => /* binding */ isFunction,
          /* harmony export */
        });
        function isFunction(value) {
          return typeof value === "function";
        }
        //# sourceMappingURL=isFunction.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js":
      /*!***************************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js ***!
  \***************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isInteropObservable: () =>
            /* binding */ isInteropObservable,
          /* harmony export */
        });
        /* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../symbol/observable */ "../node_modules/rxjs/dist/esm5/internal/symbol/observable.js"
          );
        /* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./isFunction */ "../node_modules/rxjs/dist/esm5/internal/util/isFunction.js"
          );

        function isInteropObservable(input) {
          return (0, _isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(
            input[_symbol_observable__WEBPACK_IMPORTED_MODULE_1__.observable]
          );
        }
        //# sourceMappingURL=isInteropObservable.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/isIterable.js":
      /*!******************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/isIterable.js ***!
  \******************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isIterable: () => /* binding */ isIterable,
          /* harmony export */
        });
        /* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../symbol/iterator */ "../node_modules/rxjs/dist/esm5/internal/symbol/iterator.js"
          );
        /* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./isFunction */ "../node_modules/rxjs/dist/esm5/internal/util/isFunction.js"
          );

        function isIterable(input) {
          return (0, _isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(
            input === null || input === void 0
              ? void 0
              : input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator]
          );
        }
        //# sourceMappingURL=isIterable.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/isPromise.js":
      /*!*****************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/isPromise.js ***!
  \*****************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isPromise: () => /* binding */ isPromise,
          /* harmony export */
        });
        /* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./isFunction */ "../node_modules/rxjs/dist/esm5/internal/util/isFunction.js"
          );

        function isPromise(value) {
          return (0, _isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(
            value === null || value === void 0 ? void 0 : value.then
          );
        }
        //# sourceMappingURL=isPromise.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js":
      /*!****************************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js ***!
  \****************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isReadableStreamLike: () =>
            /* binding */ isReadableStreamLike,
          /* harmony export */ readableStreamLikeToAsyncGenerator: () =>
            /* binding */ readableStreamLikeToAsyncGenerator,
          /* harmony export */
        });
        /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! tslib */ "../node_modules/tslib/tslib.es6.js"
          );
        /* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./isFunction */ "../node_modules/rxjs/dist/esm5/internal/util/isFunction.js"
          );

        function readableStreamLikeToAsyncGenerator(readableStream) {
          return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__asyncGenerator)(
            this,
            arguments,
            function readableStreamLikeToAsyncGenerator_1() {
              var reader, _a, value, done;
              return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(
                this,
                function (_b) {
                  switch (_b.label) {
                    case 0:
                      reader = readableStream.getReader();
                      _b.label = 1;
                    case 1:
                      _b.trys.push([1, , 9, 10]);
                      _b.label = 2;
                    case 2:
                      if (false) {
                      }
                      return [
                        4,
                        (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__await)(
                          reader.read()
                        ),
                      ];
                    case 3:
                      (_a = _b.sent()), (value = _a.value), (done = _a.done);
                      if (!done) return [3, 5];
                      return [
                        4,
                        (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__await)(void 0),
                      ];
                    case 4:
                      return [2, _b.sent()];
                    case 5:
                      return [
                        4,
                        (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__await)(value),
                      ];
                    case 6:
                      return [4, _b.sent()];
                    case 7:
                      _b.sent();
                      return [3, 2];
                    case 8:
                      return [3, 10];
                    case 9:
                      reader.releaseLock();
                      return [7];
                    case 10:
                      return [2];
                  }
                }
              );
            }
          );
        }
        function isReadableStreamLike(obj) {
          return (0, _isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(
            obj === null || obj === void 0 ? void 0 : obj.getReader
          );
        }
        //# sourceMappingURL=isReadableStreamLike.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/lift.js":
      /*!************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/lift.js ***!
  \************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ hasLift: () => /* binding */ hasLift,
          /* harmony export */ operate: () => /* binding */ operate,
          /* harmony export */
        });
        /* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./isFunction */ "../node_modules/rxjs/dist/esm5/internal/util/isFunction.js"
          );

        function hasLift(source) {
          return (0, _isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(
            source === null || source === void 0 ? void 0 : source.lift
          );
        }
        function operate(init) {
          return function (source) {
            if (hasLift(source)) {
              return source.lift(function (liftedSource) {
                try {
                  return init(liftedSource, this);
                } catch (err) {
                  this.error(err);
                }
              });
            }
            throw new TypeError("Unable to lift unknown Observable type");
          };
        }
        //# sourceMappingURL=lift.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js":
      /*!************************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js ***!
  \************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ mapOneOrManyArgs: () =>
            /* binding */ mapOneOrManyArgs,
          /* harmony export */
        });
        /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! tslib */ "../node_modules/tslib/tslib.es6.js"
          );
        /* harmony import */ var _operators_map__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../operators/map */ "../node_modules/rxjs/dist/esm5/internal/operators/map.js"
          );

        var isArray = Array.isArray;
        function callOrApply(fn, args) {
          return isArray(args)
            ? fn.apply(
                void 0,
                (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)(
                  [],
                  (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(args)
                )
              )
            : fn(args);
        }
        function mapOneOrManyArgs(fn) {
          return (0, _operators_map__WEBPACK_IMPORTED_MODULE_1__.map)(function (
            args
          ) {
            return callOrApply(fn, args);
          });
        }
        //# sourceMappingURL=mapOneOrManyArgs.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/noop.js":
      /*!************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/noop.js ***!
  \************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ noop: () => /* binding */ noop,
          /* harmony export */
        });
        function noop() {}
        //# sourceMappingURL=noop.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/pipe.js":
      /*!************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/pipe.js ***!
  \************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ pipe: () => /* binding */ pipe,
          /* harmony export */ pipeFromArray: () => /* binding */ pipeFromArray,
          /* harmony export */
        });
        /* harmony import */ var _identity__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./identity */ "../node_modules/rxjs/dist/esm5/internal/util/identity.js"
          );

        function pipe() {
          var fns = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            fns[_i] = arguments[_i];
          }
          return pipeFromArray(fns);
        }
        function pipeFromArray(fns) {
          if (fns.length === 0) {
            return _identity__WEBPACK_IMPORTED_MODULE_0__.identity;
          }
          if (fns.length === 1) {
            return fns[0];
          }
          return function piped(input) {
            return fns.reduce(function (prev, fn) {
              return fn(prev);
            }, input);
          };
        }
        //# sourceMappingURL=pipe.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js":
      /*!****************************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js ***!
  \****************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ reportUnhandledError: () =>
            /* binding */ reportUnhandledError,
          /* harmony export */
        });
        /* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../config */ "../node_modules/rxjs/dist/esm5/internal/config.js"
          );
        /* harmony import */ var _scheduler_timeoutProvider__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../scheduler/timeoutProvider */ "../node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js"
          );

        function reportUnhandledError(err) {
          _scheduler_timeoutProvider__WEBPACK_IMPORTED_MODULE_0__.timeoutProvider.setTimeout(
            function () {
              var onUnhandledError =
                _config__WEBPACK_IMPORTED_MODULE_1__.config.onUnhandledError;
              if (onUnhandledError) {
                onUnhandledError(err);
              } else {
                throw err;
              }
            }
          );
        }
        //# sourceMappingURL=reportUnhandledError.js.map

        /***/
      },

    /***/ "../node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js":
      /*!******************************************************************************!*\
  !*** ../node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js ***!
  \******************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ createInvalidObservableTypeError: () =>
            /* binding */ createInvalidObservableTypeError,
          /* harmony export */
        });
        function createInvalidObservableTypeError(input) {
          return new TypeError(
            "You provided " +
              (input !== null && typeof input === "object"
                ? "an invalid object"
                : "'" + input + "'") +
              " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable."
          );
        }
        //# sourceMappingURL=throwUnobservableError.js.map

        /***/
      },

    /***/ "./background/Authentication.ts":
      /*!**************************************!*\
  !*** ./background/Authentication.ts ***!
  \**************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _src_shared_storagex_store__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _src/shared/storagex/store */ "./shared/storagex/store.ts"
          );
        /* harmony import */ var _src_shared_utils_simpleApiCall__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! _src/shared/utils/simpleApiCall */ "./shared/utils/simpleApiCall.ts"
          );
        var __awaiter =
          (undefined && undefined.__awaiter) ||
          function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P
                ? value
                : new P(function (resolve) {
                    resolve(value);
                  });
            }
            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }
              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }
              function step(result) {
                result.done
                  ? resolve(result.value)
                  : adopt(result.value).then(fulfilled, rejected);
              }
              step(
                (generator = generator.apply(thisArg, _arguments || [])).next()
              );
            });
          };

        class Authentication {
          constructor() {
            this._accountInfos = null;
            this._accessToken = null;
          }
          set(accessToken) {
            this._accessToken = accessToken;
          }
          getAccountInfos() {
            return __awaiter(this, void 0, void 0, function* () {
              if (this._accountInfos) return this._accountInfos;
              if (!this._accessToken) return [];
              const accountsString = yield (0,
              _src_shared_storagex_store__WEBPACK_IMPORTED_MODULE_0__.getEncrypted)(
                "accountInfos",
                this._accessToken
              );
              let accounts;
              if (accountsString) {
                accounts = JSON.parse(accountsString);
              } else {
                const { json, status } = yield (0,
                _src_shared_utils_simpleApiCall__WEBPACK_IMPORTED_MODULE_1__[
                  "default"
                ])(
                  "wallet/accounts",
                  "POST",
                  this._accessToken || "",
                  JSON.stringify({ network: "sui", chain: "sui" })
                );
                if (status !== 200) {
                  return [];
                }
                accounts = json.accounts;
              }
              this._accountInfos = accounts;
              yield (0,
              _src_shared_storagex_store__WEBPACK_IMPORTED_MODULE_0__.setEncrypted)("accountInfos", JSON.stringify(accounts), this._accessToken);
              return accounts;
            });
          }
          createAccount(index) {
            return __awaiter(this, void 0, void 0, function* () {
              if (!this._accessToken) return null;
              const chain = "sui";
              const { json, status } = yield (0,
              _src_shared_utils_simpleApiCall__WEBPACK_IMPORTED_MODULE_1__[
                "default"
              ])(
                "accounts/create",
                "POST",
                this._accessToken || "",
                JSON.stringify({ index, chain })
              );
              if (status !== 200) {
                return null;
              }
              return json.accounts.find((a) => a.chain === chain);
            });
          }
          updateAccountInfos(accountInfos) {
            return __awaiter(this, void 0, void 0, function* () {
              if (!this._accessToken) return;
              yield (0,
              _src_shared_utils_simpleApiCall__WEBPACK_IMPORTED_MODULE_1__[
                "default"
              ])("accounts/update", "POST", this._accessToken || "", JSON.stringify({ accountInfos }));
            });
          }
          sign(address, txBytes) {
            return __awaiter(this, void 0, void 0, function* () {
              if (!this._accessToken) return;
              const { json, status } = yield (0,
              _src_shared_utils_simpleApiCall__WEBPACK_IMPORTED_MODULE_1__[
                "default"
              ])(
                "transaction/sign",
                "POST",
                this._accessToken || "",
                JSON.stringify({
                  network: "sui",
                  walletAddress: address,
                  populatedTransaction: {
                    id: 0,
                    transaction: txBytes.toString(),
                  },
                })
              );
              if (status !== 200) {
                return;
              }
              const { signedTransaction } = json;
              return {
                signatureScheme: "ED25519",
                signature: signedTransaction.signature,
                pubKey: signedTransaction.pubKey,
              };
            });
          }
        }
        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          new Authentication();

        /***/
      },

    /***/ "./background/Messages.ts":
      /*!********************************!*\
  !*** ./background/Messages.ts ***!
  \********************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/Subject.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/take.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/map.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/filter.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/lastValueFrom.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/observable/race.js"
          );
        /* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_8__ =
          __webpack_require__(
            /*! uuid */ "../node_modules/uuid/dist/esm-browser/v4.js"
          );
        /* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! webextension-polyfill */ "../node_modules/webextension-polyfill/dist/browser-polyfill.js"
          );
        /* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default =
          /*#__PURE__*/ __webpack_require__.n(
            webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__
          );
        /* harmony import */ var _Window__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(/*! ./Window */ "./background/Window.ts");
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0
        var __awaiter =
          (undefined && undefined.__awaiter) ||
          function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P
                ? value
                : new P(function (resolve) {
                    resolve(value);
                  });
            }
            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }
              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }
              function step(result) {
                result.done
                  ? resolve(result.value)
                  : adopt(result.value).then(fulfilled, rejected);
              }
              step(
                (generator = generator.apply(thisArg, _arguments || [])).next()
              );
            });
          };

        const MESSAGES_STORE_KEY = "sign-messages";
        function openSignMessageWindow(signMessageRequestID) {
          return new _Window__WEBPACK_IMPORTED_MODULE_1__.Window({
            url:
              webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.getURL(
                "ui.html"
              ) +
              `#/sign-message-approval/${encodeURIComponent(
                signMessageRequestID
              )}`,
          });
        }
        class Messages {
          constructor() {
            this._signMessageResponseMessages =
              new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
          }
          signMessage(messageData, messageString, connection) {
            return __awaiter(this, void 0, void 0, function* () {
              const signMessageRequest = this.createSignMessageRequest(
                messageData,
                messageString,
                connection.origin,
                connection.originFavIcon
              );
              yield this.storeSignMessageRequest(signMessageRequest);
              const popUp = openSignMessageWindow(signMessageRequest.id);
              const popUpClose = (yield popUp.show()).pipe(
                (0, rxjs__WEBPACK_IMPORTED_MODULE_3__.take)(1),
                (0, rxjs__WEBPACK_IMPORTED_MODULE_4__.map)(() => false)
              );
              const signMessageResponseMessage =
                this._signMessageResponseMessages.pipe(
                  (0, rxjs__WEBPACK_IMPORTED_MODULE_5__.filter)(
                    (msg) => msg.signMessageRequestID === signMessageRequest.id
                  ),
                  (0, rxjs__WEBPACK_IMPORTED_MODULE_3__.take)(1)
                );
              return (0, rxjs__WEBPACK_IMPORTED_MODULE_6__.lastValueFrom)(
                (0, rxjs__WEBPACK_IMPORTED_MODULE_7__.race)(
                  popUpClose,
                  signMessageResponseMessage
                ).pipe(
                  (0, rxjs__WEBPACK_IMPORTED_MODULE_3__.take)(1),
                  (0, rxjs__WEBPACK_IMPORTED_MODULE_4__.map)((response) =>
                    __awaiter(this, void 0, void 0, function* () {
                      if (response && response.approved) {
                        const { approved, signature } = response;
                        signMessageRequest.approved = approved;
                        signMessageRequest.signature = signature;
                        yield this.storeSignMessageRequest(signMessageRequest);
                        return signature;
                      }
                      yield this.removeSignMessageRequest(
                        signMessageRequest.id
                      );
                      throw new Error(
                        "Sign Message Request rejected from user"
                      );
                    })
                  )
                )
              );
            });
          }
          handleMessage(msg) {
            this._signMessageResponseMessages.next(msg);
          }
          createSignMessageRequest(
            messageData,
            messageString,
            origin,
            originFavIcon
          ) {
            if (messageData !== undefined) {
              return {
                id: (0, uuid__WEBPACK_IMPORTED_MODULE_8__["default"])(),
                approved: null,
                origin,
                originFavIcon,
                messageData,
                messageString,
                createdDate: new Date().toISOString(),
              };
            }
            throw new Error("Message must be defined.");
          }
          getSignMessageRequests() {
            return __awaiter(this, void 0, void 0, function* () {
              return (yield webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().storage.local.get(
                { [MESSAGES_STORE_KEY]: {} }
              ))[MESSAGES_STORE_KEY];
            });
          }
          saveSignMessageRequests(signMessageRequests) {
            return __awaiter(this, void 0, void 0, function* () {
              yield webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().storage.local.set(
                {
                  [MESSAGES_STORE_KEY]: signMessageRequests,
                }
              );
            });
          }
          storeSignMessageRequest(signMessageRequest) {
            return __awaiter(this, void 0, void 0, function* () {
              const messages = yield this.getSignMessageRequests();
              messages[signMessageRequest.id] = signMessageRequest;
              yield this.saveSignMessageRequests(messages);
            });
          }
          removeSignMessageRequest(signMessageRequestId) {
            return __awaiter(this, void 0, void 0, function* () {
              const messages = yield this.getSignMessageRequests();
              delete messages[signMessageRequestId];
              yield this.saveSignMessageRequests(messages);
            });
          }
        }
        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          new Messages();

        /***/
      },

    /***/ "./background/Permissions.ts":
      /*!***********************************!*\
  !*** ./background/Permissions.ts ***!
  \***********************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ PERMISSIONS_STORAGE_KEY: () =>
            /* binding */ PERMISSIONS_STORAGE_KEY,
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/Subject.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/filter.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/map.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/lastValueFrom.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/observable/race.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/take.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/tap.js"
          );
        /* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_10__ =
          __webpack_require__(
            /*! uuid */ "../node_modules/uuid/dist/esm-browser/v4.js"
          );
        /* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! webextension-polyfill */ "../node_modules/webextension-polyfill/dist/browser-polyfill.js"
          );
        /* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default =
          /*#__PURE__*/ __webpack_require__.n(
            webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__
          );
        /* harmony import */ var _Window__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(/*! ./Window */ "./background/Window.ts");
        /* harmony import */ var _src_shared_storagex_store__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! _src/shared/storagex/store */ "./shared/storagex/store.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0
        var __awaiter =
          (undefined && undefined.__awaiter) ||
          function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P
                ? value
                : new P(function (resolve) {
                    resolve(value);
                  });
            }
            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }
              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }
              function step(result) {
                result.done
                  ? resolve(result.value)
                  : adopt(result.value).then(fulfilled, rejected);
              }
              step(
                (generator = generator.apply(thisArg, _arguments || [])).next()
              );
            });
          };

        function openPermissionWindow(permissionID) {
          return new _Window__WEBPACK_IMPORTED_MODULE_1__.Window({
            url:
              webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.getURL(
                "ui.html"
              ) + `#/connect/${encodeURIComponent(permissionID)}`,
          });
        }
        const PERMISSIONS_STORAGE_KEY = "permissions";
        class Permissions {
          constructor() {
            this._permissionResponses =
              new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject();
          }
          acquirePermissions(permissionTypes, connection) {
            return __awaiter(this, void 0, void 0, function* () {
              const { origin } = connection;
              const existingPermission = yield this.getPermission(origin);
              // const hasPendingRequest = await this.hasPendingPermissionRequest(
              //     origin,
              //     existingPermission
              // );
              // if (hasPendingRequest) {
              //     throw new Error('Another permission request is pending.');
              // }
              const alreadyAllowed = yield this.hasPermissions(
                origin,
                permissionTypes,
                existingPermission
              );
              if (alreadyAllowed && existingPermission) {
                return existingPermission;
              }
              const pRequest = yield this.createPermissionRequest(
                connection.origin,
                permissionTypes,
                connection.originFavIcon,
                connection.originTitle,
                existingPermission
              );
              const permissionWindow = openPermissionWindow(pRequest.id);
              const onWindowCloseStream = yield permissionWindow.show();
              const responseStream = this._permissionResponses.pipe(
                (0, rxjs__WEBPACK_IMPORTED_MODULE_4__.filter)(
                  (resp) => resp.id === pRequest.id
                ),
                (0, rxjs__WEBPACK_IMPORTED_MODULE_5__.map)((resp) => {
                  pRequest.allowed = resp.allowed;
                  pRequest.accounts = resp.accounts;
                  pRequest.responseDate = resp.responseDate;
                  return pRequest;
                })
                // tap(() => permissionWindow.close())
              );
              return (0, rxjs__WEBPACK_IMPORTED_MODULE_6__.lastValueFrom)(
                (0, rxjs__WEBPACK_IMPORTED_MODULE_7__.race)(
                  onWindowCloseStream.pipe(
                    (0, rxjs__WEBPACK_IMPORTED_MODULE_5__.map)(() => {
                      pRequest.allowed = false;
                      pRequest.accounts = [];
                      pRequest.responseDate = new Date().toISOString();
                      return pRequest;
                    })
                  ),
                  responseStream
                ).pipe(
                  (0, rxjs__WEBPACK_IMPORTED_MODULE_8__.take)(1),
                  (0, rxjs__WEBPACK_IMPORTED_MODULE_9__.tap)((permission) =>
                    __awaiter(this, void 0, void 0, function* () {
                      yield this.storePermission(permission);
                    })
                  ),
                  (0, rxjs__WEBPACK_IMPORTED_MODULE_5__.map)((permission) => {
                    if (!permission.allowed) {
                      throw new Error("Permission rejected");
                    }
                    return permission;
                  })
                )
              );
            });
          }
          handlePermissionResponse(response) {
            this._permissionResponses.next(response);
          }
          getPermissions() {
            return __awaiter(this, void 0, void 0, function* () {
              const permissionString =
                (yield (0,
                _src_shared_storagex_store__WEBPACK_IMPORTED_MODULE_2__.getEncrypted)(
                  PERMISSIONS_STORAGE_KEY
                )) || "{}";
              return JSON.parse(permissionString);
            });
          }
          getPermission(origin, permission) {
            return __awaiter(this, void 0, void 0, function* () {
              if (permission && permission.origin !== origin) {
                throw new Error(
                  `Provided permission has different origin from the one provided. "${permission.origin} !== ${origin}"`
                );
              }
              if (permission) {
                return permission;
              }
              const permissions = yield this.getPermissions();
              return permissions[origin] || null;
            });
          }
          revokeAllPermissions(origin) {
            return __awaiter(this, void 0, void 0, function* () {
              const permissions = yield this.getPermissions();
              const filteredPermissions = {};
              for (const key in permissions) {
                if (
                  Object.prototype.hasOwnProperty.call(permissions, key) &&
                  key !== origin
                ) {
                  filteredPermissions[key] = permissions[key];
                }
              }
              // const passphrase = await getEncrypted('passphrase');
              // await setEncrypted(
              //     PERMISSIONS_STORAGE_KEY,
              //     JSON.stringify(filteredPermissions),
              //     passphrase
              // );
              const {
                id,
                favIcon,
                title,
                accounts,
                allowed,
                createdDate,
                responseDate,
              } = permissions[origin];
              const revokedPermission = {
                id,
                origin,
                favIcon,
                title,
                accounts,
                allowed,
                permissions: [],
                createdDate,
                responseDate,
              };
              this.storePermission(revokedPermission);
            });
          }
          hasPendingPermissionRequest(origin, permission) {
            return __awaiter(this, void 0, void 0, function* () {
              const existingPermission = yield this.getPermission(
                origin,
                permission
              );
              return (
                !!existingPermission && existingPermission.responseDate === null
              );
            });
          }
          hasPermissions(origin, permissionTypes, permission) {
            return __awaiter(this, void 0, void 0, function* () {
              const existingPermission = yield this.getPermission(
                origin,
                permission
              );
              return Boolean(
                existingPermission &&
                  existingPermission.allowed &&
                  permissionTypes.every((permissionType) =>
                    existingPermission.permissions.includes(permissionType)
                  )
              );
            });
          }
          createPermissionRequest(
            origin,
            permissionTypes,
            favIcon,
            title,
            existingPermission
          ) {
            return __awaiter(this, void 0, void 0, function* () {
              let permissionToStore;
              if (existingPermission) {
                existingPermission.allowed = null;
                existingPermission.responseDate = null;
                permissionTypes.forEach((aPermission) => {
                  if (!existingPermission.permissions.includes(aPermission)) {
                    existingPermission.permissions.push(aPermission);
                  }
                });
                permissionToStore = existingPermission;
              } else {
                permissionToStore = {
                  id: (0, uuid__WEBPACK_IMPORTED_MODULE_10__["default"])(),
                  accounts: [],
                  allowed: null,
                  createdDate: new Date().toISOString(),
                  origin,
                  favIcon,
                  title,
                  permissions: permissionTypes,
                  responseDate: null,
                };
              }
              yield this.storePermission(permissionToStore);
              return permissionToStore;
            });
          }
          storePermission(permission) {
            return __awaiter(this, void 0, void 0, function* () {
              const permissions = yield this.getPermissions();
              permissions[permission.origin] = permission;
              const permissionsString = JSON.stringify(permissions);
              yield (0,
              _src_shared_storagex_store__WEBPACK_IMPORTED_MODULE_2__.setEncrypted)(PERMISSIONS_STORAGE_KEY, permissionsString);
            });
          }
        }
        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          new Permissions();

        /***/
      },

    /***/ "./background/Transactions.ts":
      /*!************************************!*\
  !*** ./background/Transactions.ts ***!
  \************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/Subject.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/take.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/map.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/filter.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/lastValueFrom.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/observable/race.js"
          );
        /* harmony import */ var tweetnacl__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! tweetnacl */ "../node_modules/tweetnacl/nacl-fast.js"
          );
        /* harmony import */ var tweetnacl__WEBPACK_IMPORTED_MODULE_0___default =
          /*#__PURE__*/ __webpack_require__.n(
            tweetnacl__WEBPACK_IMPORTED_MODULE_0__
          );
        /* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_11__ =
          __webpack_require__(
            /*! uuid */ "../node_modules/uuid/dist/esm-browser/v4.js"
          );
        /* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! webextension-polyfill */ "../node_modules/webextension-polyfill/dist/browser-polyfill.js"
          );
        /* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_1___default =
          /*#__PURE__*/ __webpack_require__.n(
            webextension_polyfill__WEBPACK_IMPORTED_MODULE_1__
          );
        /* harmony import */ var _Authentication__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./Authentication */ "./background/Authentication.ts"
          );
        /* harmony import */ var _Window__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(/*! ./Window */ "./background/Window.ts");
        /* harmony import */ var _src_shared_storagex_store__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! _src/shared/storagex/store */ "./shared/storagex/store.ts"
          );
        /* provided dependency */ var Buffer = __webpack_require__(
          /*! buffer */ "../node_modules/buffer/index.js"
        )["Buffer"];
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0
        var __awaiter =
          (undefined && undefined.__awaiter) ||
          function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P
                ? value
                : new P(function (resolve) {
                    resolve(value);
                  });
            }
            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }
              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }
              function step(result) {
                result.done
                  ? resolve(result.value)
                  : adopt(result.value).then(fulfilled, rejected);
              }
              step(
                (generator = generator.apply(thisArg, _arguments || [])).next()
              );
            });
          };

        const TX_STORE_KEY = "transactions";
        const PREAPPROVAL_KEY = "preapprovals";
        function openTxWindow(txRequestID) {
          return new _Window__WEBPACK_IMPORTED_MODULE_3__.Window({
            url:
              webextension_polyfill__WEBPACK_IMPORTED_MODULE_1___default().runtime.getURL(
                "ui.html"
              ) + `#/tx-approval/${encodeURIComponent(txRequestID)}`,
          });
        }
        function openPermissionWindow(permissionID) {
          return new _Window__WEBPACK_IMPORTED_MODULE_3__.Window({
            url:
              webextension_polyfill__WEBPACK_IMPORTED_MODULE_1___default().runtime.getURL(
                "ui.html"
              ) + `#/preapproval/${encodeURIComponent(permissionID)}`,
            height: 690,
          });
        }
        class Transactions {
          constructor() {
            this._txResponseMessages =
              new rxjs__WEBPACK_IMPORTED_MODULE_5__.Subject();
            this._preapprovalResponseMessages =
              new rxjs__WEBPACK_IMPORTED_MODULE_5__.Subject();
          }
          findPreapprovalRequest({ moveCall, preapproval }) {
            return __awaiter(this, void 0, void 0, function* () {
              const activeAccount = yield this.getActiveAccount();
              const preapprovalRequests = yield this.getPreapprovalRequests();
              for (const preapprovalRequest of Object.values(
                preapprovalRequests
              )) {
                const { preapproval: existingPreapproval } = preapprovalRequest;
                if (existingPreapproval.address !== activeAccount.address)
                  continue;
                const found = moveCall
                  ? moveCall.packageObjectId ===
                      existingPreapproval.packageObjectId &&
                    moveCall.function === existingPreapproval.function &&
                    moveCall.arguments.indexOf(existingPreapproval.objectId) >
                      -1
                  : (preapproval === null || preapproval === void 0
                      ? void 0
                      : preapproval.packageObjectId) ===
                      existingPreapproval.packageObjectId &&
                    (preapproval === null || preapproval === void 0
                      ? void 0
                      : preapproval.function) ===
                      existingPreapproval.function &&
                    (preapproval === null || preapproval === void 0
                      ? void 0
                      : preapproval.objectId) === existingPreapproval.objectId;
                if (found) {
                  return preapprovalRequest;
                }
              }
            });
          }
          tryDirectExecution(tx, preapprovalRequest) {
            return __awaiter(this, void 0, void 0, function* () {
              try {
                const txDirectResult = yield this.executeTransactionDirectly({
                  tx,
                });
                const { preapproval } = preapprovalRequest;
                preapproval.maxTransactionCount -= 1;
                const { computationCost, storageCost, storageRebate } =
                  txDirectResult.effects.gasUsed;
                const gasUsed = computationCost + (storageCost - storageRebate);
                preapproval.totalGasLimit -= gasUsed;
                preapprovalRequest.preapproval.transactions.push({
                  gasUsed,
                });
                if (
                  preapprovalRequest.preapproval.maxTransactionCount > 0 &&
                  preapprovalRequest.preapproval.totalGasLimit > gasUsed * 1.5
                ) {
                  this.storePreapprovalRequest(preapprovalRequest);
                } else {
                  this.removePreapprovalRequest(preapprovalRequest.id);
                }
                return txDirectResult;
              } catch (e) {
                return null;
              }
            });
          }
          executeTransaction(tx, txBytes, connection) {
            return __awaiter(this, void 0, void 0, function* () {
              if (tx) {
                const permissionRequest = yield this.findPreapprovalRequest({
                  moveCall: tx,
                });
                if (permissionRequest) {
                  const result = yield this.tryDirectExecution(
                    tx,
                    permissionRequest
                  );
                  if (result) {
                    return result;
                  }
                }
              }
              const txRequest = this.createTransactionRequest(
                tx,
                txBytes,
                connection.origin,
                connection.originFavIcon
              );
              yield this.storeTransactionRequest(txRequest);
              const popUp = openTxWindow(txRequest.id);
              const popUpClose = (yield popUp.show()).pipe(
                (0, rxjs__WEBPACK_IMPORTED_MODULE_6__.take)(1),
                (0, rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(() => false)
              );
              const txResponseMessage = this._txResponseMessages.pipe(
                (0, rxjs__WEBPACK_IMPORTED_MODULE_8__.filter)(
                  (msg) => msg.txID === txRequest.id
                ),
                (0, rxjs__WEBPACK_IMPORTED_MODULE_6__.take)(1)
              );
              return (0, rxjs__WEBPACK_IMPORTED_MODULE_9__.lastValueFrom)(
                (0, rxjs__WEBPACK_IMPORTED_MODULE_10__.race)(
                  popUpClose,
                  txResponseMessage
                ).pipe(
                  (0, rxjs__WEBPACK_IMPORTED_MODULE_6__.take)(1),
                  (0, rxjs__WEBPACK_IMPORTED_MODULE_7__.map)((response) =>
                    __awaiter(this, void 0, void 0, function* () {
                      if (response) {
                        const { approved, txResult, tsResultError } = response;
                        if (approved) {
                          txRequest.approved = approved;
                          txRequest.txResult = txResult;
                          txRequest.txResultError = tsResultError;
                          yield this.storeTransactionRequest(txRequest);
                          if (tsResultError) {
                            throw new Error(
                              `Transaction failed with the following error. ${tsResultError}`
                            );
                          }
                          if (!txResult) {
                            throw new Error(`Transaction result is empty`);
                          }
                          return txResult;
                        }
                      }
                      yield this.removeTransactionRequest(txRequest.id);
                      throw new Error("Transaction rejected from user");
                    })
                  )
                )
              );
            });
          }
          executeTransactionDirectly({ tx }) {
            return __awaiter(this, void 0, void 0, function* () {
              const activeAccount = yield this.getActiveAccount();
              const endpoint = "https://gateway.devnet.sui.io/" || 0;
              const toBase64 = (data) => {
                return new Uint8Array(Buffer.from(data, "base64"));
              };
              const base64ToString = (data) => {
                return Buffer.from(data).toString("base64");
              };
              const callData = {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  jsonrpc: "2.0",
                  method: "sui_moveCall",
                  params: [
                    activeAccount.address,
                    tx.packageObjectId,
                    tx.module,
                    tx.function,
                    tx.typeArguments,
                    tx.arguments,
                    tx.gasPayment,
                    tx.gasBudget,
                  ],
                  id: 1,
                }),
              };
              const response = yield fetch(endpoint, callData);
              const json = yield response.json();
              const {
                result: { txBytes },
              } = json;
              let signature;
              let publicKey;
              if (activeAccount.seed) {
                const seed = Uint8Array.from(
                  activeAccount.seed.split(",").map((s) => parseInt(s))
                );
                const keypair =
                  tweetnacl__WEBPACK_IMPORTED_MODULE_0___default().sign.keyPair.fromSeed(
                    new Uint8Array(seed)
                  );
                publicKey = base64ToString(keypair.publicKey);
                signature = base64ToString(
                  tweetnacl__WEBPACK_IMPORTED_MODULE_0___default().sign.detached(
                    toBase64(txBytes),
                    keypair.secretKey
                  )
                );
              } else {
                const signed =
                  yield _Authentication__WEBPACK_IMPORTED_MODULE_2__[
                    "default"
                  ].sign(activeAccount.address, txBytes);
                publicKey =
                  signed === null || signed === void 0 ? void 0 : signed.pubKey;
                signature =
                  signed === null || signed === void 0
                    ? void 0
                    : signed.signature;
              }
              if (!signature) return;
              const data = {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  jsonrpc: "2.0",
                  method: "sui_executeTransaction",
                  params: [txBytes, "ED25519", signature, publicKey],
                  id: 1,
                }),
              };
              const executeResponse = yield fetch(endpoint, data);
              const txResponse = yield executeResponse.json();
              return txResponse.result;
            });
          }
          requestPreapproval(preapproval, connection) {
            return __awaiter(this, void 0, void 0, function* () {
              const activeAccount = yield this.getActiveAccount();
              preapproval.address = activeAccount.address;
              const existingPreapprovalRequest =
                yield this.findPreapprovalRequest({
                  preapproval,
                });
              if (
                existingPreapprovalRequest &&
                existingPreapprovalRequest.approved
              ) {
                return {
                  type: "preapproval-response",
                  id: existingPreapprovalRequest.id,
                  approved: existingPreapprovalRequest.approved,
                  preapproval: existingPreapprovalRequest.preapproval,
                };
              }
              preapproval.transactions || (preapproval.transactions = []);
              const preapprovalRequest =
                existingPreapprovalRequest ||
                (yield this.createPreapprovalRequest(
                  preapproval,
                  connection.origin,
                  connection.originTitle,
                  connection.originFavIcon
                ));
              yield this.storePreapprovalRequest(preapprovalRequest);
              const popUp = openPermissionWindow(preapprovalRequest.id);
              const popUpClose = (yield popUp.show()).pipe(
                (0, rxjs__WEBPACK_IMPORTED_MODULE_6__.take)(1),
                (0, rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(() => false)
              );
              const preapprovalResponseMessage =
                this._preapprovalResponseMessages.pipe(
                  (0, rxjs__WEBPACK_IMPORTED_MODULE_8__.filter)(
                    (msg) => msg.id === preapprovalRequest.id
                  ),
                  (0, rxjs__WEBPACK_IMPORTED_MODULE_6__.take)(1)
                );
              return (0, rxjs__WEBPACK_IMPORTED_MODULE_9__.lastValueFrom)(
                (0, rxjs__WEBPACK_IMPORTED_MODULE_10__.race)(
                  popUpClose,
                  preapprovalResponseMessage
                ).pipe(
                  (0, rxjs__WEBPACK_IMPORTED_MODULE_6__.take)(1),
                  (0, rxjs__WEBPACK_IMPORTED_MODULE_7__.map)((response) =>
                    __awaiter(this, void 0, void 0, function* () {
                      if (response && response.approved) {
                        preapprovalRequest.approved = true;
                        preapprovalRequest.preapproval = response.preapproval;
                        yield this.storePreapprovalRequest(preapprovalRequest);
                        if (!preapprovalRequest) {
                          throw new Error(`Preapproval result is empty`);
                        }
                        return {
                          type: "preapproval-response",
                          id: preapprovalRequest.id,
                          approved: preapprovalRequest.approved,
                          preapproval: preapprovalRequest.preapproval,
                        };
                      }
                      yield this.removePreapprovalRequest(
                        preapprovalRequest.id
                      );
                      throw new Error("Preapproval rejected by user");
                    })
                  )
                )
              );
            });
          }
          getTransactionRequests() {
            return __awaiter(this, void 0, void 0, function* () {
              const requestsString = yield (0,
              _src_shared_storagex_store__WEBPACK_IMPORTED_MODULE_4__.getEncrypted)(
                TX_STORE_KEY
              );
              return JSON.parse(requestsString || "{}");
            });
          }
          getPreapprovalRequests() {
            return __awaiter(this, void 0, void 0, function* () {
              const resultsString = yield (0,
              _src_shared_storagex_store__WEBPACK_IMPORTED_MODULE_4__.getEncrypted)(
                PREAPPROVAL_KEY
              );
              return JSON.parse(resultsString || "{}");
            });
          }
          getTransactionRequest(txRequestID) {
            return __awaiter(this, void 0, void 0, function* () {
              return (yield this.getTransactionRequests())[txRequestID] || null;
            });
          }
          handleTxMessage(msg) {
            this._txResponseMessages.next(msg);
          }
          handlePreapprovalMessage(msg) {
            this._preapprovalResponseMessages.next(msg);
          }
          getActiveAccount() {
            return __awaiter(this, void 0, void 0, function* () {
              const passphrase = yield (0,
              _src_shared_storagex_store__WEBPACK_IMPORTED_MODULE_4__.getEncrypted)(
                "passphrase"
              );
              const authentication = yield (0,
              _src_shared_storagex_store__WEBPACK_IMPORTED_MODULE_4__.getEncrypted)(
                "authentication"
              );
              const activeAccountIndex = yield (0,
              _src_shared_storagex_store__WEBPACK_IMPORTED_MODULE_4__.getEncrypted)(
                "activeAccountIndex",
                passphrase || authentication
              );
              let accountInfos;
              if (authentication) {
                _Authentication__WEBPACK_IMPORTED_MODULE_2__["default"].set(
                  authentication
                );
                accountInfos =
                  yield _Authentication__WEBPACK_IMPORTED_MODULE_2__[
                    "default"
                  ].getAccountInfos();
              } else {
                const accountInfosString = yield (0,
                _src_shared_storagex_store__WEBPACK_IMPORTED_MODULE_4__.getEncrypted)(
                  "accountInfos",
                  passphrase || authentication
                );
                accountInfos = JSON.parse(accountInfosString || "[]");
              }
              // console.log(
              //     'accountInfos',
              //     passphrase,
              //     authentication,
              //     accountInfos,
              //     activeAccountIndex
              // );
              return accountInfos.find(
                (accountInfo) =>
                  (accountInfo.index || 0) ===
                  parseInt(activeAccountIndex || "0")
              );
            });
          }
          createTransactionRequest(tx, txBytes, origin, originFavIcon) {
            if (tx !== undefined) {
              return {
                id: (0, uuid__WEBPACK_IMPORTED_MODULE_11__["default"])(),
                approved: null,
                origin,
                originFavIcon,
                createdDate: new Date().toISOString(),
                type: "move-call",
                tx,
              };
            } else if (txBytes !== undefined) {
              return {
                id: (0, uuid__WEBPACK_IMPORTED_MODULE_11__["default"])(),
                approved: null,
                origin,
                originFavIcon,
                createdDate: new Date().toISOString(),
                type: "serialized-move-call",
                txBytes,
              };
            } else {
              throw new Error("Either tx or txBytes needs to be defined.");
            }
          }
          createPreapprovalRequest(
            preapproval,
            origin,
            originTitle,
            originFavIcon
          ) {
            return __awaiter(this, void 0, void 0, function* () {
              return {
                type: "preapproval-request",
                id: (0, uuid__WEBPACK_IMPORTED_MODULE_11__["default"])(),
                origin,
                originTitle,
                originFavIcon,
                createdDate: new Date().toISOString(),
                preapproval,
              };
            });
          }
          saveTransactionRequests(txRequests) {
            return __awaiter(this, void 0, void 0, function* () {
              yield (0,
              _src_shared_storagex_store__WEBPACK_IMPORTED_MODULE_4__.setEncrypted)(TX_STORE_KEY, JSON.stringify(txRequests));
            });
          }
          savePreapprovalRequests(requests) {
            return __awaiter(this, void 0, void 0, function* () {
              yield (0,
              _src_shared_storagex_store__WEBPACK_IMPORTED_MODULE_4__.setEncrypted)(PREAPPROVAL_KEY, JSON.stringify(requests));
            });
          }
          storeTransactionRequest(txRequest) {
            return __awaiter(this, void 0, void 0, function* () {
              const txs = yield this.getTransactionRequests();
              txs[txRequest.id] = txRequest;
              yield this.saveTransactionRequests(txs);
            });
          }
          removeTransactionRequest(txID) {
            return __awaiter(this, void 0, void 0, function* () {
              const txs = yield this.getTransactionRequests();
              delete txs[txID];
              yield this.saveTransactionRequests(txs);
            });
          }
          removePreapprovalRequest(permissionID) {
            return __awaiter(this, void 0, void 0, function* () {
              const permissions = yield this.getPreapprovalRequests();
              delete permissions[permissionID];
              yield this.savePreapprovalRequests(permissions);
            });
          }
          storePreapprovalRequest(request) {
            return __awaiter(this, void 0, void 0, function* () {
              const requests = yield this.getPreapprovalRequests();
              requests[request.id] = request;
              yield this.savePreapprovalRequests(requests);
            });
          }
        }
        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          new Transactions();

        /***/
      },

    /***/ "./background/Window.ts":
      /*!******************************!*\
  !*** ./background/Window.ts ***!
  \******************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ Window: () => /* binding */ Window,
          /* harmony export */
        });
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/observable/fromEventPattern.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/share.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/filter.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/take.js"
          );
        /* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! webextension-polyfill */ "../node_modules/webextension-polyfill/dist/browser-polyfill.js"
          );
        /* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default =
          /*#__PURE__*/ __webpack_require__.n(
            webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0
        var __awaiter =
          (undefined && undefined.__awaiter) ||
          function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P
                ? value
                : new P(function (resolve) {
                    resolve(value);
                  });
            }
            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }
              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }
              function step(result) {
                result.done
                  ? resolve(result.value)
                  : adopt(result.value).then(fulfilled, rejected);
              }
              step(
                (generator = generator.apply(thisArg, _arguments || [])).next()
              );
            });
          };

        const windowRemovedStream = (0,
        rxjs__WEBPACK_IMPORTED_MODULE_1__.fromEventPattern)(
          (handler) =>
            webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().windows.onRemoved.addListener(
              handler
            ),
          (handler) =>
            webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().windows.onRemoved.removeListener(
              handler
            )
        ).pipe((0, rxjs__WEBPACK_IMPORTED_MODULE_2__.share)());
        class Window {
          constructor({ url, width = 370, height = 460 }) {
            this._id = null;
            this._url = url;
            this._width = width;
            this._height = height;
          }
          show() {
            return __awaiter(this, void 0, void 0, function* () {
              const {
                width = 0,
                left = 0,
                top = 0,
              } = yield webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().windows.getLastFocused();
              const w =
                yield webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().windows.create(
                  {
                    url: this._url,
                    focused: true,
                    width: this._width,
                    height: this._height,
                    type: "popup",
                    top: top,
                    left: Math.floor(left + width - 450),
                  }
                );
              this._id = typeof w.id === "undefined" ? null : w.id;
              return windowRemovedStream.pipe(
                (0, rxjs__WEBPACK_IMPORTED_MODULE_3__.takeWhile)(
                  () => this._id !== null
                ),
                (0, rxjs__WEBPACK_IMPORTED_MODULE_4__.filter)(
                  (aWindowID) => aWindowID === this._id
                ),
                (0, rxjs__WEBPACK_IMPORTED_MODULE_5__.take)(1)
              );
            });
          }
          close() {
            return __awaiter(this, void 0, void 0, function* () {
              if (this._id !== null) {
                yield webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().windows.remove(
                  this._id
                );
              }
            });
          }
        }

        /***/
      },

    /***/ "./background/connections/Connection.ts":
      /*!**********************************************!*\
  !*** ./background/connections/Connection.ts ***!
  \**********************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ Connection: () => /* binding */ Connection,
          /* harmony export */
        });
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/map.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/take.js"
          );
        /* harmony import */ var _messaging_PortStream__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _messaging/PortStream */ "./shared/messaging/PortStream.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        class Connection {
          constructor(port) {
            this._portStream =
              new _messaging_PortStream__WEBPACK_IMPORTED_MODULE_0__.PortStream(
                port
              );
            this._portStream.onMessage.subscribe((msg) =>
              this.handleMessage(msg)
            );
          }
          get onDisconnect() {
            return this._portStream.onDisconnect.pipe(
              (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.map)((port) => ({
                port,
                connection: this,
              })),
              (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.take)(1)
            );
          }
          send(msg) {
            if (this._portStream.connected) {
              return this._portStream.sendMessage(msg);
            }
          }
        }

        /***/
      },

    /***/ "./background/connections/ContentScriptConnection.ts":
      /*!***********************************************************!*\
  !*** ./background/connections/ContentScriptConnection.ts ***!
  \***********************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ ContentScriptConnection: () =>
            /* binding */ ContentScriptConnection,
          /* harmony export */
        });
        /* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(/*! ../Messages */ "./background/Messages.ts");
        /* harmony import */ var _Connection__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./Connection */ "./background/connections/Connection.ts"
          );
        /* harmony import */ var _messages__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! _messages */ "./shared/messaging/messages/index.ts"
          );
        /* harmony import */ var _payloads_account_GetAccount__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! _payloads/account/GetAccount */ "./shared/messaging/messages/payloads/account/GetAccount.ts"
          );
        /* harmony import */ var _payloads_permissions__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! _payloads/permissions */ "./shared/messaging/messages/payloads/permissions/index.ts"
          );
        /* harmony import */ var _payloads_transactions__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! _payloads/transactions */ "./shared/messaging/messages/payloads/transactions/index.ts"
          );
        /* harmony import */ var _src_background_Permissions__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! _src/background/Permissions */ "./background/Permissions.ts"
          );
        /* harmony import */ var _src_background_Transactions__WEBPACK_IMPORTED_MODULE_7__ =
          __webpack_require__(
            /*! _src/background/Transactions */ "./background/Transactions.ts"
          );
        /* harmony import */ var _src_shared_messaging_messages_payloads_connections_DisconnectRequest__WEBPACK_IMPORTED_MODULE_8__ =
          __webpack_require__(
            /*! _src/shared/messaging/messages/payloads/connections/DisconnectRequest */ "./shared/messaging/messages/payloads/connections/DisconnectRequest.ts"
          );
        /* harmony import */ var _src_shared_messaging_messages_payloads_messages_ExecuteSignMessageRequest__WEBPACK_IMPORTED_MODULE_9__ =
          __webpack_require__(
            /*! _src/shared/messaging/messages/payloads/messages/ExecuteSignMessageRequest */ "./shared/messaging/messages/payloads/messages/ExecuteSignMessageRequest.ts"
          );
        /* harmony import */ var _src_shared_messaging_messages_payloads_url_OpenWallet__WEBPACK_IMPORTED_MODULE_10__ =
          __webpack_require__(
            /*! _src/shared/messaging/messages/payloads/url/OpenWallet */ "./shared/messaging/messages/payloads/url/OpenWallet.ts"
          );
        /* harmony import */ var _src_shared_utils__WEBPACK_IMPORTED_MODULE_11__ =
          __webpack_require__(
            /*! _src/shared/utils */ "./shared/utils/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0
        var __awaiter =
          (undefined && undefined.__awaiter) ||
          function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P
                ? value
                : new P(function (resolve) {
                    resolve(value);
                  });
            }
            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }
              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }
              function step(result) {
                result.done
                  ? resolve(result.value)
                  : adopt(result.value).then(fulfilled, rejected);
              }
              step(
                (generator = generator.apply(thisArg, _arguments || [])).next()
              );
            });
          };

        class ContentScriptConnection extends _Connection__WEBPACK_IMPORTED_MODULE_1__.Connection {
          constructor(port) {
            var _a, _b, _c, _d;
            super(port);
            this.origin = this.getOrigin(port);
            this.originFavIcon =
              (_b =
                (_a = port.sender) === null || _a === void 0
                  ? void 0
                  : _a.tab) === null || _b === void 0
                ? void 0
                : _b.favIconUrl;
            this.originTitle =
              (_d =
                (_c = port.sender) === null || _c === void 0
                  ? void 0
                  : _c.tab) === null || _d === void 0
                ? void 0
                : _d.title;
          }
          handleMessage(msg) {
            return __awaiter(this, void 0, void 0, function* () {
              const { payload } = msg;
              if (
                (0,
                _payloads_account_GetAccount__WEBPACK_IMPORTED_MODULE_3__.isGetAccount)(
                  payload
                )
              ) {
                const existingPermission =
                  yield _src_background_Permissions__WEBPACK_IMPORTED_MODULE_6__[
                    "default"
                  ].getPermission(this.origin);
                if (
                  !(yield _src_background_Permissions__WEBPACK_IMPORTED_MODULE_6__[
                    "default"
                  ].hasPermissions(
                    this.origin,
                    ["viewAccount"],
                    existingPermission
                  )) ||
                  !existingPermission
                ) {
                  this.sendNotAllowedError(msg.id);
                } else {
                  this.sendAccounts(existingPermission.accounts, msg.id);
                }
              } else if (
                (0,
                _src_shared_messaging_messages_payloads_url_OpenWallet__WEBPACK_IMPORTED_MODULE_10__.isGetUrl)(
                  payload
                )
              ) {
                (0,
                _src_shared_utils__WEBPACK_IMPORTED_MODULE_11__.openInNewTab)(
                  "ui.html#/initialize/hosted?log-in=true"
                );
                this.send(
                  (0, _messages__WEBPACK_IMPORTED_MODULE_2__.createMessage)(
                    {
                      type: "open-wallet-response",
                      success: true,
                    },
                    msg.id
                  )
                );
              } else if (
                (0,
                _payloads_permissions__WEBPACK_IMPORTED_MODULE_4__.isHasPermissionRequest)(
                  payload
                )
              ) {
                this.send(
                  (0, _messages__WEBPACK_IMPORTED_MODULE_2__.createMessage)(
                    {
                      type: "has-permissions-response",
                      result:
                        yield _src_background_Permissions__WEBPACK_IMPORTED_MODULE_6__[
                          "default"
                        ].hasPermissions(this.origin, payload.permissions),
                    },
                    msg.id
                  )
                );
              } else if (
                (0,
                _payloads_permissions__WEBPACK_IMPORTED_MODULE_4__.isAcquirePermissionsRequest)(
                  payload
                )
              ) {
                try {
                  const permission =
                    yield _src_background_Permissions__WEBPACK_IMPORTED_MODULE_6__[
                      "default"
                    ].acquirePermissions(payload.permissions, this);
                  this.send(
                    (0, _messages__WEBPACK_IMPORTED_MODULE_2__.createMessage)(
                      {
                        type: "acquire-permissions-response",
                        result: !!permission.allowed,
                      },
                      msg.id
                    )
                  );
                } catch (e) {
                  this.sendError(
                    {
                      error: true,
                      message: e.toString(),
                      code: -1,
                    },
                    msg.id
                  );
                }
              } else if (
                (0,
                _payloads_transactions__WEBPACK_IMPORTED_MODULE_5__.isExecuteTransactionRequest)(
                  payload
                )
              ) {
                const allowed =
                  yield _src_background_Permissions__WEBPACK_IMPORTED_MODULE_6__[
                    "default"
                  ].hasPermissions(this.origin, [
                    "viewAccount",
                    "suggestTransactions",
                  ]);
                if (allowed) {
                  try {
                    const result =
                      yield _src_background_Transactions__WEBPACK_IMPORTED_MODULE_7__[
                        "default"
                      ].executeTransaction(
                        payload.transaction,
                        payload.transactionBytes,
                        this
                      );
                    this.send(
                      (0, _messages__WEBPACK_IMPORTED_MODULE_2__.createMessage)(
                        { type: "execute-transaction-response", result },
                        msg.id
                      )
                    );
                  } catch (e) {
                    this.sendError(
                      {
                        error: true,
                        code: -1,
                        message: e.message,
                      },
                      msg.id
                    );
                  }
                } else {
                  this.sendNotAllowedError(msg.id);
                }
              } else if (
                (0,
                _src_shared_messaging_messages_payloads_messages_ExecuteSignMessageRequest__WEBPACK_IMPORTED_MODULE_9__.isExecuteSignMessageRequest)(
                  payload
                )
              ) {
                const allowed =
                  yield _src_background_Permissions__WEBPACK_IMPORTED_MODULE_6__[
                    "default"
                  ].hasPermissions(this.origin, [
                    "viewAccount",
                    "suggestSignMessages",
                  ]);
                if (allowed) {
                  try {
                    const signature =
                      yield _Messages__WEBPACK_IMPORTED_MODULE_0__[
                        "default"
                      ].signMessage(
                        payload.messageData,
                        payload.messageString,
                        this
                      );
                    this.send(
                      (0, _messages__WEBPACK_IMPORTED_MODULE_2__.createMessage)(
                        {
                          type: "execute-sign-message-response",
                          signature,
                        },
                        msg.id
                      )
                    );
                  } catch (e) {
                    this.sendError(
                      {
                        error: true,
                        code: -1,
                        message: e.message,
                      },
                      msg.id
                    );
                  }
                } else {
                  this.sendNotAllowedError(msg.id);
                }
              } else if (
                (0,
                _payloads_transactions__WEBPACK_IMPORTED_MODULE_5__.isPreapprovalRequest)(
                  payload
                )
              ) {
                const allowed =
                  yield _src_background_Permissions__WEBPACK_IMPORTED_MODULE_6__[
                    "default"
                  ].hasPermissions(this.origin, [
                    "viewAccount",
                    "suggestTransactions",
                  ]);
                if (allowed) {
                  try {
                    const result =
                      yield _src_background_Transactions__WEBPACK_IMPORTED_MODULE_7__[
                        "default"
                      ].requestPreapproval(payload.preapproval, this);
                    this.send(
                      (0, _messages__WEBPACK_IMPORTED_MODULE_2__.createMessage)(
                        result,
                        msg.id
                      )
                    );
                  } catch (e) {
                    this.sendError(
                      {
                        error: true,
                        code: -1,
                        message: e.message,
                      },
                      msg.id
                    );
                  }
                } else {
                  this.sendNotAllowedError(msg.id);
                }
              } else if (
                (0,
                _src_shared_messaging_messages_payloads_connections_DisconnectRequest__WEBPACK_IMPORTED_MODULE_8__.isDisconnectRequest)(
                  payload
                )
              ) {
                let success = true;
                try {
                  yield _src_background_Permissions__WEBPACK_IMPORTED_MODULE_6__[
                    "default"
                  ].revokeAllPermissions(this.origin);
                } catch (e) {
                  success = false;
                }
                this.send(
                  (0, _messages__WEBPACK_IMPORTED_MODULE_2__.createMessage)(
                    {
                      type: "disconnect-response",
                      success,
                    },
                    msg.id
                  )
                );
              }
            });
          }
          getOrigin(port) {
            var _a, _b;
            if (
              (_a = port.sender) === null || _a === void 0 ? void 0 : _a.origin
            ) {
              return port.sender.origin;
            }
            if (
              (_b = port.sender) === null || _b === void 0 ? void 0 : _b.url
            ) {
              return new URL(port.sender.url).origin;
            }
            throw new Error(
              "[ContentScriptConnection] port doesn't include an origin"
            );
          }
          sendError(error, responseForID) {
            this.send(
              (0, _messages__WEBPACK_IMPORTED_MODULE_2__.createMessage)(
                error,
                responseForID
              )
            );
          }
          sendNotAllowedError(requestID) {
            this.sendError(
              {
                error: true,
                message:
                  "Operation not allowed, dapp doesn't have the required permissions",
                code: -2,
              },
              requestID
            );
          }
          sendAccounts(accounts, responseForID) {
            this.send(
              (0, _messages__WEBPACK_IMPORTED_MODULE_2__.createMessage)(
                {
                  type: "get-account-response",
                  accounts,
                },
                responseForID
              )
            );
          }
        }
        ContentScriptConnection.CHANNEL = "ethos_content<->background";

        /***/
      },

    /***/ "./background/connections/UiConnection.ts":
      /*!************************************************!*\
  !*** ./background/connections/UiConnection.ts ***!
  \************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ UiConnection: () => /* binding */ UiConnection,
          /* harmony export */
        });
        /* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(/*! ../Messages */ "./background/Messages.ts");
        /* harmony import */ var _Connection__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./Connection */ "./background/connections/Connection.ts"
          );
        /* harmony import */ var _messages__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! _messages */ "./shared/messaging/messages/index.ts"
          );
        /* harmony import */ var _payloads_permissions__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! _payloads/permissions */ "./shared/messaging/messages/payloads/permissions/index.ts"
          );
        /* harmony import */ var _payloads_transactions__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! _payloads/transactions */ "./shared/messaging/messages/payloads/transactions/index.ts"
          );
        /* harmony import */ var _payloads_transactions_ui_GetTransactionRequests__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! _payloads/transactions/ui/GetTransactionRequests */ "./shared/messaging/messages/payloads/transactions/ui/GetTransactionRequests.ts"
          );
        /* harmony import */ var _payloads_transactions_ui_TransactionRequestResponse__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! _payloads/transactions/ui/TransactionRequestResponse */ "./shared/messaging/messages/payloads/transactions/ui/TransactionRequestResponse.ts"
          );
        /* harmony import */ var _src_background_Permissions__WEBPACK_IMPORTED_MODULE_7__ =
          __webpack_require__(
            /*! _src/background/Permissions */ "./background/Permissions.ts"
          );
        /* harmony import */ var _src_background_Transactions__WEBPACK_IMPORTED_MODULE_8__ =
          __webpack_require__(
            /*! _src/background/Transactions */ "./background/Transactions.ts"
          );
        /* harmony import */ var _src_shared_messaging_messages_payloads_messages_ui_GetSignMessageRequests__WEBPACK_IMPORTED_MODULE_9__ =
          __webpack_require__(
            /*! _src/shared/messaging/messages/payloads/messages/ui/GetSignMessageRequests */ "./shared/messaging/messages/payloads/messages/ui/GetSignMessageRequests.ts"
          );
        /* harmony import */ var _src_shared_messaging_messages_payloads_messages_ui_SignMessageRequestResponse__WEBPACK_IMPORTED_MODULE_10__ =
          __webpack_require__(
            /*! _src/shared/messaging/messages/payloads/messages/ui/SignMessageRequestResponse */ "./shared/messaging/messages/payloads/messages/ui/SignMessageRequestResponse.ts"
          );
        /* harmony import */ var _src_shared_messaging_messages_payloads_transactions_ui_GetPreapprovalRequests__WEBPACK_IMPORTED_MODULE_11__ =
          __webpack_require__(
            /*! _src/shared/messaging/messages/payloads/transactions/ui/GetPreapprovalRequests */ "./shared/messaging/messages/payloads/transactions/ui/GetPreapprovalRequests.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0
        var __awaiter =
          (undefined && undefined.__awaiter) ||
          function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P
                ? value
                : new P(function (resolve) {
                    resolve(value);
                  });
            }
            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }
              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }
              function step(result) {
                result.done
                  ? resolve(result.value)
                  : adopt(result.value).then(fulfilled, rejected);
              }
              step(
                (generator = generator.apply(thisArg, _arguments || [])).next()
              );
            });
          };

        class UiConnection extends _Connection__WEBPACK_IMPORTED_MODULE_1__.Connection {
          handleMessage(msg) {
            return __awaiter(this, void 0, void 0, function* () {
              const { payload, id } = msg;
              if (
                (0,
                _payloads_permissions__WEBPACK_IMPORTED_MODULE_3__.isGetPermissionRequests)(
                  payload
                )
              ) {
                this.sendPermissions(
                  Object.values(
                    yield _src_background_Permissions__WEBPACK_IMPORTED_MODULE_7__[
                      "default"
                    ].getPermissions()
                  ),
                  id
                );
              } else if (
                (0,
                _payloads_permissions__WEBPACK_IMPORTED_MODULE_3__.isPermissionResponse)(
                  payload
                )
              ) {
                _src_background_Permissions__WEBPACK_IMPORTED_MODULE_7__[
                  "default"
                ].handlePermissionResponse(payload);
              } else if (
                (0,
                _payloads_transactions_ui_TransactionRequestResponse__WEBPACK_IMPORTED_MODULE_6__.isTransactionRequestResponse)(
                  payload
                )
              ) {
                _src_background_Transactions__WEBPACK_IMPORTED_MODULE_8__[
                  "default"
                ].handleTxMessage(payload);
              } else if (
                (0,
                _payloads_transactions_ui_GetTransactionRequests__WEBPACK_IMPORTED_MODULE_5__.isGetTransactionRequests)(
                  payload
                )
              ) {
                this.sendTransactionRequests(
                  Object.values(
                    yield _src_background_Transactions__WEBPACK_IMPORTED_MODULE_8__[
                      "default"
                    ].getTransactionRequests()
                  ),
                  id
                );
              } else if (
                (0,
                _src_shared_messaging_messages_payloads_messages_ui_SignMessageRequestResponse__WEBPACK_IMPORTED_MODULE_10__.isSignMessageRequestResponse)(
                  payload
                )
              ) {
                _Messages__WEBPACK_IMPORTED_MODULE_0__["default"].handleMessage(
                  payload
                );
              } else if (
                (0,
                _src_shared_messaging_messages_payloads_messages_ui_GetSignMessageRequests__WEBPACK_IMPORTED_MODULE_9__.isGetSignMessageRequests)(
                  payload
                )
              ) {
                this.sendSignMessageRequests(
                  Object.values(
                    yield _Messages__WEBPACK_IMPORTED_MODULE_0__[
                      "default"
                    ].getSignMessageRequests()
                  ),
                  id
                );
              } else if (
                (0,
                _payloads_transactions__WEBPACK_IMPORTED_MODULE_4__.isPreapprovalResponse)(
                  payload
                )
              ) {
                _src_background_Transactions__WEBPACK_IMPORTED_MODULE_8__[
                  "default"
                ].handlePreapprovalMessage(payload);
              } else if (
                (0,
                _src_shared_messaging_messages_payloads_transactions_ui_GetPreapprovalRequests__WEBPACK_IMPORTED_MODULE_11__.isGetPreapprovalRequests)(
                  payload
                )
              ) {
                this.sendPreapprovalRequests(
                  Object.values(
                    yield _src_background_Transactions__WEBPACK_IMPORTED_MODULE_8__[
                      "default"
                    ].getPreapprovalRequests()
                  ),
                  id
                );
              }
            });
          }
          sendPermissions(permissions, requestID) {
            this.send(
              (0, _messages__WEBPACK_IMPORTED_MODULE_2__.createMessage)(
                {
                  type: "permission-request",
                  permissions,
                },
                requestID
              )
            );
          }
          sendTransactionRequests(txRequests, requestID) {
            this.send(
              (0, _messages__WEBPACK_IMPORTED_MODULE_2__.createMessage)(
                {
                  type: "get-transaction-requests-response",
                  txRequests,
                },
                requestID
              )
            );
          }
          sendSignMessageRequests(signMessageRequests, requestID) {
            this.send(
              (0, _messages__WEBPACK_IMPORTED_MODULE_2__.createMessage)(
                {
                  type: "get-sign-message-requests-response",
                  signMessageRequests,
                },
                requestID
              )
            );
          }
          sendPreapprovalRequests(preapprovalRequests, requestID) {
            this.send(
              (0, _messages__WEBPACK_IMPORTED_MODULE_2__.createMessage)(
                {
                  type: "get-preapproval-response",
                  preapprovalRequests,
                },
                requestID
              )
            );
          }
        }
        UiConnection.CHANNEL = "ethos_ui<->background";

        /***/
      },

    /***/ "./background/connections/index.ts":
      /*!*****************************************!*\
  !*** ./background/connections/index.ts ***!
  \*****************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ Connections: () => /* binding */ Connections,
          /* harmony export */
        });
        /* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! webextension-polyfill */ "../node_modules/webextension-polyfill/dist/browser-polyfill.js"
          );
        /* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default =
          /*#__PURE__*/ __webpack_require__.n(
            webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__
          );
        /* harmony import */ var _ContentScriptConnection__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./ContentScriptConnection */ "./background/connections/ContentScriptConnection.ts"
          );
        /* harmony import */ var _UiConnection__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./UiConnection */ "./background/connections/UiConnection.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        class Connections {
          constructor() {
            this._connections = [];
            webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.onConnect.addListener(
              (port) => {
                try {
                  let connection;
                  switch (port.name) {
                    case _ContentScriptConnection__WEBPACK_IMPORTED_MODULE_1__
                      .ContentScriptConnection.CHANNEL:
                      connection =
                        new _ContentScriptConnection__WEBPACK_IMPORTED_MODULE_1__.ContentScriptConnection(
                          port
                        );
                      break;
                    case _UiConnection__WEBPACK_IMPORTED_MODULE_2__.UiConnection
                      .CHANNEL:
                      connection =
                        new _UiConnection__WEBPACK_IMPORTED_MODULE_2__.UiConnection(
                          port
                        );
                      break;
                    default:
                      throw new Error(
                        `[Connections] Unknown connection ${port.name}`
                      );
                  }
                  this._connections.push(connection);
                  connection.onDisconnect.subscribe(() => {
                    const connectionIndex =
                      this._connections.indexOf(connection);
                    if (connectionIndex >= 0) {
                      this._connections.splice(connectionIndex, 1);
                    }
                  });
                } catch (e) {
                  port.disconnect();
                }
              }
            );
          }
        }

        /***/
      },

    /***/ "./shared/constants.ts":
      /*!*****************************!*\
  !*** ./shared/constants.ts ***!
  \*****************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ BASE_URL: () => /* binding */ BASE_URL,
          /* harmony export */ DASHBOARD_LINK: () =>
            /* binding */ DASHBOARD_LINK,
          /* harmony export */ IFRAME_URL: () => /* binding */ IFRAME_URL,
          /* harmony export */ LOGIN_URL: () => /* binding */ LOGIN_URL,
          /* harmony export */ NFT_EXPERIMENT_LINK: () =>
            /* binding */ NFT_EXPERIMENT_LINK,
          /* harmony export */ ToS_LINK: () => /* binding */ ToS_LINK,
          /* harmony export */
        });
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0
        const BASE_URL = "https://ethoswallet.xyz" || 0;
        // const queryParamFrom = '?from=ethos-extension';
        const ToS_LINK = BASE_URL + "/terms";
        const DASHBOARD_LINK = BASE_URL + "/dashboard"; // + queryParamFrom;
        const IFRAME_URL = BASE_URL + "/wallet?appId=ethos";
        const NFT_EXPERIMENT_LINK = BASE_URL + "/dashboard/experiment"; //+ queryParamFrom;
        const LOGIN_URL = BASE_URL + "/logged_in";

        /***/
      },

    /***/ "./shared/encryption/password.ts":
      /*!***************************************!*\
  !*** ./shared/encryption/password.ts ***!
  \***************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ decrypt: () => /* binding */ decrypt,
          /* harmony export */ encrypt: () => /* binding */ encrypt,
          /* harmony export */
        });
        /* harmony import */ var aes_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(/*! aes-js */ "../node_modules/aes-js/index.js");
        /* harmony import */ var aes_js__WEBPACK_IMPORTED_MODULE_0___default =
          /*#__PURE__*/ __webpack_require__.n(
            aes_js__WEBPACK_IMPORTED_MODULE_0__
          );
        /* harmony import */ var asmcrypto_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! asmcrypto.js */ "../node_modules/asmcrypto.js/asmcrypto.all.es8.js"
          );

        const ITERATIONS = 10000;
        const KEY_LENGTH = 32;
        function encrypt(text, passphrase, masterSalt) {
          const salt = masterSalt || crypto.getRandomValues(new Uint8Array(16));
          const key = generateKey(passphrase, salt);
          const nonce = crypto.getRandomValues(new Uint8Array(16));
          const aesCtr =
            new aes_js__WEBPACK_IMPORTED_MODULE_0__.ModeOfOperation.ctr(
              key,
              new aes_js__WEBPACK_IMPORTED_MODULE_0__.Counter(
                masterSalt ? 1 : nonce
              )
            );
          const encodedText = encodeURIComponent(text);
          const decryptedBytes =
            aes_js__WEBPACK_IMPORTED_MODULE_0__.utils.utf8.toBytes(encodedText);
          const encryptedBytes = aesCtr.encrypt(decryptedBytes);
          const encryptedText =
            aes_js__WEBPACK_IMPORTED_MODULE_0__.utils.hex.fromBytes(
              encryptedBytes
            );
          if (masterSalt) {
            return encryptedText;
          }
          const encryptedData = JSON.stringify({
            encryptedText,
            saltString:
              aes_js__WEBPACK_IMPORTED_MODULE_0__.utils.hex.fromBytes(salt),
            nonceString:
              aes_js__WEBPACK_IMPORTED_MODULE_0__.utils.hex.fromBytes(nonce),
          });
          return encryptedData;
        }
        function decrypt(encryptedData, passphrase) {
          const { saltString, nonceString, encryptedText } =
            JSON.parse(encryptedData);
          const salt =
            aes_js__WEBPACK_IMPORTED_MODULE_0__.utils.hex.toBytes(saltString);
          const nonce =
            aes_js__WEBPACK_IMPORTED_MODULE_0__.utils.hex.toBytes(nonceString);
          const key = generateKey(passphrase, salt);
          const aesCtr =
            new aes_js__WEBPACK_IMPORTED_MODULE_0__.ModeOfOperation.ctr(
              key,
              new aes_js__WEBPACK_IMPORTED_MODULE_0__.Counter(nonce)
            );
          const encryptedBytes =
            aes_js__WEBPACK_IMPORTED_MODULE_0__.utils.hex.toBytes(
              encryptedText
            );
          const decryptedBytes = aesCtr.decrypt(encryptedBytes);
          const encodedText =
            aes_js__WEBPACK_IMPORTED_MODULE_0__.utils.utf8.fromBytes(
              decryptedBytes
            );
          return decodeURIComponent(encodedText);
        }
        function generateKey(passphrase, salt) {
          const passphraseBytes =
            aes_js__WEBPACK_IMPORTED_MODULE_0__.utils.utf8.toBytes(passphrase);
          return (0,
          asmcrypto_js__WEBPACK_IMPORTED_MODULE_1__.Pbkdf2HmacSha256)(
            new Uint8Array(passphraseBytes),
            new Uint8Array(salt),
            ITERATIONS,
            KEY_LENGTH
          );
        }

        /***/
      },

    /***/ "./shared/messaging/PortStream.ts":
      /*!****************************************!*\
  !*** ./shared/messaging/PortStream.ts ***!
  \****************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ PortStream: () => /* binding */ PortStream,
          /* harmony export */
        });
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/observable/fromEventPattern.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/take.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/tap.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/share.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js"
          );
        /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! rxjs */ "../node_modules/rxjs/dist/esm5/internal/operators/filter.js"
          );
        /* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! webextension-polyfill */ "../node_modules/webextension-polyfill/dist/browser-polyfill.js"
          );
        /* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default =
          /*#__PURE__*/ __webpack_require__.n(
            webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        class PortStream {
          constructor(port) {
            this._port = port;
            this._disconnectStream = (0,
            rxjs__WEBPACK_IMPORTED_MODULE_1__.fromEventPattern)(
              (h) => this._port.onDisconnect.addListener(h),
              (h) => this._port.onDisconnect.removeListener(h)
            ).pipe(
              (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.take)(1),
              (0, rxjs__WEBPACK_IMPORTED_MODULE_3__.tap)(
                () => (this._connected = false)
              ),
              (0, rxjs__WEBPACK_IMPORTED_MODULE_4__.share)()
            );
            this._messagesStream = (0,
            rxjs__WEBPACK_IMPORTED_MODULE_1__.fromEventPattern)(
              (h) => this._port.onMessage.addListener(h),
              (h) => this._port.onMessage.removeListener(h),
              (msg) => msg
            ).pipe(
              (0, rxjs__WEBPACK_IMPORTED_MODULE_4__.share)(),
              (0, rxjs__WEBPACK_IMPORTED_MODULE_5__.takeUntil)(
                this._disconnectStream
              )
            );
            this._connected = true;
          }
          static connectToBackgroundService(name) {
            return new PortStream(
              webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.connect(
                { name }
              )
            );
          }
          get onMessage() {
            return this._messagesStream;
          }
          get onDisconnect() {
            return this._disconnectStream;
          }
          get connected() {
            return this._connected;
          }
          sendMessage(msg) {
            if (!this._port) {
              throw new Error(
                "Port to background service worker is not defined"
              );
            }
            this._port.postMessage(msg);
            return this.createResponseObservable(msg.id);
          }
          createResponseObservable(requestMsgID) {
            return this._messagesStream.pipe(
              (0, rxjs__WEBPACK_IMPORTED_MODULE_6__.filter)(
                (msg) => msg.id === requestMsgID
              )
            );
          }
        }

        /***/
      },

    /***/ "./shared/messaging/messages/Message.ts":
      /*!**********************************************!*\
  !*** ./shared/messaging/messages/Message.ts ***!
  \**********************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ createMessage: () => /* binding */ createMessage,
          /* harmony export */
        });
        /* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! uuid */ "../node_modules/uuid/dist/esm-browser/v4.js"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function createMessage(payload, id) {
          return {
            id: id || (0, uuid__WEBPACK_IMPORTED_MODULE_0__["default"])(),
            payload,
          };
        }

        /***/
      },

    /***/ "./shared/messaging/messages/index.ts":
      /*!********************************************!*\
  !*** ./shared/messaging/messages/index.ts ***!
  \********************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ createMessage: () =>
            /* reexport safe */ _Message__WEBPACK_IMPORTED_MODULE_0__.createMessage,
          /* harmony export */
        });
        /* harmony import */ var _Message__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./Message */ "./shared/messaging/messages/Message.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/BasePayload.ts":
      /*!***********************************************************!*\
  !*** ./shared/messaging/messages/payloads/BasePayload.ts ***!
  \***********************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isBasePayload: () => /* binding */ isBasePayload,
          /* harmony export */
        });
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0
        function isBasePayload(payload) {
          return "type" in payload && typeof payload.type !== "undefined";
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/ErrorPayload.ts":
      /*!************************************************************!*\
  !*** ./shared/messaging/messages/payloads/ErrorPayload.ts ***!
  \************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isErrorPayload: () =>
            /* binding */ isErrorPayload,
          /* harmony export */
        });
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0
        function isErrorPayload(payload) {
          return "error" in payload && payload.error === true;
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/Payload.ts":
      /*!*******************************************************!*\
  !*** ./shared/messaging/messages/payloads/Payload.ts ***!
  \*******************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/account/GetAccount.ts":
      /*!******************************************************************!*\
  !*** ./shared/messaging/messages/payloads/account/GetAccount.ts ***!
  \******************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isGetAccount: () => /* binding */ isGetAccount,
          /* harmony export */
        });
        /* harmony import */ var _payloads__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _payloads */ "./shared/messaging/messages/payloads/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function isGetAccount(payload) {
          return (
            (0, _payloads__WEBPACK_IMPORTED_MODULE_0__.isBasePayload)(
              payload
            ) && payload.type === "get-account"
          );
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/connections/DisconnectRequest.ts":
      /*!*****************************************************************************!*\
  !*** ./shared/messaging/messages/payloads/connections/DisconnectRequest.ts ***!
  \*****************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isDisconnectRequest: () =>
            /* binding */ isDisconnectRequest,
          /* harmony export */
        });
        /* harmony import */ var _payloads__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _payloads */ "./shared/messaging/messages/payloads/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function isDisconnectRequest(payload) {
          return (
            (0, _payloads__WEBPACK_IMPORTED_MODULE_0__.isBasePayload)(
              payload
            ) && payload.type === "disconnect-request"
          );
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/index.ts":
      /*!*****************************************************!*\
  !*** ./shared/messaging/messages/payloads/index.ts ***!
  \*****************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isBasePayload: () =>
            /* reexport safe */ _BasePayload__WEBPACK_IMPORTED_MODULE_0__.isBasePayload,
          /* harmony export */ isErrorPayload: () =>
            /* reexport safe */ _ErrorPayload__WEBPACK_IMPORTED_MODULE_1__.isErrorPayload,
          /* harmony export */
        });
        /* harmony import */ var _BasePayload__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./BasePayload */ "./shared/messaging/messages/payloads/BasePayload.ts"
          );
        /* harmony import */ var _ErrorPayload__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./ErrorPayload */ "./shared/messaging/messages/payloads/ErrorPayload.ts"
          );
        /* harmony import */ var _Payload__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./Payload */ "./shared/messaging/messages/payloads/Payload.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/messages/ExecuteSignMessageRequest.ts":
      /*!**********************************************************************************!*\
  !*** ./shared/messaging/messages/payloads/messages/ExecuteSignMessageRequest.ts ***!
  \**********************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isExecuteSignMessageRequest: () =>
            /* binding */ isExecuteSignMessageRequest,
          /* harmony export */
        });
        /* harmony import */ var _payloads__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _payloads */ "./shared/messaging/messages/payloads/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function isExecuteSignMessageRequest(payload) {
          return (
            (0, _payloads__WEBPACK_IMPORTED_MODULE_0__.isBasePayload)(
              payload
            ) && payload.type === "execute-sign-message-request"
          );
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/messages/ui/GetSignMessageRequests.ts":
      /*!**********************************************************************************!*\
  !*** ./shared/messaging/messages/payloads/messages/ui/GetSignMessageRequests.ts ***!
  \**********************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isGetSignMessageRequests: () =>
            /* binding */ isGetSignMessageRequests,
          /* harmony export */
        });
        /* harmony import */ var _payloads__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _payloads */ "./shared/messaging/messages/payloads/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function isGetSignMessageRequests(payload) {
          return (
            (0, _payloads__WEBPACK_IMPORTED_MODULE_0__.isBasePayload)(
              payload
            ) && payload.type === "get-sign-message-requests"
          );
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/messages/ui/SignMessageRequestResponse.ts":
      /*!**************************************************************************************!*\
  !*** ./shared/messaging/messages/payloads/messages/ui/SignMessageRequestResponse.ts ***!
  \**************************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isSignMessageRequestResponse: () =>
            /* binding */ isSignMessageRequestResponse,
          /* harmony export */
        });
        /* harmony import */ var _payloads__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _payloads */ "./shared/messaging/messages/payloads/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function isSignMessageRequestResponse(payload) {
          return (
            (0, _payloads__WEBPACK_IMPORTED_MODULE_0__.isBasePayload)(
              payload
            ) && payload.type === "sign-message-request-response"
          );
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/permissions/AcquirePermissionsRequest.ts":
      /*!*************************************************************************************!*\
  !*** ./shared/messaging/messages/payloads/permissions/AcquirePermissionsRequest.ts ***!
  \*************************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isAcquirePermissionsRequest: () =>
            /* binding */ isAcquirePermissionsRequest,
          /* harmony export */
        });
        /* harmony import */ var _payloads__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _payloads */ "./shared/messaging/messages/payloads/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function isAcquirePermissionsRequest(payload) {
          return (
            (0, _payloads__WEBPACK_IMPORTED_MODULE_0__.isBasePayload)(
              payload
            ) && payload.type === "acquire-permissions-request"
          );
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/permissions/AcquirePermissionsResponse.ts":
      /*!**************************************************************************************!*\
  !*** ./shared/messaging/messages/payloads/permissions/AcquirePermissionsResponse.ts ***!
  \**************************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isAcquirePermissionsResponse: () =>
            /* binding */ isAcquirePermissionsResponse,
          /* harmony export */
        });
        /* harmony import */ var _payloads__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _payloads */ "./shared/messaging/messages/payloads/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function isAcquirePermissionsResponse(payload) {
          return (
            (0, _payloads__WEBPACK_IMPORTED_MODULE_0__.isBasePayload)(
              payload
            ) && payload.type === "acquire-permissions-response"
          );
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/permissions/GetPermissionRequests.ts":
      /*!*********************************************************************************!*\
  !*** ./shared/messaging/messages/payloads/permissions/GetPermissionRequests.ts ***!
  \*********************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isGetPermissionRequests: () =>
            /* binding */ isGetPermissionRequests,
          /* harmony export */
        });
        /* harmony import */ var _payloads__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _payloads */ "./shared/messaging/messages/payloads/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function isGetPermissionRequests(payload) {
          return (
            (0, _payloads__WEBPACK_IMPORTED_MODULE_0__.isBasePayload)(
              payload
            ) && payload.type === "get-permission-requests"
          );
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/permissions/HasPermissionsRequest.ts":
      /*!*********************************************************************************!*\
  !*** ./shared/messaging/messages/payloads/permissions/HasPermissionsRequest.ts ***!
  \*********************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isHasPermissionRequest: () =>
            /* binding */ isHasPermissionRequest,
          /* harmony export */
        });
        /* harmony import */ var _payloads__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _payloads */ "./shared/messaging/messages/payloads/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function isHasPermissionRequest(payload) {
          return (
            (0, _payloads__WEBPACK_IMPORTED_MODULE_0__.isBasePayload)(
              payload
            ) && payload.type === "has-permissions-request"
          );
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/permissions/HasPermissionsResponse.ts":
      /*!**********************************************************************************!*\
  !*** ./shared/messaging/messages/payloads/permissions/HasPermissionsResponse.ts ***!
  \**********************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isHasPermissionResponse: () =>
            /* binding */ isHasPermissionResponse,
          /* harmony export */
        });
        /* harmony import */ var _payloads__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _payloads */ "./shared/messaging/messages/payloads/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function isHasPermissionResponse(payload) {
          return (
            (0, _payloads__WEBPACK_IMPORTED_MODULE_0__.isBasePayload)(
              payload
            ) && payload.type === "has-permissions-response"
          );
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/permissions/Permission.ts":
      /*!**********************************************************************!*\
  !*** ./shared/messaging/messages/payloads/permissions/Permission.ts ***!
  \**********************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/permissions/PermissionRequests.ts":
      /*!******************************************************************************!*\
  !*** ./shared/messaging/messages/payloads/permissions/PermissionRequests.ts ***!
  \******************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isPermissionRequests: () =>
            /* binding */ isPermissionRequests,
          /* harmony export */
        });
        /* harmony import */ var _payloads__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _payloads */ "./shared/messaging/messages/payloads/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function isPermissionRequests(payload) {
          return (
            (0, _payloads__WEBPACK_IMPORTED_MODULE_0__.isBasePayload)(
              payload
            ) && payload.type === "permission-request"
          );
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/permissions/PermissionResponse.ts":
      /*!******************************************************************************!*\
  !*** ./shared/messaging/messages/payloads/permissions/PermissionResponse.ts ***!
  \******************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isPermissionResponse: () =>
            /* binding */ isPermissionResponse,
          /* harmony export */
        });
        /* harmony import */ var _payloads__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _payloads */ "./shared/messaging/messages/payloads/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function isPermissionResponse(payload) {
          return (
            (0, _payloads__WEBPACK_IMPORTED_MODULE_0__.isBasePayload)(
              payload
            ) && payload.type === "permission-response"
          );
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/permissions/PermissionType.ts":
      /*!**************************************************************************!*\
  !*** ./shared/messaging/messages/payloads/permissions/PermissionType.ts ***!
  \**************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ ALL_PERMISSION_TYPES: () =>
            /* binding */ ALL_PERMISSION_TYPES,
          /* harmony export */
        });
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0
        const ALL_PERMISSION_TYPES = [
          "viewAccount",
          "suggestTransactions",
          "suggestSignMessages",
        ];

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/permissions/index.ts":
      /*!*****************************************************************!*\
  !*** ./shared/messaging/messages/payloads/permissions/index.ts ***!
  \*****************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ ALL_PERMISSION_TYPES: () =>
            /* reexport safe */ _PermissionType__WEBPACK_IMPORTED_MODULE_3__.ALL_PERMISSION_TYPES,
          /* harmony export */ isAcquirePermissionsRequest: () =>
            /* reexport safe */ _AcquirePermissionsRequest__WEBPACK_IMPORTED_MODULE_7__.isAcquirePermissionsRequest,
          /* harmony export */ isAcquirePermissionsResponse: () =>
            /* reexport safe */ _AcquirePermissionsResponse__WEBPACK_IMPORTED_MODULE_8__.isAcquirePermissionsResponse,
          /* harmony export */ isGetPermissionRequests: () =>
            /* reexport safe */ _GetPermissionRequests__WEBPACK_IMPORTED_MODULE_0__.isGetPermissionRequests,
          /* harmony export */ isHasPermissionRequest: () =>
            /* reexport safe */ _HasPermissionsRequest__WEBPACK_IMPORTED_MODULE_5__.isHasPermissionRequest,
          /* harmony export */ isHasPermissionResponse: () =>
            /* reexport safe */ _HasPermissionsResponse__WEBPACK_IMPORTED_MODULE_6__.isHasPermissionResponse,
          /* harmony export */ isPermissionRequests: () =>
            /* reexport safe */ _PermissionRequests__WEBPACK_IMPORTED_MODULE_1__.isPermissionRequests,
          /* harmony export */ isPermissionResponse: () =>
            /* reexport safe */ _PermissionResponse__WEBPACK_IMPORTED_MODULE_2__.isPermissionResponse,
          /* harmony export */
        });
        /* harmony import */ var _GetPermissionRequests__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./GetPermissionRequests */ "./shared/messaging/messages/payloads/permissions/GetPermissionRequests.ts"
          );
        /* harmony import */ var _PermissionRequests__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./PermissionRequests */ "./shared/messaging/messages/payloads/permissions/PermissionRequests.ts"
          );
        /* harmony import */ var _PermissionResponse__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./PermissionResponse */ "./shared/messaging/messages/payloads/permissions/PermissionResponse.ts"
          );
        /* harmony import */ var _PermissionType__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ./PermissionType */ "./shared/messaging/messages/payloads/permissions/PermissionType.ts"
          );
        /* harmony import */ var _Permission__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ./Permission */ "./shared/messaging/messages/payloads/permissions/Permission.ts"
          );
        /* harmony import */ var _HasPermissionsRequest__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! ./HasPermissionsRequest */ "./shared/messaging/messages/payloads/permissions/HasPermissionsRequest.ts"
          );
        /* harmony import */ var _HasPermissionsResponse__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! ./HasPermissionsResponse */ "./shared/messaging/messages/payloads/permissions/HasPermissionsResponse.ts"
          );
        /* harmony import */ var _AcquirePermissionsRequest__WEBPACK_IMPORTED_MODULE_7__ =
          __webpack_require__(
            /*! ./AcquirePermissionsRequest */ "./shared/messaging/messages/payloads/permissions/AcquirePermissionsRequest.ts"
          );
        /* harmony import */ var _AcquirePermissionsResponse__WEBPACK_IMPORTED_MODULE_8__ =
          __webpack_require__(
            /*! ./AcquirePermissionsResponse */ "./shared/messaging/messages/payloads/permissions/AcquirePermissionsResponse.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/transactions/ExecuteTransactionRequest.ts":
      /*!**************************************************************************************!*\
  !*** ./shared/messaging/messages/payloads/transactions/ExecuteTransactionRequest.ts ***!
  \**************************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isExecuteTransactionRequest: () =>
            /* binding */ isExecuteTransactionRequest,
          /* harmony export */
        });
        /* harmony import */ var _payloads__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _payloads */ "./shared/messaging/messages/payloads/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function isExecuteTransactionRequest(payload) {
          return (
            (0, _payloads__WEBPACK_IMPORTED_MODULE_0__.isBasePayload)(
              payload
            ) && payload.type === "execute-transaction-request"
          );
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/transactions/ExecuteTransactionResponse.ts":
      /*!***************************************************************************************!*\
  !*** ./shared/messaging/messages/payloads/transactions/ExecuteTransactionResponse.ts ***!
  \***************************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isExecuteTransactionResponse: () =>
            /* binding */ isExecuteTransactionResponse,
          /* harmony export */
        });
        /* harmony import */ var _payloads__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _payloads */ "./shared/messaging/messages/payloads/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function isExecuteTransactionResponse(payload) {
          return (
            (0, _payloads__WEBPACK_IMPORTED_MODULE_0__.isBasePayload)(
              payload
            ) && payload.type === "execute-transaction-response"
          );
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/transactions/PreapprovalRequest.ts":
      /*!*******************************************************************************!*\
  !*** ./shared/messaging/messages/payloads/transactions/PreapprovalRequest.ts ***!
  \*******************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isPreapprovalRequest: () =>
            /* binding */ isPreapprovalRequest,
          /* harmony export */
        });
        /* harmony import */ var _payloads__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _payloads */ "./shared/messaging/messages/payloads/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function isPreapprovalRequest(payload) {
          return (
            (0, _payloads__WEBPACK_IMPORTED_MODULE_0__.isBasePayload)(
              payload
            ) && payload.type === "preapproval-request"
          );
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/transactions/PreapprovalResponse.ts":
      /*!********************************************************************************!*\
  !*** ./shared/messaging/messages/payloads/transactions/PreapprovalResponse.ts ***!
  \********************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isPreapprovalResponse: () =>
            /* binding */ isPreapprovalResponse,
          /* harmony export */
        });
        /* harmony import */ var _payloads__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _payloads */ "./shared/messaging/messages/payloads/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function isPreapprovalResponse(payload) {
          return (
            (0, _payloads__WEBPACK_IMPORTED_MODULE_0__.isBasePayload)(
              payload
            ) && payload.type === "preapproval-response"
          );
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/transactions/TransactionRequest.ts":
      /*!*******************************************************************************!*\
  !*** ./shared/messaging/messages/payloads/transactions/TransactionRequest.ts ***!
  \*******************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/transactions/index.ts":
      /*!******************************************************************!*\
  !*** ./shared/messaging/messages/payloads/transactions/index.ts ***!
  \******************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isExecuteTransactionRequest: () =>
            /* reexport safe */ _ExecuteTransactionRequest__WEBPACK_IMPORTED_MODULE_0__.isExecuteTransactionRequest,
          /* harmony export */ isExecuteTransactionResponse: () =>
            /* reexport safe */ _ExecuteTransactionResponse__WEBPACK_IMPORTED_MODULE_1__.isExecuteTransactionResponse,
          /* harmony export */ isPreapprovalRequest: () =>
            /* reexport safe */ _PreapprovalRequest__WEBPACK_IMPORTED_MODULE_3__.isPreapprovalRequest,
          /* harmony export */ isPreapprovalResponse: () =>
            /* reexport safe */ _PreapprovalResponse__WEBPACK_IMPORTED_MODULE_4__.isPreapprovalResponse,
          /* harmony export */
        });
        /* harmony import */ var _ExecuteTransactionRequest__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./ExecuteTransactionRequest */ "./shared/messaging/messages/payloads/transactions/ExecuteTransactionRequest.ts"
          );
        /* harmony import */ var _ExecuteTransactionResponse__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./ExecuteTransactionResponse */ "./shared/messaging/messages/payloads/transactions/ExecuteTransactionResponse.ts"
          );
        /* harmony import */ var _TransactionRequest__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./TransactionRequest */ "./shared/messaging/messages/payloads/transactions/TransactionRequest.ts"
          );
        /* harmony import */ var _PreapprovalRequest__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ./PreapprovalRequest */ "./shared/messaging/messages/payloads/transactions/PreapprovalRequest.ts"
          );
        /* harmony import */ var _PreapprovalResponse__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ./PreapprovalResponse */ "./shared/messaging/messages/payloads/transactions/PreapprovalResponse.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/transactions/ui/GetPreapprovalRequests.ts":
      /*!**************************************************************************************!*\
  !*** ./shared/messaging/messages/payloads/transactions/ui/GetPreapprovalRequests.ts ***!
  \**************************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isGetPreapprovalRequests: () =>
            /* binding */ isGetPreapprovalRequests,
          /* harmony export */
        });
        /* harmony import */ var _payloads__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _payloads */ "./shared/messaging/messages/payloads/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function isGetPreapprovalRequests(payload) {
          return (
            (0, _payloads__WEBPACK_IMPORTED_MODULE_0__.isBasePayload)(
              payload
            ) && payload.type === "get-preapproval-requests"
          );
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/transactions/ui/GetTransactionRequests.ts":
      /*!**************************************************************************************!*\
  !*** ./shared/messaging/messages/payloads/transactions/ui/GetTransactionRequests.ts ***!
  \**************************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isGetTransactionRequests: () =>
            /* binding */ isGetTransactionRequests,
          /* harmony export */
        });
        /* harmony import */ var _payloads__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _payloads */ "./shared/messaging/messages/payloads/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function isGetTransactionRequests(payload) {
          return (
            (0, _payloads__WEBPACK_IMPORTED_MODULE_0__.isBasePayload)(
              payload
            ) && payload.type === "get-transaction-requests"
          );
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/transactions/ui/TransactionRequestResponse.ts":
      /*!******************************************************************************************!*\
  !*** ./shared/messaging/messages/payloads/transactions/ui/TransactionRequestResponse.ts ***!
  \******************************************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isTransactionRequestResponse: () =>
            /* binding */ isTransactionRequestResponse,
          /* harmony export */
        });
        /* harmony import */ var _payloads__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _payloads */ "./shared/messaging/messages/payloads/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function isTransactionRequestResponse(payload) {
          return (
            (0, _payloads__WEBPACK_IMPORTED_MODULE_0__.isBasePayload)(
              payload
            ) && payload.type === "transaction-request-response"
          );
        }

        /***/
      },

    /***/ "./shared/messaging/messages/payloads/url/OpenWallet.ts":
      /*!**************************************************************!*\
  !*** ./shared/messaging/messages/payloads/url/OpenWallet.ts ***!
  \**************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ isGetUrl: () => /* binding */ isGetUrl,
          /* harmony export */
        });
        /* harmony import */ var _payloads__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! _payloads */ "./shared/messaging/messages/payloads/index.ts"
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function isGetUrl(payload) {
          return (
            (0, _payloads__WEBPACK_IMPORTED_MODULE_0__.isBasePayload)(
              payload
            ) && payload.type === "open-wallet"
          );
        }

        /***/
      },

    /***/ "./shared/storagex/store.ts":
      /*!**********************************!*\
  !*** ./shared/storagex/store.ts ***!
  \**********************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ deleteEncrypted: () =>
            /* binding */ deleteEncrypted,
          /* harmony export */ get: () => /* binding */ get,
          /* harmony export */ getEncrypted: () => /* binding */ getEncrypted,
          /* harmony export */ set: () => /* binding */ set,
          /* harmony export */ setEncrypted: () => /* binding */ setEncrypted,
          /* harmony export */
        });
        /* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! webextension-polyfill */ "../node_modules/webextension-polyfill/dist/browser-polyfill.js"
          );
        /* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default =
          /*#__PURE__*/ __webpack_require__.n(
            webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__
          );
        /* harmony import */ var _encryption_password__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../encryption/password */ "./shared/encryption/password.ts"
          );
        var __awaiter =
          (undefined && undefined.__awaiter) ||
          function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P
                ? value
                : new P(function (resolve) {
                    resolve(value);
                  });
            }
            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }
              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }
              function step(result) {
                result.done
                  ? resolve(result.value)
                  : adopt(result.value).then(fulfilled, rejected);
              }
              step(
                (generator = generator.apply(thisArg, _arguments || [])).next()
              );
            });
          };

        const MASTER_PASSPHRASE = "87ZWD7HJB8hwe-4TqG8y" || 0;
        const MASTER_SALT = Uint8Array.from([1]);
        function get(key) {
          return __awaiter(this, void 0, void 0, function* () {
            const response =
              yield webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().storage.local.get(
                key
              );
            return response[key];
          });
        }
        function set(keyValue) {
          return __awaiter(this, void 0, void 0, function* () {
            webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().storage.local.set(
              keyValue
            );
          });
        }
        function setEncrypted(key, value, passphrase = MASTER_PASSPHRASE) {
          return __awaiter(this, void 0, void 0, function* () {
            if (!key || key.length === 0) return;
            if (!value || value.length === 0) return;
            const encryptedKey = (0,
            _encryption_password__WEBPACK_IMPORTED_MODULE_1__.encrypt)(
              key,
              passphrase,
              MASTER_SALT
            );
            const encryptedValue = (0,
            _encryption_password__WEBPACK_IMPORTED_MODULE_1__.encrypt)(
              value,
              passphrase
            );
            yield set({ [encryptedKey]: encryptedValue });
          });
        }
        function getEncrypted(key, passphrase = MASTER_PASSPHRASE) {
          return __awaiter(this, void 0, void 0, function* () {
            const encryptedKey = (0,
            _encryption_password__WEBPACK_IMPORTED_MODULE_1__.encrypt)(
              key,
              passphrase,
              MASTER_SALT
            );
            const encryptedValue = yield get(encryptedKey);
            if (!encryptedValue) return null;
            return (0,
            _encryption_password__WEBPACK_IMPORTED_MODULE_1__.decrypt)(encryptedValue, passphrase);
          });
        }
        function deleteEncrypted(key, passphrase = MASTER_PASSPHRASE) {
          return __awaiter(this, void 0, void 0, function* () {
            const encryptedKey = (0,
            _encryption_password__WEBPACK_IMPORTED_MODULE_1__.encrypt)(
              key,
              passphrase,
              MASTER_SALT
            );
            yield set({ [encryptedKey]: null });
          });
        }

        /***/
      },

    /***/ "./shared/utils/index.ts":
      /*!*******************************!*\
  !*** ./shared/utils/index.ts ***!
  \*******************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ openInNewTab: () => /* binding */ openInNewTab,
          /* harmony export */
        });
        /* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! webextension-polyfill */ "../node_modules/webextension-polyfill/dist/browser-polyfill.js"
          );
        /* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default =
          /*#__PURE__*/ __webpack_require__.n(
            webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__
          );
        // Copyright (c) 2022, Mysten Labs, Inc.
        // SPDX-License-Identifier: Apache-2.0

        function openInNewTab(page = "ui.html") {
          const url =
            webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.getURL(
              page
            );
          return webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().tabs.create(
            { url }
          );
        }

        /***/
      },

    /***/ "./shared/utils/simpleApiCall.ts":
      /*!***************************************!*\
  !*** ./shared/utils/simpleApiCall.ts ***!
  \***************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(/*! ../constants */ "./shared/constants.ts");
        var __awaiter =
          (undefined && undefined.__awaiter) ||
          function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P
                ? value
                : new P(function (resolve) {
                    resolve(value);
                  });
            }
            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }
              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }
              function step(result) {
                result.done
                  ? resolve(result.value)
                  : adopt(result.value).then(fulfilled, rejected);
              }
              step(
                (generator = generator.apply(thisArg, _arguments || [])).next()
              );
            });
          };

        // const accessToken = useAppSelector(({ account }) => account.authentication);
        const simpleApiCall = (
          relativePath,
          method = "GET",
          accessToken,
          body
        ) =>
          __awaiter(void 0, void 0, void 0, function* () {
            const data = {
              method: method,
              headers: {
                "Content-Type": "application/json",
                "X-Supabase-Access-Token": accessToken,
              },
            };
            if (body) {
              data.body = body;
            }
            const response = yield fetch(
              `${_constants__WEBPACK_IMPORTED_MODULE_0__.BASE_URL}/api/${relativePath}`,
              data
            );
            const { status } = response;
            if (status !== 200) return { status };
            const json = yield response.json();
            return { json, status };
          });
        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          simpleApiCall;

        /***/
      },

    /***/ "../node_modules/tslib/tslib.es6.js":
      /*!******************************************!*\
  !*** ../node_modules/tslib/tslib.es6.js ***!
  \******************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ __assign: () => /* binding */ __assign,
          /* harmony export */ __asyncDelegator: () =>
            /* binding */ __asyncDelegator,
          /* harmony export */ __asyncGenerator: () =>
            /* binding */ __asyncGenerator,
          /* harmony export */ __asyncValues: () => /* binding */ __asyncValues,
          /* harmony export */ __await: () => /* binding */ __await,
          /* harmony export */ __awaiter: () => /* binding */ __awaiter,
          /* harmony export */ __classPrivateFieldGet: () =>
            /* binding */ __classPrivateFieldGet,
          /* harmony export */ __classPrivateFieldIn: () =>
            /* binding */ __classPrivateFieldIn,
          /* harmony export */ __classPrivateFieldSet: () =>
            /* binding */ __classPrivateFieldSet,
          /* harmony export */ __createBinding: () =>
            /* binding */ __createBinding,
          /* harmony export */ __decorate: () => /* binding */ __decorate,
          /* harmony export */ __exportStar: () => /* binding */ __exportStar,
          /* harmony export */ __extends: () => /* binding */ __extends,
          /* harmony export */ __generator: () => /* binding */ __generator,
          /* harmony export */ __importDefault: () =>
            /* binding */ __importDefault,
          /* harmony export */ __importStar: () => /* binding */ __importStar,
          /* harmony export */ __makeTemplateObject: () =>
            /* binding */ __makeTemplateObject,
          /* harmony export */ __metadata: () => /* binding */ __metadata,
          /* harmony export */ __param: () => /* binding */ __param,
          /* harmony export */ __read: () => /* binding */ __read,
          /* harmony export */ __rest: () => /* binding */ __rest,
          /* harmony export */ __spread: () => /* binding */ __spread,
          /* harmony export */ __spreadArray: () => /* binding */ __spreadArray,
          /* harmony export */ __spreadArrays: () =>
            /* binding */ __spreadArrays,
          /* harmony export */ __values: () => /* binding */ __values,
          /* harmony export */
        });
        /******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
        /* global Reflect, Promise */

        var extendStatics = function (d, b) {
          extendStatics =
            Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array &&
              function (d, b) {
                d.__proto__ = b;
              }) ||
            function (d, b) {
              for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            };
          return extendStatics(d, b);
        };

        function __extends(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError(
              "Class extends value " +
                String(b) +
                " is not a constructor or null"
            );
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype =
            b === null
              ? Object.create(b)
              : ((__.prototype = b.prototype), new __());
        }

        var __assign = function () {
          __assign =
            Object.assign ||
            function __assign(t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
              }
              return t;
            };
          return __assign.apply(this, arguments);
        };

        function __rest(s, e) {
          var t = {};
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (
              var i = 0, p = Object.getOwnPropertySymbols(s);
              i < p.length;
              i++
            ) {
              if (
                e.indexOf(p[i]) < 0 &&
                Object.prototype.propertyIsEnumerable.call(s, p[i])
              )
                t[p[i]] = s[p[i]];
            }
          return t;
        }

        function __decorate(decorators, target, key, desc) {
          var c = arguments.length,
            r =
              c < 3
                ? target
                : desc === null
                ? (desc = Object.getOwnPropertyDescriptor(target, key))
                : desc,
            d;
          if (
            typeof Reflect === "object" &&
            typeof Reflect.decorate === "function"
          )
            r = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i = decorators.length - 1; i >= 0; i--)
              if ((d = decorators[i]))
                r =
                  (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) ||
                  r;
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        }

        function __param(paramIndex, decorator) {
          return function (target, key) {
            decorator(target, key, paramIndex);
          };
        }

        function __metadata(metadataKey, metadataValue) {
          if (
            typeof Reflect === "object" &&
            typeof Reflect.metadata === "function"
          )
            return Reflect.metadata(metadataKey, metadataValue);
        }

        function __awaiter(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value);
                });
          }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next()
            );
          });
        }

        function __generator(thisArg, body) {
          var _ = {
              label: 0,
              sent: function () {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: [],
            },
            f,
            y,
            t,
            g;
          return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === "function" &&
              (g[Symbol.iterator] = function () {
                return this;
              }),
            g
          );
          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (
                  ((f = 1),
                  y &&
                    (t =
                      op[0] & 2
                        ? y["return"]
                        : op[0]
                        ? y["throw"] || ((t = y["return"]) && t.call(y), 0)
                        : y.next) &&
                    !(t = t.call(y, op[1])).done)
                )
                  return t;
                if (((y = 0), t)) op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (
                      !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
                      (op[0] === 6 || op[0] === 2)
                    ) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        }

        var __createBinding = Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k;
              var desc = Object.getOwnPropertyDescriptor(m, k);
              if (
                !desc ||
                ("get" in desc
                  ? !m.__esModule
                  : desc.writable || desc.configurable)
              ) {
                desc = {
                  enumerable: true,
                  get: function () {
                    return m[k];
                  },
                };
              }
              Object.defineProperty(o, k2, desc);
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k;
              o[k2] = m[k];
            };

        function __exportStar(m, o) {
          for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
              __createBinding(o, m, p);
        }

        function __values(o) {
          var s = typeof Symbol === "function" && Symbol.iterator,
            m = s && o[s],
            i = 0;
          if (m) return m.call(o);
          if (o && typeof o.length === "number")
            return {
              next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
              },
            };
          throw new TypeError(
            s ? "Object is not iterable." : "Symbol.iterator is not defined."
          );
        }

        function __read(o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m) return o;
          var i = m.call(o),
            r,
            ar = [],
            e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error) {
            e = { error: error };
          } finally {
            try {
              if (r && !r.done && (m = i["return"])) m.call(i);
            } finally {
              if (e) throw e.error;
            }
          }
          return ar;
        }

        /** @deprecated */
        function __spread() {
          for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
          return ar;
        }

        /** @deprecated */
        function __spreadArrays() {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
          return r;
        }

        function __spreadArray(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
              }
            }
          return to.concat(ar || Array.prototype.slice.call(from));
        }

        function __await(v) {
          return this instanceof __await
            ? ((this.v = v), this)
            : new __await(v);
        }

        function __asyncGenerator(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g = generator.apply(thisArg, _arguments || []),
            i,
            q = [];
          return (
            (i = {}),
            verb("next"),
            verb("throw"),
            verb("return"),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i
          );
          function verb(n) {
            if (g[n])
              i[n] = function (v) {
                return new Promise(function (a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
          }
          function resume(n, v) {
            try {
              step(g[n](v));
            } catch (e) {
              settle(q[0][3], e);
            }
          }
          function step(r) {
            r.value instanceof __await
              ? Promise.resolve(r.value.v).then(fulfill, reject)
              : settle(q[0][2], r);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f, v) {
            if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
          }
        }

        function __asyncDelegator(o) {
          var i, p;
          return (
            (i = {}),
            verb("next"),
            verb("throw", function (e) {
              throw e;
            }),
            verb("return"),
            (i[Symbol.iterator] = function () {
              return this;
            }),
            i
          );
          function verb(n, f) {
            i[n] = o[n]
              ? function (v) {
                  return (p = !p)
                    ? { value: __await(o[n](v)), done: n === "return" }
                    : f
                    ? f(v)
                    : v;
                }
              : f;
          }
        }

        function __asyncValues(o) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m = o[Symbol.asyncIterator],
            i;
          return m
            ? m.call(o)
            : ((o =
                typeof __values === "function"
                  ? __values(o)
                  : o[Symbol.iterator]()),
              (i = {}),
              verb("next"),
              verb("throw"),
              verb("return"),
              (i[Symbol.asyncIterator] = function () {
                return this;
              }),
              i);
          function verb(n) {
            i[n] =
              o[n] &&
              function (v) {
                return new Promise(function (resolve, reject) {
                  (v = o[n](v)), settle(resolve, reject, v.done, v.value);
                });
              };
          }
          function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function (v) {
              resolve({ value: v, done: d });
            }, reject);
          }
        }

        function __makeTemplateObject(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        }

        var __setModuleDefault = Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o["default"] = v;
            };

        function __importStar(mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null)
            for (var k in mod)
              if (
                k !== "default" &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding(result, mod, k);
          __setModuleDefault(result, mod);
          return result;
        }

        function __importDefault(mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        }

        function __classPrivateFieldGet(receiver, state, kind, f) {
          if (kind === "a" && !f)
            throw new TypeError(
              "Private accessor was defined without a getter"
            );
          if (
            typeof state === "function"
              ? receiver !== state || !f
              : !state.has(receiver)
          )
            throw new TypeError(
              "Cannot read private member from an object whose class did not declare it"
            );
          return kind === "m"
            ? f
            : kind === "a"
            ? f.call(receiver)
            : f
            ? f.value
            : state.get(receiver);
        }

        function __classPrivateFieldSet(receiver, state, value, kind, f) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f)
            throw new TypeError(
              "Private accessor was defined without a setter"
            );
          if (
            typeof state === "function"
              ? receiver !== state || !f
              : !state.has(receiver)
          )
            throw new TypeError(
              "Cannot write private member to an object whose class did not declare it"
            );
          return (
            kind === "a"
              ? f.call(receiver, value)
              : f
              ? (f.value = value)
              : state.set(receiver, value),
            value
          );
        }

        function __classPrivateFieldIn(state, receiver) {
          if (
            receiver === null ||
            (typeof receiver !== "object" && typeof receiver !== "function")
          )
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state === "function"
            ? receiver === state
            : state.has(receiver);
        }

        /***/
      },

    /***/ "../node_modules/tweetnacl/nacl-fast.js":
      /*!**********************************************!*\
  !*** ../node_modules/tweetnacl/nacl-fast.js ***!
  \**********************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        (function (nacl) {
          "use strict";

          // Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
          // Public domain.
          //
          // Implementation derived from TweetNaCl version 20140427.
          // See for details: http://tweetnacl.cr.yp.to/

          var gf = function (init) {
            var i,
              r = new Float64Array(16);
            if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
            return r;
          };

          //  Pluggable, initialized in high-level API below.
          var randombytes = function (/* x, n */) {
            throw new Error("no PRNG");
          };

          var _0 = new Uint8Array(16);
          var _9 = new Uint8Array(32);
          _9[0] = 9;

          var gf0 = gf(),
            gf1 = gf([1]),
            _121665 = gf([0xdb41, 1]),
            D = gf([
              0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070,
              0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203,
            ]),
            D2 = gf([
              0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0,
              0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406,
            ]),
            X = gf([
              0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c,
              0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169,
            ]),
            Y = gf([
              0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666,
              0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666,
            ]),
            I = gf([
              0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43,
              0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,
            ]);

          function ts64(x, i, h, l) {
            x[i] = (h >> 24) & 0xff;
            x[i + 1] = (h >> 16) & 0xff;
            x[i + 2] = (h >> 8) & 0xff;
            x[i + 3] = h & 0xff;
            x[i + 4] = (l >> 24) & 0xff;
            x[i + 5] = (l >> 16) & 0xff;
            x[i + 6] = (l >> 8) & 0xff;
            x[i + 7] = l & 0xff;
          }

          function vn(x, xi, y, yi, n) {
            var i,
              d = 0;
            for (i = 0; i < n; i++) d |= x[xi + i] ^ y[yi + i];
            return (1 & ((d - 1) >>> 8)) - 1;
          }

          function crypto_verify_16(x, xi, y, yi) {
            return vn(x, xi, y, yi, 16);
          }

          function crypto_verify_32(x, xi, y, yi) {
            return vn(x, xi, y, yi, 32);
          }

          function core_salsa20(o, p, k, c) {
            var j0 =
                (c[0] & 0xff) |
                ((c[1] & 0xff) << 8) |
                ((c[2] & 0xff) << 16) |
                ((c[3] & 0xff) << 24),
              j1 =
                (k[0] & 0xff) |
                ((k[1] & 0xff) << 8) |
                ((k[2] & 0xff) << 16) |
                ((k[3] & 0xff) << 24),
              j2 =
                (k[4] & 0xff) |
                ((k[5] & 0xff) << 8) |
                ((k[6] & 0xff) << 16) |
                ((k[7] & 0xff) << 24),
              j3 =
                (k[8] & 0xff) |
                ((k[9] & 0xff) << 8) |
                ((k[10] & 0xff) << 16) |
                ((k[11] & 0xff) << 24),
              j4 =
                (k[12] & 0xff) |
                ((k[13] & 0xff) << 8) |
                ((k[14] & 0xff) << 16) |
                ((k[15] & 0xff) << 24),
              j5 =
                (c[4] & 0xff) |
                ((c[5] & 0xff) << 8) |
                ((c[6] & 0xff) << 16) |
                ((c[7] & 0xff) << 24),
              j6 =
                (p[0] & 0xff) |
                ((p[1] & 0xff) << 8) |
                ((p[2] & 0xff) << 16) |
                ((p[3] & 0xff) << 24),
              j7 =
                (p[4] & 0xff) |
                ((p[5] & 0xff) << 8) |
                ((p[6] & 0xff) << 16) |
                ((p[7] & 0xff) << 24),
              j8 =
                (p[8] & 0xff) |
                ((p[9] & 0xff) << 8) |
                ((p[10] & 0xff) << 16) |
                ((p[11] & 0xff) << 24),
              j9 =
                (p[12] & 0xff) |
                ((p[13] & 0xff) << 8) |
                ((p[14] & 0xff) << 16) |
                ((p[15] & 0xff) << 24),
              j10 =
                (c[8] & 0xff) |
                ((c[9] & 0xff) << 8) |
                ((c[10] & 0xff) << 16) |
                ((c[11] & 0xff) << 24),
              j11 =
                (k[16] & 0xff) |
                ((k[17] & 0xff) << 8) |
                ((k[18] & 0xff) << 16) |
                ((k[19] & 0xff) << 24),
              j12 =
                (k[20] & 0xff) |
                ((k[21] & 0xff) << 8) |
                ((k[22] & 0xff) << 16) |
                ((k[23] & 0xff) << 24),
              j13 =
                (k[24] & 0xff) |
                ((k[25] & 0xff) << 8) |
                ((k[26] & 0xff) << 16) |
                ((k[27] & 0xff) << 24),
              j14 =
                (k[28] & 0xff) |
                ((k[29] & 0xff) << 8) |
                ((k[30] & 0xff) << 16) |
                ((k[31] & 0xff) << 24),
              j15 =
                (c[12] & 0xff) |
                ((c[13] & 0xff) << 8) |
                ((c[14] & 0xff) << 16) |
                ((c[15] & 0xff) << 24);

            var x0 = j0,
              x1 = j1,
              x2 = j2,
              x3 = j3,
              x4 = j4,
              x5 = j5,
              x6 = j6,
              x7 = j7,
              x8 = j8,
              x9 = j9,
              x10 = j10,
              x11 = j11,
              x12 = j12,
              x13 = j13,
              x14 = j14,
              x15 = j15,
              u;

            for (var i = 0; i < 20; i += 2) {
              u = (x0 + x12) | 0;
              x4 ^= (u << 7) | (u >>> (32 - 7));
              u = (x4 + x0) | 0;
              x8 ^= (u << 9) | (u >>> (32 - 9));
              u = (x8 + x4) | 0;
              x12 ^= (u << 13) | (u >>> (32 - 13));
              u = (x12 + x8) | 0;
              x0 ^= (u << 18) | (u >>> (32 - 18));

              u = (x5 + x1) | 0;
              x9 ^= (u << 7) | (u >>> (32 - 7));
              u = (x9 + x5) | 0;
              x13 ^= (u << 9) | (u >>> (32 - 9));
              u = (x13 + x9) | 0;
              x1 ^= (u << 13) | (u >>> (32 - 13));
              u = (x1 + x13) | 0;
              x5 ^= (u << 18) | (u >>> (32 - 18));

              u = (x10 + x6) | 0;
              x14 ^= (u << 7) | (u >>> (32 - 7));
              u = (x14 + x10) | 0;
              x2 ^= (u << 9) | (u >>> (32 - 9));
              u = (x2 + x14) | 0;
              x6 ^= (u << 13) | (u >>> (32 - 13));
              u = (x6 + x2) | 0;
              x10 ^= (u << 18) | (u >>> (32 - 18));

              u = (x15 + x11) | 0;
              x3 ^= (u << 7) | (u >>> (32 - 7));
              u = (x3 + x15) | 0;
              x7 ^= (u << 9) | (u >>> (32 - 9));
              u = (x7 + x3) | 0;
              x11 ^= (u << 13) | (u >>> (32 - 13));
              u = (x11 + x7) | 0;
              x15 ^= (u << 18) | (u >>> (32 - 18));

              u = (x0 + x3) | 0;
              x1 ^= (u << 7) | (u >>> (32 - 7));
              u = (x1 + x0) | 0;
              x2 ^= (u << 9) | (u >>> (32 - 9));
              u = (x2 + x1) | 0;
              x3 ^= (u << 13) | (u >>> (32 - 13));
              u = (x3 + x2) | 0;
              x0 ^= (u << 18) | (u >>> (32 - 18));

              u = (x5 + x4) | 0;
              x6 ^= (u << 7) | (u >>> (32 - 7));
              u = (x6 + x5) | 0;
              x7 ^= (u << 9) | (u >>> (32 - 9));
              u = (x7 + x6) | 0;
              x4 ^= (u << 13) | (u >>> (32 - 13));
              u = (x4 + x7) | 0;
              x5 ^= (u << 18) | (u >>> (32 - 18));

              u = (x10 + x9) | 0;
              x11 ^= (u << 7) | (u >>> (32 - 7));
              u = (x11 + x10) | 0;
              x8 ^= (u << 9) | (u >>> (32 - 9));
              u = (x8 + x11) | 0;
              x9 ^= (u << 13) | (u >>> (32 - 13));
              u = (x9 + x8) | 0;
              x10 ^= (u << 18) | (u >>> (32 - 18));

              u = (x15 + x14) | 0;
              x12 ^= (u << 7) | (u >>> (32 - 7));
              u = (x12 + x15) | 0;
              x13 ^= (u << 9) | (u >>> (32 - 9));
              u = (x13 + x12) | 0;
              x14 ^= (u << 13) | (u >>> (32 - 13));
              u = (x14 + x13) | 0;
              x15 ^= (u << 18) | (u >>> (32 - 18));
            }
            x0 = (x0 + j0) | 0;
            x1 = (x1 + j1) | 0;
            x2 = (x2 + j2) | 0;
            x3 = (x3 + j3) | 0;
            x4 = (x4 + j4) | 0;
            x5 = (x5 + j5) | 0;
            x6 = (x6 + j6) | 0;
            x7 = (x7 + j7) | 0;
            x8 = (x8 + j8) | 0;
            x9 = (x9 + j9) | 0;
            x10 = (x10 + j10) | 0;
            x11 = (x11 + j11) | 0;
            x12 = (x12 + j12) | 0;
            x13 = (x13 + j13) | 0;
            x14 = (x14 + j14) | 0;
            x15 = (x15 + j15) | 0;

            o[0] = (x0 >>> 0) & 0xff;
            o[1] = (x0 >>> 8) & 0xff;
            o[2] = (x0 >>> 16) & 0xff;
            o[3] = (x0 >>> 24) & 0xff;

            o[4] = (x1 >>> 0) & 0xff;
            o[5] = (x1 >>> 8) & 0xff;
            o[6] = (x1 >>> 16) & 0xff;
            o[7] = (x1 >>> 24) & 0xff;

            o[8] = (x2 >>> 0) & 0xff;
            o[9] = (x2 >>> 8) & 0xff;
            o[10] = (x2 >>> 16) & 0xff;
            o[11] = (x2 >>> 24) & 0xff;

            o[12] = (x3 >>> 0) & 0xff;
            o[13] = (x3 >>> 8) & 0xff;
            o[14] = (x3 >>> 16) & 0xff;
            o[15] = (x3 >>> 24) & 0xff;

            o[16] = (x4 >>> 0) & 0xff;
            o[17] = (x4 >>> 8) & 0xff;
            o[18] = (x4 >>> 16) & 0xff;
            o[19] = (x4 >>> 24) & 0xff;

            o[20] = (x5 >>> 0) & 0xff;
            o[21] = (x5 >>> 8) & 0xff;
            o[22] = (x5 >>> 16) & 0xff;
            o[23] = (x5 >>> 24) & 0xff;

            o[24] = (x6 >>> 0) & 0xff;
            o[25] = (x6 >>> 8) & 0xff;
            o[26] = (x6 >>> 16) & 0xff;
            o[27] = (x6 >>> 24) & 0xff;

            o[28] = (x7 >>> 0) & 0xff;
            o[29] = (x7 >>> 8) & 0xff;
            o[30] = (x7 >>> 16) & 0xff;
            o[31] = (x7 >>> 24) & 0xff;

            o[32] = (x8 >>> 0) & 0xff;
            o[33] = (x8 >>> 8) & 0xff;
            o[34] = (x8 >>> 16) & 0xff;
            o[35] = (x8 >>> 24) & 0xff;

            o[36] = (x9 >>> 0) & 0xff;
            o[37] = (x9 >>> 8) & 0xff;
            o[38] = (x9 >>> 16) & 0xff;
            o[39] = (x9 >>> 24) & 0xff;

            o[40] = (x10 >>> 0) & 0xff;
            o[41] = (x10 >>> 8) & 0xff;
            o[42] = (x10 >>> 16) & 0xff;
            o[43] = (x10 >>> 24) & 0xff;

            o[44] = (x11 >>> 0) & 0xff;
            o[45] = (x11 >>> 8) & 0xff;
            o[46] = (x11 >>> 16) & 0xff;
            o[47] = (x11 >>> 24) & 0xff;

            o[48] = (x12 >>> 0) & 0xff;
            o[49] = (x12 >>> 8) & 0xff;
            o[50] = (x12 >>> 16) & 0xff;
            o[51] = (x12 >>> 24) & 0xff;

            o[52] = (x13 >>> 0) & 0xff;
            o[53] = (x13 >>> 8) & 0xff;
            o[54] = (x13 >>> 16) & 0xff;
            o[55] = (x13 >>> 24) & 0xff;

            o[56] = (x14 >>> 0) & 0xff;
            o[57] = (x14 >>> 8) & 0xff;
            o[58] = (x14 >>> 16) & 0xff;
            o[59] = (x14 >>> 24) & 0xff;

            o[60] = (x15 >>> 0) & 0xff;
            o[61] = (x15 >>> 8) & 0xff;
            o[62] = (x15 >>> 16) & 0xff;
            o[63] = (x15 >>> 24) & 0xff;
          }

          function core_hsalsa20(o, p, k, c) {
            var j0 =
                (c[0] & 0xff) |
                ((c[1] & 0xff) << 8) |
                ((c[2] & 0xff) << 16) |
                ((c[3] & 0xff) << 24),
              j1 =
                (k[0] & 0xff) |
                ((k[1] & 0xff) << 8) |
                ((k[2] & 0xff) << 16) |
                ((k[3] & 0xff) << 24),
              j2 =
                (k[4] & 0xff) |
                ((k[5] & 0xff) << 8) |
                ((k[6] & 0xff) << 16) |
                ((k[7] & 0xff) << 24),
              j3 =
                (k[8] & 0xff) |
                ((k[9] & 0xff) << 8) |
                ((k[10] & 0xff) << 16) |
                ((k[11] & 0xff) << 24),
              j4 =
                (k[12] & 0xff) |
                ((k[13] & 0xff) << 8) |
                ((k[14] & 0xff) << 16) |
                ((k[15] & 0xff) << 24),
              j5 =
                (c[4] & 0xff) |
                ((c[5] & 0xff) << 8) |
                ((c[6] & 0xff) << 16) |
                ((c[7] & 0xff) << 24),
              j6 =
                (p[0] & 0xff) |
                ((p[1] & 0xff) << 8) |
                ((p[2] & 0xff) << 16) |
                ((p[3] & 0xff) << 24),
              j7 =
                (p[4] & 0xff) |
                ((p[5] & 0xff) << 8) |
                ((p[6] & 0xff) << 16) |
                ((p[7] & 0xff) << 24),
              j8 =
                (p[8] & 0xff) |
                ((p[9] & 0xff) << 8) |
                ((p[10] & 0xff) << 16) |
                ((p[11] & 0xff) << 24),
              j9 =
                (p[12] & 0xff) |
                ((p[13] & 0xff) << 8) |
                ((p[14] & 0xff) << 16) |
                ((p[15] & 0xff) << 24),
              j10 =
                (c[8] & 0xff) |
                ((c[9] & 0xff) << 8) |
                ((c[10] & 0xff) << 16) |
                ((c[11] & 0xff) << 24),
              j11 =
                (k[16] & 0xff) |
                ((k[17] & 0xff) << 8) |
                ((k[18] & 0xff) << 16) |
                ((k[19] & 0xff) << 24),
              j12 =
                (k[20] & 0xff) |
                ((k[21] & 0xff) << 8) |
                ((k[22] & 0xff) << 16) |
                ((k[23] & 0xff) << 24),
              j13 =
                (k[24] & 0xff) |
                ((k[25] & 0xff) << 8) |
                ((k[26] & 0xff) << 16) |
                ((k[27] & 0xff) << 24),
              j14 =
                (k[28] & 0xff) |
                ((k[29] & 0xff) << 8) |
                ((k[30] & 0xff) << 16) |
                ((k[31] & 0xff) << 24),
              j15 =
                (c[12] & 0xff) |
                ((c[13] & 0xff) << 8) |
                ((c[14] & 0xff) << 16) |
                ((c[15] & 0xff) << 24);

            var x0 = j0,
              x1 = j1,
              x2 = j2,
              x3 = j3,
              x4 = j4,
              x5 = j5,
              x6 = j6,
              x7 = j7,
              x8 = j8,
              x9 = j9,
              x10 = j10,
              x11 = j11,
              x12 = j12,
              x13 = j13,
              x14 = j14,
              x15 = j15,
              u;

            for (var i = 0; i < 20; i += 2) {
              u = (x0 + x12) | 0;
              x4 ^= (u << 7) | (u >>> (32 - 7));
              u = (x4 + x0) | 0;
              x8 ^= (u << 9) | (u >>> (32 - 9));
              u = (x8 + x4) | 0;
              x12 ^= (u << 13) | (u >>> (32 - 13));
              u = (x12 + x8) | 0;
              x0 ^= (u << 18) | (u >>> (32 - 18));

              u = (x5 + x1) | 0;
              x9 ^= (u << 7) | (u >>> (32 - 7));
              u = (x9 + x5) | 0;
              x13 ^= (u << 9) | (u >>> (32 - 9));
              u = (x13 + x9) | 0;
              x1 ^= (u << 13) | (u >>> (32 - 13));
              u = (x1 + x13) | 0;
              x5 ^= (u << 18) | (u >>> (32 - 18));

              u = (x10 + x6) | 0;
              x14 ^= (u << 7) | (u >>> (32 - 7));
              u = (x14 + x10) | 0;
              x2 ^= (u << 9) | (u >>> (32 - 9));
              u = (x2 + x14) | 0;
              x6 ^= (u << 13) | (u >>> (32 - 13));
              u = (x6 + x2) | 0;
              x10 ^= (u << 18) | (u >>> (32 - 18));

              u = (x15 + x11) | 0;
              x3 ^= (u << 7) | (u >>> (32 - 7));
              u = (x3 + x15) | 0;
              x7 ^= (u << 9) | (u >>> (32 - 9));
              u = (x7 + x3) | 0;
              x11 ^= (u << 13) | (u >>> (32 - 13));
              u = (x11 + x7) | 0;
              x15 ^= (u << 18) | (u >>> (32 - 18));

              u = (x0 + x3) | 0;
              x1 ^= (u << 7) | (u >>> (32 - 7));
              u = (x1 + x0) | 0;
              x2 ^= (u << 9) | (u >>> (32 - 9));
              u = (x2 + x1) | 0;
              x3 ^= (u << 13) | (u >>> (32 - 13));
              u = (x3 + x2) | 0;
              x0 ^= (u << 18) | (u >>> (32 - 18));

              u = (x5 + x4) | 0;
              x6 ^= (u << 7) | (u >>> (32 - 7));
              u = (x6 + x5) | 0;
              x7 ^= (u << 9) | (u >>> (32 - 9));
              u = (x7 + x6) | 0;
              x4 ^= (u << 13) | (u >>> (32 - 13));
              u = (x4 + x7) | 0;
              x5 ^= (u << 18) | (u >>> (32 - 18));

              u = (x10 + x9) | 0;
              x11 ^= (u << 7) | (u >>> (32 - 7));
              u = (x11 + x10) | 0;
              x8 ^= (u << 9) | (u >>> (32 - 9));
              u = (x8 + x11) | 0;
              x9 ^= (u << 13) | (u >>> (32 - 13));
              u = (x9 + x8) | 0;
              x10 ^= (u << 18) | (u >>> (32 - 18));

              u = (x15 + x14) | 0;
              x12 ^= (u << 7) | (u >>> (32 - 7));
              u = (x12 + x15) | 0;
              x13 ^= (u << 9) | (u >>> (32 - 9));
              u = (x13 + x12) | 0;
              x14 ^= (u << 13) | (u >>> (32 - 13));
              u = (x14 + x13) | 0;
              x15 ^= (u << 18) | (u >>> (32 - 18));
            }

            o[0] = (x0 >>> 0) & 0xff;
            o[1] = (x0 >>> 8) & 0xff;
            o[2] = (x0 >>> 16) & 0xff;
            o[3] = (x0 >>> 24) & 0xff;

            o[4] = (x5 >>> 0) & 0xff;
            o[5] = (x5 >>> 8) & 0xff;
            o[6] = (x5 >>> 16) & 0xff;
            o[7] = (x5 >>> 24) & 0xff;

            o[8] = (x10 >>> 0) & 0xff;
            o[9] = (x10 >>> 8) & 0xff;
            o[10] = (x10 >>> 16) & 0xff;
            o[11] = (x10 >>> 24) & 0xff;

            o[12] = (x15 >>> 0) & 0xff;
            o[13] = (x15 >>> 8) & 0xff;
            o[14] = (x15 >>> 16) & 0xff;
            o[15] = (x15 >>> 24) & 0xff;

            o[16] = (x6 >>> 0) & 0xff;
            o[17] = (x6 >>> 8) & 0xff;
            o[18] = (x6 >>> 16) & 0xff;
            o[19] = (x6 >>> 24) & 0xff;

            o[20] = (x7 >>> 0) & 0xff;
            o[21] = (x7 >>> 8) & 0xff;
            o[22] = (x7 >>> 16) & 0xff;
            o[23] = (x7 >>> 24) & 0xff;

            o[24] = (x8 >>> 0) & 0xff;
            o[25] = (x8 >>> 8) & 0xff;
            o[26] = (x8 >>> 16) & 0xff;
            o[27] = (x8 >>> 24) & 0xff;

            o[28] = (x9 >>> 0) & 0xff;
            o[29] = (x9 >>> 8) & 0xff;
            o[30] = (x9 >>> 16) & 0xff;
            o[31] = (x9 >>> 24) & 0xff;
          }

          function crypto_core_salsa20(out, inp, k, c) {
            core_salsa20(out, inp, k, c);
          }

          function crypto_core_hsalsa20(out, inp, k, c) {
            core_hsalsa20(out, inp, k, c);
          }

          var sigma = new Uint8Array([
            101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32,
            107,
          ]);
          // "expand 32-byte k"

          function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
            var z = new Uint8Array(16),
              x = new Uint8Array(64);
            var u, i;
            for (i = 0; i < 16; i++) z[i] = 0;
            for (i = 0; i < 8; i++) z[i] = n[i];
            while (b >= 64) {
              crypto_core_salsa20(x, z, k, sigma);
              for (i = 0; i < 64; i++) c[cpos + i] = m[mpos + i] ^ x[i];
              u = 1;
              for (i = 8; i < 16; i++) {
                u = (u + (z[i] & 0xff)) | 0;
                z[i] = u & 0xff;
                u >>>= 8;
              }
              b -= 64;
              cpos += 64;
              mpos += 64;
            }
            if (b > 0) {
              crypto_core_salsa20(x, z, k, sigma);
              for (i = 0; i < b; i++) c[cpos + i] = m[mpos + i] ^ x[i];
            }
            return 0;
          }

          function crypto_stream_salsa20(c, cpos, b, n, k) {
            var z = new Uint8Array(16),
              x = new Uint8Array(64);
            var u, i;
            for (i = 0; i < 16; i++) z[i] = 0;
            for (i = 0; i < 8; i++) z[i] = n[i];
            while (b >= 64) {
              crypto_core_salsa20(x, z, k, sigma);
              for (i = 0; i < 64; i++) c[cpos + i] = x[i];
              u = 1;
              for (i = 8; i < 16; i++) {
                u = (u + (z[i] & 0xff)) | 0;
                z[i] = u & 0xff;
                u >>>= 8;
              }
              b -= 64;
              cpos += 64;
            }
            if (b > 0) {
              crypto_core_salsa20(x, z, k, sigma);
              for (i = 0; i < b; i++) c[cpos + i] = x[i];
            }
            return 0;
          }

          function crypto_stream(c, cpos, d, n, k) {
            var s = new Uint8Array(32);
            crypto_core_hsalsa20(s, n, k, sigma);
            var sn = new Uint8Array(8);
            for (var i = 0; i < 8; i++) sn[i] = n[i + 16];
            return crypto_stream_salsa20(c, cpos, d, sn, s);
          }

          function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
            var s = new Uint8Array(32);
            crypto_core_hsalsa20(s, n, k, sigma);
            var sn = new Uint8Array(8);
            for (var i = 0; i < 8; i++) sn[i] = n[i + 16];
            return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s);
          }

          /*
           * Port of Andrew Moon's Poly1305-donna-16. Public domain.
           * https://github.com/floodyberry/poly1305-donna
           */

          var poly1305 = function (key) {
            this.buffer = new Uint8Array(16);
            this.r = new Uint16Array(10);
            this.h = new Uint16Array(10);
            this.pad = new Uint16Array(8);
            this.leftover = 0;
            this.fin = 0;

            var t0, t1, t2, t3, t4, t5, t6, t7;

            t0 = (key[0] & 0xff) | ((key[1] & 0xff) << 8);
            this.r[0] = t0 & 0x1fff;
            t1 = (key[2] & 0xff) | ((key[3] & 0xff) << 8);
            this.r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
            t2 = (key[4] & 0xff) | ((key[5] & 0xff) << 8);
            this.r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;
            t3 = (key[6] & 0xff) | ((key[7] & 0xff) << 8);
            this.r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
            t4 = (key[8] & 0xff) | ((key[9] & 0xff) << 8);
            this.r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;
            this.r[5] = (t4 >>> 1) & 0x1ffe;
            t5 = (key[10] & 0xff) | ((key[11] & 0xff) << 8);
            this.r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
            t6 = (key[12] & 0xff) | ((key[13] & 0xff) << 8);
            this.r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;
            t7 = (key[14] & 0xff) | ((key[15] & 0xff) << 8);
            this.r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
            this.r[9] = (t7 >>> 5) & 0x007f;

            this.pad[0] = (key[16] & 0xff) | ((key[17] & 0xff) << 8);
            this.pad[1] = (key[18] & 0xff) | ((key[19] & 0xff) << 8);
            this.pad[2] = (key[20] & 0xff) | ((key[21] & 0xff) << 8);
            this.pad[3] = (key[22] & 0xff) | ((key[23] & 0xff) << 8);
            this.pad[4] = (key[24] & 0xff) | ((key[25] & 0xff) << 8);
            this.pad[5] = (key[26] & 0xff) | ((key[27] & 0xff) << 8);
            this.pad[6] = (key[28] & 0xff) | ((key[29] & 0xff) << 8);
            this.pad[7] = (key[30] & 0xff) | ((key[31] & 0xff) << 8);
          };

          poly1305.prototype.blocks = function (m, mpos, bytes) {
            var hibit = this.fin ? 0 : 1 << 11;
            var t0, t1, t2, t3, t4, t5, t6, t7, c;
            var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

            var h0 = this.h[0],
              h1 = this.h[1],
              h2 = this.h[2],
              h3 = this.h[3],
              h4 = this.h[4],
              h5 = this.h[5],
              h6 = this.h[6],
              h7 = this.h[7],
              h8 = this.h[8],
              h9 = this.h[9];

            var r0 = this.r[0],
              r1 = this.r[1],
              r2 = this.r[2],
              r3 = this.r[3],
              r4 = this.r[4],
              r5 = this.r[5],
              r6 = this.r[6],
              r7 = this.r[7],
              r8 = this.r[8],
              r9 = this.r[9];

            while (bytes >= 16) {
              t0 = (m[mpos + 0] & 0xff) | ((m[mpos + 1] & 0xff) << 8);
              h0 += t0 & 0x1fff;
              t1 = (m[mpos + 2] & 0xff) | ((m[mpos + 3] & 0xff) << 8);
              h1 += ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
              t2 = (m[mpos + 4] & 0xff) | ((m[mpos + 5] & 0xff) << 8);
              h2 += ((t1 >>> 10) | (t2 << 6)) & 0x1fff;
              t3 = (m[mpos + 6] & 0xff) | ((m[mpos + 7] & 0xff) << 8);
              h3 += ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
              t4 = (m[mpos + 8] & 0xff) | ((m[mpos + 9] & 0xff) << 8);
              h4 += ((t3 >>> 4) | (t4 << 12)) & 0x1fff;
              h5 += (t4 >>> 1) & 0x1fff;
              t5 = (m[mpos + 10] & 0xff) | ((m[mpos + 11] & 0xff) << 8);
              h6 += ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
              t6 = (m[mpos + 12] & 0xff) | ((m[mpos + 13] & 0xff) << 8);
              h7 += ((t5 >>> 11) | (t6 << 5)) & 0x1fff;
              t7 = (m[mpos + 14] & 0xff) | ((m[mpos + 15] & 0xff) << 8);
              h8 += ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
              h9 += (t7 >>> 5) | hibit;

              c = 0;

              d0 = c;
              d0 += h0 * r0;
              d0 += h1 * (5 * r9);
              d0 += h2 * (5 * r8);
              d0 += h3 * (5 * r7);
              d0 += h4 * (5 * r6);
              c = d0 >>> 13;
              d0 &= 0x1fff;
              d0 += h5 * (5 * r5);
              d0 += h6 * (5 * r4);
              d0 += h7 * (5 * r3);
              d0 += h8 * (5 * r2);
              d0 += h9 * (5 * r1);
              c += d0 >>> 13;
              d0 &= 0x1fff;

              d1 = c;
              d1 += h0 * r1;
              d1 += h1 * r0;
              d1 += h2 * (5 * r9);
              d1 += h3 * (5 * r8);
              d1 += h4 * (5 * r7);
              c = d1 >>> 13;
              d1 &= 0x1fff;
              d1 += h5 * (5 * r6);
              d1 += h6 * (5 * r5);
              d1 += h7 * (5 * r4);
              d1 += h8 * (5 * r3);
              d1 += h9 * (5 * r2);
              c += d1 >>> 13;
              d1 &= 0x1fff;

              d2 = c;
              d2 += h0 * r2;
              d2 += h1 * r1;
              d2 += h2 * r0;
              d2 += h3 * (5 * r9);
              d2 += h4 * (5 * r8);
              c = d2 >>> 13;
              d2 &= 0x1fff;
              d2 += h5 * (5 * r7);
              d2 += h6 * (5 * r6);
              d2 += h7 * (5 * r5);
              d2 += h8 * (5 * r4);
              d2 += h9 * (5 * r3);
              c += d2 >>> 13;
              d2 &= 0x1fff;

              d3 = c;
              d3 += h0 * r3;
              d3 += h1 * r2;
              d3 += h2 * r1;
              d3 += h3 * r0;
              d3 += h4 * (5 * r9);
              c = d3 >>> 13;
              d3 &= 0x1fff;
              d3 += h5 * (5 * r8);
              d3 += h6 * (5 * r7);
              d3 += h7 * (5 * r6);
              d3 += h8 * (5 * r5);
              d3 += h9 * (5 * r4);
              c += d3 >>> 13;
              d3 &= 0x1fff;

              d4 = c;
              d4 += h0 * r4;
              d4 += h1 * r3;
              d4 += h2 * r2;
              d4 += h3 * r1;
              d4 += h4 * r0;
              c = d4 >>> 13;
              d4 &= 0x1fff;
              d4 += h5 * (5 * r9);
              d4 += h6 * (5 * r8);
              d4 += h7 * (5 * r7);
              d4 += h8 * (5 * r6);
              d4 += h9 * (5 * r5);
              c += d4 >>> 13;
              d4 &= 0x1fff;

              d5 = c;
              d5 += h0 * r5;
              d5 += h1 * r4;
              d5 += h2 * r3;
              d5 += h3 * r2;
              d5 += h4 * r1;
              c = d5 >>> 13;
              d5 &= 0x1fff;
              d5 += h5 * r0;
              d5 += h6 * (5 * r9);
              d5 += h7 * (5 * r8);
              d5 += h8 * (5 * r7);
              d5 += h9 * (5 * r6);
              c += d5 >>> 13;
              d5 &= 0x1fff;

              d6 = c;
              d6 += h0 * r6;
              d6 += h1 * r5;
              d6 += h2 * r4;
              d6 += h3 * r3;
              d6 += h4 * r2;
              c = d6 >>> 13;
              d6 &= 0x1fff;
              d6 += h5 * r1;
              d6 += h6 * r0;
              d6 += h7 * (5 * r9);
              d6 += h8 * (5 * r8);
              d6 += h9 * (5 * r7);
              c += d6 >>> 13;
              d6 &= 0x1fff;

              d7 = c;
              d7 += h0 * r7;
              d7 += h1 * r6;
              d7 += h2 * r5;
              d7 += h3 * r4;
              d7 += h4 * r3;
              c = d7 >>> 13;
              d7 &= 0x1fff;
              d7 += h5 * r2;
              d7 += h6 * r1;
              d7 += h7 * r0;
              d7 += h8 * (5 * r9);
              d7 += h9 * (5 * r8);
              c += d7 >>> 13;
              d7 &= 0x1fff;

              d8 = c;
              d8 += h0 * r8;
              d8 += h1 * r7;
              d8 += h2 * r6;
              d8 += h3 * r5;
              d8 += h4 * r4;
              c = d8 >>> 13;
              d8 &= 0x1fff;
              d8 += h5 * r3;
              d8 += h6 * r2;
              d8 += h7 * r1;
              d8 += h8 * r0;
              d8 += h9 * (5 * r9);
              c += d8 >>> 13;
              d8 &= 0x1fff;

              d9 = c;
              d9 += h0 * r9;
              d9 += h1 * r8;
              d9 += h2 * r7;
              d9 += h3 * r6;
              d9 += h4 * r5;
              c = d9 >>> 13;
              d9 &= 0x1fff;
              d9 += h5 * r4;
              d9 += h6 * r3;
              d9 += h7 * r2;
              d9 += h8 * r1;
              d9 += h9 * r0;
              c += d9 >>> 13;
              d9 &= 0x1fff;

              c = ((c << 2) + c) | 0;
              c = (c + d0) | 0;
              d0 = c & 0x1fff;
              c = c >>> 13;
              d1 += c;

              h0 = d0;
              h1 = d1;
              h2 = d2;
              h3 = d3;
              h4 = d4;
              h5 = d5;
              h6 = d6;
              h7 = d7;
              h8 = d8;
              h9 = d9;

              mpos += 16;
              bytes -= 16;
            }
            this.h[0] = h0;
            this.h[1] = h1;
            this.h[2] = h2;
            this.h[3] = h3;
            this.h[4] = h4;
            this.h[5] = h5;
            this.h[6] = h6;
            this.h[7] = h7;
            this.h[8] = h8;
            this.h[9] = h9;
          };

          poly1305.prototype.finish = function (mac, macpos) {
            var g = new Uint16Array(10);
            var c, mask, f, i;

            if (this.leftover) {
              i = this.leftover;
              this.buffer[i++] = 1;
              for (; i < 16; i++) this.buffer[i] = 0;
              this.fin = 1;
              this.blocks(this.buffer, 0, 16);
            }

            c = this.h[1] >>> 13;
            this.h[1] &= 0x1fff;
            for (i = 2; i < 10; i++) {
              this.h[i] += c;
              c = this.h[i] >>> 13;
              this.h[i] &= 0x1fff;
            }
            this.h[0] += c * 5;
            c = this.h[0] >>> 13;
            this.h[0] &= 0x1fff;
            this.h[1] += c;
            c = this.h[1] >>> 13;
            this.h[1] &= 0x1fff;
            this.h[2] += c;

            g[0] = this.h[0] + 5;
            c = g[0] >>> 13;
            g[0] &= 0x1fff;
            for (i = 1; i < 10; i++) {
              g[i] = this.h[i] + c;
              c = g[i] >>> 13;
              g[i] &= 0x1fff;
            }
            g[9] -= 1 << 13;

            mask = (c ^ 1) - 1;
            for (i = 0; i < 10; i++) g[i] &= mask;
            mask = ~mask;
            for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

            this.h[0] = (this.h[0] | (this.h[1] << 13)) & 0xffff;
            this.h[1] = ((this.h[1] >>> 3) | (this.h[2] << 10)) & 0xffff;
            this.h[2] = ((this.h[2] >>> 6) | (this.h[3] << 7)) & 0xffff;
            this.h[3] = ((this.h[3] >>> 9) | (this.h[4] << 4)) & 0xffff;
            this.h[4] =
              ((this.h[4] >>> 12) | (this.h[5] << 1) | (this.h[6] << 14)) &
              0xffff;
            this.h[5] = ((this.h[6] >>> 2) | (this.h[7] << 11)) & 0xffff;
            this.h[6] = ((this.h[7] >>> 5) | (this.h[8] << 8)) & 0xffff;
            this.h[7] = ((this.h[8] >>> 8) | (this.h[9] << 5)) & 0xffff;

            f = this.h[0] + this.pad[0];
            this.h[0] = f & 0xffff;
            for (i = 1; i < 8; i++) {
              f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
              this.h[i] = f & 0xffff;
            }

            mac[macpos + 0] = (this.h[0] >>> 0) & 0xff;
            mac[macpos + 1] = (this.h[0] >>> 8) & 0xff;
            mac[macpos + 2] = (this.h[1] >>> 0) & 0xff;
            mac[macpos + 3] = (this.h[1] >>> 8) & 0xff;
            mac[macpos + 4] = (this.h[2] >>> 0) & 0xff;
            mac[macpos + 5] = (this.h[2] >>> 8) & 0xff;
            mac[macpos + 6] = (this.h[3] >>> 0) & 0xff;
            mac[macpos + 7] = (this.h[3] >>> 8) & 0xff;
            mac[macpos + 8] = (this.h[4] >>> 0) & 0xff;
            mac[macpos + 9] = (this.h[4] >>> 8) & 0xff;
            mac[macpos + 10] = (this.h[5] >>> 0) & 0xff;
            mac[macpos + 11] = (this.h[5] >>> 8) & 0xff;
            mac[macpos + 12] = (this.h[6] >>> 0) & 0xff;
            mac[macpos + 13] = (this.h[6] >>> 8) & 0xff;
            mac[macpos + 14] = (this.h[7] >>> 0) & 0xff;
            mac[macpos + 15] = (this.h[7] >>> 8) & 0xff;
          };

          poly1305.prototype.update = function (m, mpos, bytes) {
            var i, want;

            if (this.leftover) {
              want = 16 - this.leftover;
              if (want > bytes) want = bytes;
              for (i = 0; i < want; i++)
                this.buffer[this.leftover + i] = m[mpos + i];
              bytes -= want;
              mpos += want;
              this.leftover += want;
              if (this.leftover < 16) return;
              this.blocks(this.buffer, 0, 16);
              this.leftover = 0;
            }

            if (bytes >= 16) {
              want = bytes - (bytes % 16);
              this.blocks(m, mpos, want);
              mpos += want;
              bytes -= want;
            }

            if (bytes) {
              for (i = 0; i < bytes; i++)
                this.buffer[this.leftover + i] = m[mpos + i];
              this.leftover += bytes;
            }
          };

          function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
            var s = new poly1305(k);
            s.update(m, mpos, n);
            s.finish(out, outpos);
            return 0;
          }

          function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
            var x = new Uint8Array(16);
            crypto_onetimeauth(x, 0, m, mpos, n, k);
            return crypto_verify_16(h, hpos, x, 0);
          }

          function crypto_secretbox(c, m, d, n, k) {
            var i;
            if (d < 32) return -1;
            crypto_stream_xor(c, 0, m, 0, d, n, k);
            crypto_onetimeauth(c, 16, c, 32, d - 32, c);
            for (i = 0; i < 16; i++) c[i] = 0;
            return 0;
          }

          function crypto_secretbox_open(m, c, d, n, k) {
            var i;
            var x = new Uint8Array(32);
            if (d < 32) return -1;
            crypto_stream(x, 0, 32, n, k);
            if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0)
              return -1;
            crypto_stream_xor(m, 0, c, 0, d, n, k);
            for (i = 0; i < 32; i++) m[i] = 0;
            return 0;
          }

          function set25519(r, a) {
            var i;
            for (i = 0; i < 16; i++) r[i] = a[i] | 0;
          }

          function car25519(o) {
            var i,
              v,
              c = 1;
            for (i = 0; i < 16; i++) {
              v = o[i] + c + 65535;
              c = Math.floor(v / 65536);
              o[i] = v - c * 65536;
            }
            o[0] += c - 1 + 37 * (c - 1);
          }

          function sel25519(p, q, b) {
            var t,
              c = ~(b - 1);
            for (var i = 0; i < 16; i++) {
              t = c & (p[i] ^ q[i]);
              p[i] ^= t;
              q[i] ^= t;
            }
          }

          function pack25519(o, n) {
            var i, j, b;
            var m = gf(),
              t = gf();
            for (i = 0; i < 16; i++) t[i] = n[i];
            car25519(t);
            car25519(t);
            car25519(t);
            for (j = 0; j < 2; j++) {
              m[0] = t[0] - 0xffed;
              for (i = 1; i < 15; i++) {
                m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);
                m[i - 1] &= 0xffff;
              }
              m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);
              b = (m[15] >> 16) & 1;
              m[14] &= 0xffff;
              sel25519(t, m, 1 - b);
            }
            for (i = 0; i < 16; i++) {
              o[2 * i] = t[i] & 0xff;
              o[2 * i + 1] = t[i] >> 8;
            }
          }

          function neq25519(a, b) {
            var c = new Uint8Array(32),
              d = new Uint8Array(32);
            pack25519(c, a);
            pack25519(d, b);
            return crypto_verify_32(c, 0, d, 0);
          }

          function par25519(a) {
            var d = new Uint8Array(32);
            pack25519(d, a);
            return d[0] & 1;
          }

          function unpack25519(o, n) {
            var i;
            for (i = 0; i < 16; i++) o[i] = n[2 * i] + (n[2 * i + 1] << 8);
            o[15] &= 0x7fff;
          }

          function A(o, a, b) {
            for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
          }

          function Z(o, a, b) {
            for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
          }

          function M(o, a, b) {
            var v,
              c,
              t0 = 0,
              t1 = 0,
              t2 = 0,
              t3 = 0,
              t4 = 0,
              t5 = 0,
              t6 = 0,
              t7 = 0,
              t8 = 0,
              t9 = 0,
              t10 = 0,
              t11 = 0,
              t12 = 0,
              t13 = 0,
              t14 = 0,
              t15 = 0,
              t16 = 0,
              t17 = 0,
              t18 = 0,
              t19 = 0,
              t20 = 0,
              t21 = 0,
              t22 = 0,
              t23 = 0,
              t24 = 0,
              t25 = 0,
              t26 = 0,
              t27 = 0,
              t28 = 0,
              t29 = 0,
              t30 = 0,
              b0 = b[0],
              b1 = b[1],
              b2 = b[2],
              b3 = b[3],
              b4 = b[4],
              b5 = b[5],
              b6 = b[6],
              b7 = b[7],
              b8 = b[8],
              b9 = b[9],
              b10 = b[10],
              b11 = b[11],
              b12 = b[12],
              b13 = b[13],
              b14 = b[14],
              b15 = b[15];

            v = a[0];
            t0 += v * b0;
            t1 += v * b1;
            t2 += v * b2;
            t3 += v * b3;
            t4 += v * b4;
            t5 += v * b5;
            t6 += v * b6;
            t7 += v * b7;
            t8 += v * b8;
            t9 += v * b9;
            t10 += v * b10;
            t11 += v * b11;
            t12 += v * b12;
            t13 += v * b13;
            t14 += v * b14;
            t15 += v * b15;
            v = a[1];
            t1 += v * b0;
            t2 += v * b1;
            t3 += v * b2;
            t4 += v * b3;
            t5 += v * b4;
            t6 += v * b5;
            t7 += v * b6;
            t8 += v * b7;
            t9 += v * b8;
            t10 += v * b9;
            t11 += v * b10;
            t12 += v * b11;
            t13 += v * b12;
            t14 += v * b13;
            t15 += v * b14;
            t16 += v * b15;
            v = a[2];
            t2 += v * b0;
            t3 += v * b1;
            t4 += v * b2;
            t5 += v * b3;
            t6 += v * b4;
            t7 += v * b5;
            t8 += v * b6;
            t9 += v * b7;
            t10 += v * b8;
            t11 += v * b9;
            t12 += v * b10;
            t13 += v * b11;
            t14 += v * b12;
            t15 += v * b13;
            t16 += v * b14;
            t17 += v * b15;
            v = a[3];
            t3 += v * b0;
            t4 += v * b1;
            t5 += v * b2;
            t6 += v * b3;
            t7 += v * b4;
            t8 += v * b5;
            t9 += v * b6;
            t10 += v * b7;
            t11 += v * b8;
            t12 += v * b9;
            t13 += v * b10;
            t14 += v * b11;
            t15 += v * b12;
            t16 += v * b13;
            t17 += v * b14;
            t18 += v * b15;
            v = a[4];
            t4 += v * b0;
            t5 += v * b1;
            t6 += v * b2;
            t7 += v * b3;
            t8 += v * b4;
            t9 += v * b5;
            t10 += v * b6;
            t11 += v * b7;
            t12 += v * b8;
            t13 += v * b9;
            t14 += v * b10;
            t15 += v * b11;
            t16 += v * b12;
            t17 += v * b13;
            t18 += v * b14;
            t19 += v * b15;
            v = a[5];
            t5 += v * b0;
            t6 += v * b1;
            t7 += v * b2;
            t8 += v * b3;
            t9 += v * b4;
            t10 += v * b5;
            t11 += v * b6;
            t12 += v * b7;
            t13 += v * b8;
            t14 += v * b9;
            t15 += v * b10;
            t16 += v * b11;
            t17 += v * b12;
            t18 += v * b13;
            t19 += v * b14;
            t20 += v * b15;
            v = a[6];
            t6 += v * b0;
            t7 += v * b1;
            t8 += v * b2;
            t9 += v * b3;
            t10 += v * b4;
            t11 += v * b5;
            t12 += v * b6;
            t13 += v * b7;
            t14 += v * b8;
            t15 += v * b9;
            t16 += v * b10;
            t17 += v * b11;
            t18 += v * b12;
            t19 += v * b13;
            t20 += v * b14;
            t21 += v * b15;
            v = a[7];
            t7 += v * b0;
            t8 += v * b1;
            t9 += v * b2;
            t10 += v * b3;
            t11 += v * b4;
            t12 += v * b5;
            t13 += v * b6;
            t14 += v * b7;
            t15 += v * b8;
            t16 += v * b9;
            t17 += v * b10;
            t18 += v * b11;
            t19 += v * b12;
            t20 += v * b13;
            t21 += v * b14;
            t22 += v * b15;
            v = a[8];
            t8 += v * b0;
            t9 += v * b1;
            t10 += v * b2;
            t11 += v * b3;
            t12 += v * b4;
            t13 += v * b5;
            t14 += v * b6;
            t15 += v * b7;
            t16 += v * b8;
            t17 += v * b9;
            t18 += v * b10;
            t19 += v * b11;
            t20 += v * b12;
            t21 += v * b13;
            t22 += v * b14;
            t23 += v * b15;
            v = a[9];
            t9 += v * b0;
            t10 += v * b1;
            t11 += v * b2;
            t12 += v * b3;
            t13 += v * b4;
            t14 += v * b5;
            t15 += v * b6;
            t16 += v * b7;
            t17 += v * b8;
            t18 += v * b9;
            t19 += v * b10;
            t20 += v * b11;
            t21 += v * b12;
            t22 += v * b13;
            t23 += v * b14;
            t24 += v * b15;
            v = a[10];
            t10 += v * b0;
            t11 += v * b1;
            t12 += v * b2;
            t13 += v * b3;
            t14 += v * b4;
            t15 += v * b5;
            t16 += v * b6;
            t17 += v * b7;
            t18 += v * b8;
            t19 += v * b9;
            t20 += v * b10;
            t21 += v * b11;
            t22 += v * b12;
            t23 += v * b13;
            t24 += v * b14;
            t25 += v * b15;
            v = a[11];
            t11 += v * b0;
            t12 += v * b1;
            t13 += v * b2;
            t14 += v * b3;
            t15 += v * b4;
            t16 += v * b5;
            t17 += v * b6;
            t18 += v * b7;
            t19 += v * b8;
            t20 += v * b9;
            t21 += v * b10;
            t22 += v * b11;
            t23 += v * b12;
            t24 += v * b13;
            t25 += v * b14;
            t26 += v * b15;
            v = a[12];
            t12 += v * b0;
            t13 += v * b1;
            t14 += v * b2;
            t15 += v * b3;
            t16 += v * b4;
            t17 += v * b5;
            t18 += v * b6;
            t19 += v * b7;
            t20 += v * b8;
            t21 += v * b9;
            t22 += v * b10;
            t23 += v * b11;
            t24 += v * b12;
            t25 += v * b13;
            t26 += v * b14;
            t27 += v * b15;
            v = a[13];
            t13 += v * b0;
            t14 += v * b1;
            t15 += v * b2;
            t16 += v * b3;
            t17 += v * b4;
            t18 += v * b5;
            t19 += v * b6;
            t20 += v * b7;
            t21 += v * b8;
            t22 += v * b9;
            t23 += v * b10;
            t24 += v * b11;
            t25 += v * b12;
            t26 += v * b13;
            t27 += v * b14;
            t28 += v * b15;
            v = a[14];
            t14 += v * b0;
            t15 += v * b1;
            t16 += v * b2;
            t17 += v * b3;
            t18 += v * b4;
            t19 += v * b5;
            t20 += v * b6;
            t21 += v * b7;
            t22 += v * b8;
            t23 += v * b9;
            t24 += v * b10;
            t25 += v * b11;
            t26 += v * b12;
            t27 += v * b13;
            t28 += v * b14;
            t29 += v * b15;
            v = a[15];
            t15 += v * b0;
            t16 += v * b1;
            t17 += v * b2;
            t18 += v * b3;
            t19 += v * b4;
            t20 += v * b5;
            t21 += v * b6;
            t22 += v * b7;
            t23 += v * b8;
            t24 += v * b9;
            t25 += v * b10;
            t26 += v * b11;
            t27 += v * b12;
            t28 += v * b13;
            t29 += v * b14;
            t30 += v * b15;

            t0 += 38 * t16;
            t1 += 38 * t17;
            t2 += 38 * t18;
            t3 += 38 * t19;
            t4 += 38 * t20;
            t5 += 38 * t21;
            t6 += 38 * t22;
            t7 += 38 * t23;
            t8 += 38 * t24;
            t9 += 38 * t25;
            t10 += 38 * t26;
            t11 += 38 * t27;
            t12 += 38 * t28;
            t13 += 38 * t29;
            t14 += 38 * t30;
            // t15 left as is

            // first car
            c = 1;
            v = t0 + c + 65535;
            c = Math.floor(v / 65536);
            t0 = v - c * 65536;
            v = t1 + c + 65535;
            c = Math.floor(v / 65536);
            t1 = v - c * 65536;
            v = t2 + c + 65535;
            c = Math.floor(v / 65536);
            t2 = v - c * 65536;
            v = t3 + c + 65535;
            c = Math.floor(v / 65536);
            t3 = v - c * 65536;
            v = t4 + c + 65535;
            c = Math.floor(v / 65536);
            t4 = v - c * 65536;
            v = t5 + c + 65535;
            c = Math.floor(v / 65536);
            t5 = v - c * 65536;
            v = t6 + c + 65535;
            c = Math.floor(v / 65536);
            t6 = v - c * 65536;
            v = t7 + c + 65535;
            c = Math.floor(v / 65536);
            t7 = v - c * 65536;
            v = t8 + c + 65535;
            c = Math.floor(v / 65536);
            t8 = v - c * 65536;
            v = t9 + c + 65535;
            c = Math.floor(v / 65536);
            t9 = v - c * 65536;
            v = t10 + c + 65535;
            c = Math.floor(v / 65536);
            t10 = v - c * 65536;
            v = t11 + c + 65535;
            c = Math.floor(v / 65536);
            t11 = v - c * 65536;
            v = t12 + c + 65535;
            c = Math.floor(v / 65536);
            t12 = v - c * 65536;
            v = t13 + c + 65535;
            c = Math.floor(v / 65536);
            t13 = v - c * 65536;
            v = t14 + c + 65535;
            c = Math.floor(v / 65536);
            t14 = v - c * 65536;
            v = t15 + c + 65535;
            c = Math.floor(v / 65536);
            t15 = v - c * 65536;
            t0 += c - 1 + 37 * (c - 1);

            // second car
            c = 1;
            v = t0 + c + 65535;
            c = Math.floor(v / 65536);
            t0 = v - c * 65536;
            v = t1 + c + 65535;
            c = Math.floor(v / 65536);
            t1 = v - c * 65536;
            v = t2 + c + 65535;
            c = Math.floor(v / 65536);
            t2 = v - c * 65536;
            v = t3 + c + 65535;
            c = Math.floor(v / 65536);
            t3 = v - c * 65536;
            v = t4 + c + 65535;
            c = Math.floor(v / 65536);
            t4 = v - c * 65536;
            v = t5 + c + 65535;
            c = Math.floor(v / 65536);
            t5 = v - c * 65536;
            v = t6 + c + 65535;
            c = Math.floor(v / 65536);
            t6 = v - c * 65536;
            v = t7 + c + 65535;
            c = Math.floor(v / 65536);
            t7 = v - c * 65536;
            v = t8 + c + 65535;
            c = Math.floor(v / 65536);
            t8 = v - c * 65536;
            v = t9 + c + 65535;
            c = Math.floor(v / 65536);
            t9 = v - c * 65536;
            v = t10 + c + 65535;
            c = Math.floor(v / 65536);
            t10 = v - c * 65536;
            v = t11 + c + 65535;
            c = Math.floor(v / 65536);
            t11 = v - c * 65536;
            v = t12 + c + 65535;
            c = Math.floor(v / 65536);
            t12 = v - c * 65536;
            v = t13 + c + 65535;
            c = Math.floor(v / 65536);
            t13 = v - c * 65536;
            v = t14 + c + 65535;
            c = Math.floor(v / 65536);
            t14 = v - c * 65536;
            v = t15 + c + 65535;
            c = Math.floor(v / 65536);
            t15 = v - c * 65536;
            t0 += c - 1 + 37 * (c - 1);

            o[0] = t0;
            o[1] = t1;
            o[2] = t2;
            o[3] = t3;
            o[4] = t4;
            o[5] = t5;
            o[6] = t6;
            o[7] = t7;
            o[8] = t8;
            o[9] = t9;
            o[10] = t10;
            o[11] = t11;
            o[12] = t12;
            o[13] = t13;
            o[14] = t14;
            o[15] = t15;
          }

          function S(o, a) {
            M(o, a, a);
          }

          function inv25519(o, i) {
            var c = gf();
            var a;
            for (a = 0; a < 16; a++) c[a] = i[a];
            for (a = 253; a >= 0; a--) {
              S(c, c);
              if (a !== 2 && a !== 4) M(c, c, i);
            }
            for (a = 0; a < 16; a++) o[a] = c[a];
          }

          function pow2523(o, i) {
            var c = gf();
            var a;
            for (a = 0; a < 16; a++) c[a] = i[a];
            for (a = 250; a >= 0; a--) {
              S(c, c);
              if (a !== 1) M(c, c, i);
            }
            for (a = 0; a < 16; a++) o[a] = c[a];
          }

          function crypto_scalarmult(q, n, p) {
            var z = new Uint8Array(32);
            var x = new Float64Array(80),
              r,
              i;
            var a = gf(),
              b = gf(),
              c = gf(),
              d = gf(),
              e = gf(),
              f = gf();
            for (i = 0; i < 31; i++) z[i] = n[i];
            z[31] = (n[31] & 127) | 64;
            z[0] &= 248;
            unpack25519(x, p);
            for (i = 0; i < 16; i++) {
              b[i] = x[i];
              d[i] = a[i] = c[i] = 0;
            }
            a[0] = d[0] = 1;
            for (i = 254; i >= 0; --i) {
              r = (z[i >>> 3] >>> (i & 7)) & 1;
              sel25519(a, b, r);
              sel25519(c, d, r);
              A(e, a, c);
              Z(a, a, c);
              A(c, b, d);
              Z(b, b, d);
              S(d, e);
              S(f, a);
              M(a, c, a);
              M(c, b, e);
              A(e, a, c);
              Z(a, a, c);
              S(b, a);
              Z(c, d, f);
              M(a, c, _121665);
              A(a, a, d);
              M(c, c, a);
              M(a, d, f);
              M(d, b, x);
              S(b, e);
              sel25519(a, b, r);
              sel25519(c, d, r);
            }
            for (i = 0; i < 16; i++) {
              x[i + 16] = a[i];
              x[i + 32] = c[i];
              x[i + 48] = b[i];
              x[i + 64] = d[i];
            }
            var x32 = x.subarray(32);
            var x16 = x.subarray(16);
            inv25519(x32, x32);
            M(x16, x16, x32);
            pack25519(q, x16);
            return 0;
          }

          function crypto_scalarmult_base(q, n) {
            return crypto_scalarmult(q, n, _9);
          }

          function crypto_box_keypair(y, x) {
            randombytes(x, 32);
            return crypto_scalarmult_base(y, x);
          }

          function crypto_box_beforenm(k, y, x) {
            var s = new Uint8Array(32);
            crypto_scalarmult(s, x, y);
            return crypto_core_hsalsa20(k, _0, s, sigma);
          }

          var crypto_box_afternm = crypto_secretbox;
          var crypto_box_open_afternm = crypto_secretbox_open;

          function crypto_box(c, m, d, n, y, x) {
            var k = new Uint8Array(32);
            crypto_box_beforenm(k, y, x);
            return crypto_box_afternm(c, m, d, n, k);
          }

          function crypto_box_open(m, c, d, n, y, x) {
            var k = new Uint8Array(32);
            crypto_box_beforenm(k, y, x);
            return crypto_box_open_afternm(m, c, d, n, k);
          }

          var K = [
            0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf,
            0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538,
            0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5,
            0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
            0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74,
            0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235,
            0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786,
            0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
            0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc,
            0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab,
            0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7,
            0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
            0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85,
            0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed,
            0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb,
            0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
            0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70,
            0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218,
            0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070,
            0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
            0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3,
            0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373,
            0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f,
            0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
            0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7,
            0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c,
            0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f,
            0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
            0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5,
            0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc,
            0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c,
            0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817,
          ];

          function crypto_hashblocks_hl(hh, hl, m, n) {
            var wh = new Int32Array(16),
              wl = new Int32Array(16),
              bh0,
              bh1,
              bh2,
              bh3,
              bh4,
              bh5,
              bh6,
              bh7,
              bl0,
              bl1,
              bl2,
              bl3,
              bl4,
              bl5,
              bl6,
              bl7,
              th,
              tl,
              i,
              j,
              h,
              l,
              a,
              b,
              c,
              d;

            var ah0 = hh[0],
              ah1 = hh[1],
              ah2 = hh[2],
              ah3 = hh[3],
              ah4 = hh[4],
              ah5 = hh[5],
              ah6 = hh[6],
              ah7 = hh[7],
              al0 = hl[0],
              al1 = hl[1],
              al2 = hl[2],
              al3 = hl[3],
              al4 = hl[4],
              al5 = hl[5],
              al6 = hl[6],
              al7 = hl[7];

            var pos = 0;
            while (n >= 128) {
              for (i = 0; i < 16; i++) {
                j = 8 * i + pos;
                wh[i] =
                  (m[j + 0] << 24) |
                  (m[j + 1] << 16) |
                  (m[j + 2] << 8) |
                  m[j + 3];
                wl[i] =
                  (m[j + 4] << 24) |
                  (m[j + 5] << 16) |
                  (m[j + 6] << 8) |
                  m[j + 7];
              }
              for (i = 0; i < 80; i++) {
                bh0 = ah0;
                bh1 = ah1;
                bh2 = ah2;
                bh3 = ah3;
                bh4 = ah4;
                bh5 = ah5;
                bh6 = ah6;
                bh7 = ah7;

                bl0 = al0;
                bl1 = al1;
                bl2 = al2;
                bl3 = al3;
                bl4 = al4;
                bl5 = al5;
                bl6 = al6;
                bl7 = al7;

                // add
                h = ah7;
                l = al7;

                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;

                // Sigma1
                h =
                  ((ah4 >>> 14) | (al4 << (32 - 14))) ^
                  ((ah4 >>> 18) | (al4 << (32 - 18))) ^
                  ((al4 >>> (41 - 32)) | (ah4 << (32 - (41 - 32))));
                l =
                  ((al4 >>> 14) | (ah4 << (32 - 14))) ^
                  ((al4 >>> 18) | (ah4 << (32 - 18))) ^
                  ((ah4 >>> (41 - 32)) | (al4 << (32 - (41 - 32))));

                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;

                // Ch
                h = (ah4 & ah5) ^ (~ah4 & ah6);
                l = (al4 & al5) ^ (~al4 & al6);

                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;

                // K
                h = K[i * 2];
                l = K[i * 2 + 1];

                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;

                // w
                h = wh[i % 16];
                l = wl[i % 16];

                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;

                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;

                th = (c & 0xffff) | (d << 16);
                tl = (a & 0xffff) | (b << 16);

                // add
                h = th;
                l = tl;

                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;

                // Sigma0
                h =
                  ((ah0 >>> 28) | (al0 << (32 - 28))) ^
                  ((al0 >>> (34 - 32)) | (ah0 << (32 - (34 - 32)))) ^
                  ((al0 >>> (39 - 32)) | (ah0 << (32 - (39 - 32))));
                l =
                  ((al0 >>> 28) | (ah0 << (32 - 28))) ^
                  ((ah0 >>> (34 - 32)) | (al0 << (32 - (34 - 32)))) ^
                  ((ah0 >>> (39 - 32)) | (al0 << (32 - (39 - 32))));

                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;

                // Maj
                h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
                l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;

                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;

                bh7 = (c & 0xffff) | (d << 16);
                bl7 = (a & 0xffff) | (b << 16);

                // add
                h = bh3;
                l = bl3;

                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;

                h = th;
                l = tl;

                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;

                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;

                bh3 = (c & 0xffff) | (d << 16);
                bl3 = (a & 0xffff) | (b << 16);

                ah1 = bh0;
                ah2 = bh1;
                ah3 = bh2;
                ah4 = bh3;
                ah5 = bh4;
                ah6 = bh5;
                ah7 = bh6;
                ah0 = bh7;

                al1 = bl0;
                al2 = bl1;
                al3 = bl2;
                al4 = bl3;
                al5 = bl4;
                al6 = bl5;
                al7 = bl6;
                al0 = bl7;

                if (i % 16 === 15) {
                  for (j = 0; j < 16; j++) {
                    // add
                    h = wh[j];
                    l = wl[j];

                    a = l & 0xffff;
                    b = l >>> 16;
                    c = h & 0xffff;
                    d = h >>> 16;

                    h = wh[(j + 9) % 16];
                    l = wl[(j + 9) % 16];

                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    // sigma0
                    th = wh[(j + 1) % 16];
                    tl = wl[(j + 1) % 16];
                    h =
                      ((th >>> 1) | (tl << (32 - 1))) ^
                      ((th >>> 8) | (tl << (32 - 8))) ^
                      (th >>> 7);
                    l =
                      ((tl >>> 1) | (th << (32 - 1))) ^
                      ((tl >>> 8) | (th << (32 - 8))) ^
                      ((tl >>> 7) | (th << (32 - 7)));

                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    // sigma1
                    th = wh[(j + 14) % 16];
                    tl = wl[(j + 14) % 16];
                    h =
                      ((th >>> 19) | (tl << (32 - 19))) ^
                      ((tl >>> (61 - 32)) | (th << (32 - (61 - 32)))) ^
                      (th >>> 6);
                    l =
                      ((tl >>> 19) | (th << (32 - 19))) ^
                      ((th >>> (61 - 32)) | (tl << (32 - (61 - 32)))) ^
                      ((tl >>> 6) | (th << (32 - 6)));

                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    wh[j] = (c & 0xffff) | (d << 16);
                    wl[j] = (a & 0xffff) | (b << 16);
                  }
                }
              }

              // add
              h = ah0;
              l = al0;

              a = l & 0xffff;
              b = l >>> 16;
              c = h & 0xffff;
              d = h >>> 16;

              h = hh[0];
              l = hl[0];

              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;

              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;

              hh[0] = ah0 = (c & 0xffff) | (d << 16);
              hl[0] = al0 = (a & 0xffff) | (b << 16);

              h = ah1;
              l = al1;

              a = l & 0xffff;
              b = l >>> 16;
              c = h & 0xffff;
              d = h >>> 16;

              h = hh[1];
              l = hl[1];

              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;

              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;

              hh[1] = ah1 = (c & 0xffff) | (d << 16);
              hl[1] = al1 = (a & 0xffff) | (b << 16);

              h = ah2;
              l = al2;

              a = l & 0xffff;
              b = l >>> 16;
              c = h & 0xffff;
              d = h >>> 16;

              h = hh[2];
              l = hl[2];

              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;

              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;

              hh[2] = ah2 = (c & 0xffff) | (d << 16);
              hl[2] = al2 = (a & 0xffff) | (b << 16);

              h = ah3;
              l = al3;

              a = l & 0xffff;
              b = l >>> 16;
              c = h & 0xffff;
              d = h >>> 16;

              h = hh[3];
              l = hl[3];

              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;

              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;

              hh[3] = ah3 = (c & 0xffff) | (d << 16);
              hl[3] = al3 = (a & 0xffff) | (b << 16);

              h = ah4;
              l = al4;

              a = l & 0xffff;
              b = l >>> 16;
              c = h & 0xffff;
              d = h >>> 16;

              h = hh[4];
              l = hl[4];

              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;

              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;

              hh[4] = ah4 = (c & 0xffff) | (d << 16);
              hl[4] = al4 = (a & 0xffff) | (b << 16);

              h = ah5;
              l = al5;

              a = l & 0xffff;
              b = l >>> 16;
              c = h & 0xffff;
              d = h >>> 16;

              h = hh[5];
              l = hl[5];

              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;

              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;

              hh[5] = ah5 = (c & 0xffff) | (d << 16);
              hl[5] = al5 = (a & 0xffff) | (b << 16);

              h = ah6;
              l = al6;

              a = l & 0xffff;
              b = l >>> 16;
              c = h & 0xffff;
              d = h >>> 16;

              h = hh[6];
              l = hl[6];

              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;

              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;

              hh[6] = ah6 = (c & 0xffff) | (d << 16);
              hl[6] = al6 = (a & 0xffff) | (b << 16);

              h = ah7;
              l = al7;

              a = l & 0xffff;
              b = l >>> 16;
              c = h & 0xffff;
              d = h >>> 16;

              h = hh[7];
              l = hl[7];

              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;

              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;

              hh[7] = ah7 = (c & 0xffff) | (d << 16);
              hl[7] = al7 = (a & 0xffff) | (b << 16);

              pos += 128;
              n -= 128;
            }

            return n;
          }

          function crypto_hash(out, m, n) {
            var hh = new Int32Array(8),
              hl = new Int32Array(8),
              x = new Uint8Array(256),
              i,
              b = n;

            hh[0] = 0x6a09e667;
            hh[1] = 0xbb67ae85;
            hh[2] = 0x3c6ef372;
            hh[3] = 0xa54ff53a;
            hh[4] = 0x510e527f;
            hh[5] = 0x9b05688c;
            hh[6] = 0x1f83d9ab;
            hh[7] = 0x5be0cd19;

            hl[0] = 0xf3bcc908;
            hl[1] = 0x84caa73b;
            hl[2] = 0xfe94f82b;
            hl[3] = 0x5f1d36f1;
            hl[4] = 0xade682d1;
            hl[5] = 0x2b3e6c1f;
            hl[6] = 0xfb41bd6b;
            hl[7] = 0x137e2179;

            crypto_hashblocks_hl(hh, hl, m, n);
            n %= 128;

            for (i = 0; i < n; i++) x[i] = m[b - n + i];
            x[n] = 128;

            n = 256 - 128 * (n < 112 ? 1 : 0);
            x[n - 9] = 0;
            ts64(x, n - 8, (b / 0x20000000) | 0, b << 3);
            crypto_hashblocks_hl(hh, hl, x, n);

            for (i = 0; i < 8; i++) ts64(out, 8 * i, hh[i], hl[i]);

            return 0;
          }

          function add(p, q) {
            var a = gf(),
              b = gf(),
              c = gf(),
              d = gf(),
              e = gf(),
              f = gf(),
              g = gf(),
              h = gf(),
              t = gf();

            Z(a, p[1], p[0]);
            Z(t, q[1], q[0]);
            M(a, a, t);
            A(b, p[0], p[1]);
            A(t, q[0], q[1]);
            M(b, b, t);
            M(c, p[3], q[3]);
            M(c, c, D2);
            M(d, p[2], q[2]);
            A(d, d, d);
            Z(e, b, a);
            Z(f, d, c);
            A(g, d, c);
            A(h, b, a);

            M(p[0], e, f);
            M(p[1], h, g);
            M(p[2], g, f);
            M(p[3], e, h);
          }

          function cswap(p, q, b) {
            var i;
            for (i = 0; i < 4; i++) {
              sel25519(p[i], q[i], b);
            }
          }

          function pack(r, p) {
            var tx = gf(),
              ty = gf(),
              zi = gf();
            inv25519(zi, p[2]);
            M(tx, p[0], zi);
            M(ty, p[1], zi);
            pack25519(r, ty);
            r[31] ^= par25519(tx) << 7;
          }

          function scalarmult(p, q, s) {
            var b, i;
            set25519(p[0], gf0);
            set25519(p[1], gf1);
            set25519(p[2], gf1);
            set25519(p[3], gf0);
            for (i = 255; i >= 0; --i) {
              b = (s[(i / 8) | 0] >> (i & 7)) & 1;
              cswap(p, q, b);
              add(q, p);
              add(p, p);
              cswap(p, q, b);
            }
          }

          function scalarbase(p, s) {
            var q = [gf(), gf(), gf(), gf()];
            set25519(q[0], X);
            set25519(q[1], Y);
            set25519(q[2], gf1);
            M(q[3], X, Y);
            scalarmult(p, q, s);
          }

          function crypto_sign_keypair(pk, sk, seeded) {
            var d = new Uint8Array(64);
            var p = [gf(), gf(), gf(), gf()];
            var i;

            if (!seeded) randombytes(sk, 32);
            crypto_hash(d, sk, 32);
            d[0] &= 248;
            d[31] &= 127;
            d[31] |= 64;

            scalarbase(p, d);
            pack(pk, p);

            for (i = 0; i < 32; i++) sk[i + 32] = pk[i];
            return 0;
          }

          var L = new Float64Array([
            0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7,
            0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0x10,
          ]);

          function modL(r, x) {
            var carry, i, j, k;
            for (i = 63; i >= 32; --i) {
              carry = 0;
              for (j = i - 32, k = i - 12; j < k; ++j) {
                x[j] += carry - 16 * x[i] * L[j - (i - 32)];
                carry = Math.floor((x[j] + 128) / 256);
                x[j] -= carry * 256;
              }
              x[j] += carry;
              x[i] = 0;
            }
            carry = 0;
            for (j = 0; j < 32; j++) {
              x[j] += carry - (x[31] >> 4) * L[j];
              carry = x[j] >> 8;
              x[j] &= 255;
            }
            for (j = 0; j < 32; j++) x[j] -= carry * L[j];
            for (i = 0; i < 32; i++) {
              x[i + 1] += x[i] >> 8;
              r[i] = x[i] & 255;
            }
          }

          function reduce(r) {
            var x = new Float64Array(64),
              i;
            for (i = 0; i < 64; i++) x[i] = r[i];
            for (i = 0; i < 64; i++) r[i] = 0;
            modL(r, x);
          }

          // Note: difference from C - smlen returned, not passed as argument.
          function crypto_sign(sm, m, n, sk) {
            var d = new Uint8Array(64),
              h = new Uint8Array(64),
              r = new Uint8Array(64);
            var i,
              j,
              x = new Float64Array(64);
            var p = [gf(), gf(), gf(), gf()];

            crypto_hash(d, sk, 32);
            d[0] &= 248;
            d[31] &= 127;
            d[31] |= 64;

            var smlen = n + 64;
            for (i = 0; i < n; i++) sm[64 + i] = m[i];
            for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

            crypto_hash(r, sm.subarray(32), n + 32);
            reduce(r);
            scalarbase(p, r);
            pack(sm, p);

            for (i = 32; i < 64; i++) sm[i] = sk[i];
            crypto_hash(h, sm, n + 64);
            reduce(h);

            for (i = 0; i < 64; i++) x[i] = 0;
            for (i = 0; i < 32; i++) x[i] = r[i];
            for (i = 0; i < 32; i++) {
              for (j = 0; j < 32; j++) {
                x[i + j] += h[i] * d[j];
              }
            }

            modL(sm.subarray(32), x);
            return smlen;
          }

          function unpackneg(r, p) {
            var t = gf(),
              chk = gf(),
              num = gf(),
              den = gf(),
              den2 = gf(),
              den4 = gf(),
              den6 = gf();

            set25519(r[2], gf1);
            unpack25519(r[1], p);
            S(num, r[1]);
            M(den, num, D);
            Z(num, num, r[2]);
            A(den, r[2], den);

            S(den2, den);
            S(den4, den2);
            M(den6, den4, den2);
            M(t, den6, num);
            M(t, t, den);

            pow2523(t, t);
            M(t, t, num);
            M(t, t, den);
            M(t, t, den);
            M(r[0], t, den);

            S(chk, r[0]);
            M(chk, chk, den);
            if (neq25519(chk, num)) M(r[0], r[0], I);

            S(chk, r[0]);
            M(chk, chk, den);
            if (neq25519(chk, num)) return -1;

            if (par25519(r[0]) === p[31] >> 7) Z(r[0], gf0, r[0]);

            M(r[3], r[0], r[1]);
            return 0;
          }

          function crypto_sign_open(m, sm, n, pk) {
            var i;
            var t = new Uint8Array(32),
              h = new Uint8Array(64);
            var p = [gf(), gf(), gf(), gf()],
              q = [gf(), gf(), gf(), gf()];

            if (n < 64) return -1;

            if (unpackneg(q, pk)) return -1;

            for (i = 0; i < n; i++) m[i] = sm[i];
            for (i = 0; i < 32; i++) m[i + 32] = pk[i];
            crypto_hash(h, m, n);
            reduce(h);
            scalarmult(p, q, h);

            scalarbase(q, sm.subarray(32));
            add(p, q);
            pack(t, p);

            n -= 64;
            if (crypto_verify_32(sm, 0, t, 0)) {
              for (i = 0; i < n; i++) m[i] = 0;
              return -1;
            }

            for (i = 0; i < n; i++) m[i] = sm[i + 64];
            return n;
          }

          var crypto_secretbox_KEYBYTES = 32,
            crypto_secretbox_NONCEBYTES = 24,
            crypto_secretbox_ZEROBYTES = 32,
            crypto_secretbox_BOXZEROBYTES = 16,
            crypto_scalarmult_BYTES = 32,
            crypto_scalarmult_SCALARBYTES = 32,
            crypto_box_PUBLICKEYBYTES = 32,
            crypto_box_SECRETKEYBYTES = 32,
            crypto_box_BEFORENMBYTES = 32,
            crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
            crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
            crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
            crypto_sign_BYTES = 64,
            crypto_sign_PUBLICKEYBYTES = 32,
            crypto_sign_SECRETKEYBYTES = 64,
            crypto_sign_SEEDBYTES = 32,
            crypto_hash_BYTES = 64;

          nacl.lowlevel = {
            crypto_core_hsalsa20: crypto_core_hsalsa20,
            crypto_stream_xor: crypto_stream_xor,
            crypto_stream: crypto_stream,
            crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
            crypto_stream_salsa20: crypto_stream_salsa20,
            crypto_onetimeauth: crypto_onetimeauth,
            crypto_onetimeauth_verify: crypto_onetimeauth_verify,
            crypto_verify_16: crypto_verify_16,
            crypto_verify_32: crypto_verify_32,
            crypto_secretbox: crypto_secretbox,
            crypto_secretbox_open: crypto_secretbox_open,
            crypto_scalarmult: crypto_scalarmult,
            crypto_scalarmult_base: crypto_scalarmult_base,
            crypto_box_beforenm: crypto_box_beforenm,
            crypto_box_afternm: crypto_box_afternm,
            crypto_box: crypto_box,
            crypto_box_open: crypto_box_open,
            crypto_box_keypair: crypto_box_keypair,
            crypto_hash: crypto_hash,
            crypto_sign: crypto_sign,
            crypto_sign_keypair: crypto_sign_keypair,
            crypto_sign_open: crypto_sign_open,

            crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
            crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
            crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
            crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
            crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
            crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
            crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
            crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
            crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
            crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
            crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
            crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
            crypto_sign_BYTES: crypto_sign_BYTES,
            crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
            crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
            crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
            crypto_hash_BYTES: crypto_hash_BYTES,

            gf: gf,
            D: D,
            L: L,
            pack25519: pack25519,
            unpack25519: unpack25519,
            M: M,
            A: A,
            S: S,
            Z: Z,
            pow2523: pow2523,
            add: add,
            set25519: set25519,
            modL: modL,
            scalarmult: scalarmult,
            scalarbase: scalarbase,
          };

          /* High-level API */

          function checkLengths(k, n) {
            if (k.length !== crypto_secretbox_KEYBYTES)
              throw new Error("bad key size");
            if (n.length !== crypto_secretbox_NONCEBYTES)
              throw new Error("bad nonce size");
          }

          function checkBoxLengths(pk, sk) {
            if (pk.length !== crypto_box_PUBLICKEYBYTES)
              throw new Error("bad public key size");
            if (sk.length !== crypto_box_SECRETKEYBYTES)
              throw new Error("bad secret key size");
          }

          function checkArrayTypes() {
            for (var i = 0; i < arguments.length; i++) {
              if (!(arguments[i] instanceof Uint8Array))
                throw new TypeError("unexpected type, use Uint8Array");
            }
          }

          function cleanup(arr) {
            for (var i = 0; i < arr.length; i++) arr[i] = 0;
          }

          nacl.randomBytes = function (n) {
            var b = new Uint8Array(n);
            randombytes(b, n);
            return b;
          };

          nacl.secretbox = function (msg, nonce, key) {
            checkArrayTypes(msg, nonce, key);
            checkLengths(key, nonce);
            var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
            var c = new Uint8Array(m.length);
            for (var i = 0; i < msg.length; i++)
              m[i + crypto_secretbox_ZEROBYTES] = msg[i];
            crypto_secretbox(c, m, m.length, nonce, key);
            return c.subarray(crypto_secretbox_BOXZEROBYTES);
          };

          nacl.secretbox.open = function (box, nonce, key) {
            checkArrayTypes(box, nonce, key);
            checkLengths(key, nonce);
            var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
            var m = new Uint8Array(c.length);
            for (var i = 0; i < box.length; i++)
              c[i + crypto_secretbox_BOXZEROBYTES] = box[i];
            if (c.length < 32) return null;
            if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0)
              return null;
            return m.subarray(crypto_secretbox_ZEROBYTES);
          };

          nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
          nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
          nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

          nacl.scalarMult = function (n, p) {
            checkArrayTypes(n, p);
            if (n.length !== crypto_scalarmult_SCALARBYTES)
              throw new Error("bad n size");
            if (p.length !== crypto_scalarmult_BYTES)
              throw new Error("bad p size");
            var q = new Uint8Array(crypto_scalarmult_BYTES);
            crypto_scalarmult(q, n, p);
            return q;
          };

          nacl.scalarMult.base = function (n) {
            checkArrayTypes(n);
            if (n.length !== crypto_scalarmult_SCALARBYTES)
              throw new Error("bad n size");
            var q = new Uint8Array(crypto_scalarmult_BYTES);
            crypto_scalarmult_base(q, n);
            return q;
          };

          nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
          nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

          nacl.box = function (msg, nonce, publicKey, secretKey) {
            var k = nacl.box.before(publicKey, secretKey);
            return nacl.secretbox(msg, nonce, k);
          };

          nacl.box.before = function (publicKey, secretKey) {
            checkArrayTypes(publicKey, secretKey);
            checkBoxLengths(publicKey, secretKey);
            var k = new Uint8Array(crypto_box_BEFORENMBYTES);
            crypto_box_beforenm(k, publicKey, secretKey);
            return k;
          };

          nacl.box.after = nacl.secretbox;

          nacl.box.open = function (msg, nonce, publicKey, secretKey) {
            var k = nacl.box.before(publicKey, secretKey);
            return nacl.secretbox.open(msg, nonce, k);
          };

          nacl.box.open.after = nacl.secretbox.open;

          nacl.box.keyPair = function () {
            var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
            var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
            crypto_box_keypair(pk, sk);
            return { publicKey: pk, secretKey: sk };
          };

          nacl.box.keyPair.fromSecretKey = function (secretKey) {
            checkArrayTypes(secretKey);
            if (secretKey.length !== crypto_box_SECRETKEYBYTES)
              throw new Error("bad secret key size");
            var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
            crypto_scalarmult_base(pk, secretKey);
            return { publicKey: pk, secretKey: new Uint8Array(secretKey) };
          };

          nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
          nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
          nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
          nacl.box.nonceLength = crypto_box_NONCEBYTES;
          nacl.box.overheadLength = nacl.secretbox.overheadLength;

          nacl.sign = function (msg, secretKey) {
            checkArrayTypes(msg, secretKey);
            if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
              throw new Error("bad secret key size");
            var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
            crypto_sign(signedMsg, msg, msg.length, secretKey);
            return signedMsg;
          };

          nacl.sign.open = function (signedMsg, publicKey) {
            checkArrayTypes(signedMsg, publicKey);
            if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
              throw new Error("bad public key size");
            var tmp = new Uint8Array(signedMsg.length);
            var mlen = crypto_sign_open(
              tmp,
              signedMsg,
              signedMsg.length,
              publicKey
            );
            if (mlen < 0) return null;
            var m = new Uint8Array(mlen);
            for (var i = 0; i < m.length; i++) m[i] = tmp[i];
            return m;
          };

          nacl.sign.detached = function (msg, secretKey) {
            var signedMsg = nacl.sign(msg, secretKey);
            var sig = new Uint8Array(crypto_sign_BYTES);
            for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
            return sig;
          };

          nacl.sign.detached.verify = function (msg, sig, publicKey) {
            checkArrayTypes(msg, sig, publicKey);
            if (sig.length !== crypto_sign_BYTES)
              throw new Error("bad signature size");
            if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
              throw new Error("bad public key size");
            var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
            var m = new Uint8Array(crypto_sign_BYTES + msg.length);
            var i;
            for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
            for (i = 0; i < msg.length; i++) sm[i + crypto_sign_BYTES] = msg[i];
            return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;
          };

          nacl.sign.keyPair = function () {
            var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
            var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
            crypto_sign_keypair(pk, sk);
            return { publicKey: pk, secretKey: sk };
          };

          nacl.sign.keyPair.fromSecretKey = function (secretKey) {
            checkArrayTypes(secretKey);
            if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
              throw new Error("bad secret key size");
            var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
            for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32 + i];
            return { publicKey: pk, secretKey: new Uint8Array(secretKey) };
          };

          nacl.sign.keyPair.fromSeed = function (seed) {
            checkArrayTypes(seed);
            if (seed.length !== crypto_sign_SEEDBYTES)
              throw new Error("bad seed size");
            var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
            var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
            for (var i = 0; i < 32; i++) sk[i] = seed[i];
            crypto_sign_keypair(pk, sk, true);
            return { publicKey: pk, secretKey: sk };
          };

          nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
          nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
          nacl.sign.seedLength = crypto_sign_SEEDBYTES;
          nacl.sign.signatureLength = crypto_sign_BYTES;

          nacl.hash = function (msg) {
            checkArrayTypes(msg);
            var h = new Uint8Array(crypto_hash_BYTES);
            crypto_hash(h, msg, msg.length);
            return h;
          };

          nacl.hash.hashLength = crypto_hash_BYTES;

          nacl.verify = function (x, y) {
            checkArrayTypes(x, y);
            // Zero length arguments are considered not equal.
            if (x.length === 0 || y.length === 0) return false;
            if (x.length !== y.length) return false;
            return vn(x, 0, y, 0, x.length) === 0 ? true : false;
          };

          nacl.setPRNG = function (fn) {
            randombytes = fn;
          };

          (function () {
            // Initialize PRNG if environment provides CSPRNG.
            // If not, methods calling randombytes will throw.
            var crypto =
              typeof self !== "undefined" ? self.crypto || self.msCrypto : null;
            if (crypto && crypto.getRandomValues) {
              // Browsers.
              var QUOTA = 65536;
              nacl.setPRNG(function (x, n) {
                var i,
                  v = new Uint8Array(n);
                for (i = 0; i < n; i += QUOTA) {
                  crypto.getRandomValues(
                    v.subarray(i, i + Math.min(n - i, QUOTA))
                  );
                }
                for (i = 0; i < n; i++) x[i] = v[i];
                cleanup(v);
              });
            } else if (true) {
              // Node.js.
              crypto = __webpack_require__(/*! crypto */ "?050b");
              if (crypto && crypto.randomBytes) {
                nacl.setPRNG(function (x, n) {
                  var i,
                    v = crypto.randomBytes(n);
                  for (i = 0; i < n; i++) x[i] = v[i];
                  cleanup(v);
                });
              }
            }
          })();
        })(
          true && module.exports
            ? module.exports
            : (self.nacl = self.nacl || {})
        );

        /***/
      },

    /***/ "../node_modules/uuid/dist/esm-browser/regex.js":
      /*!******************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/regex.js ***!
  \******************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

        /***/
      },

    /***/ "../node_modules/uuid/dist/esm-browser/rng.js":
      /*!****************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/rng.js ***!
  \****************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ rng,
          /* harmony export */
        });
        // Unique ID creation requires a high quality random # generator. In the browser we therefore
        // require the crypto API and do not support built-in fallback to lower quality random number
        // generators (like Math.random()).
        var getRandomValues;
        var rnds8 = new Uint8Array(16);
        function rng() {
          // lazy load so that environments that need to polyfill have a chance to do so
          if (!getRandomValues) {
            // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
            // find the complete implementation of crypto (msCrypto) on IE11.
            getRandomValues =
              (typeof crypto !== "undefined" &&
                crypto.getRandomValues &&
                crypto.getRandomValues.bind(crypto)) ||
              (typeof msCrypto !== "undefined" &&
                typeof msCrypto.getRandomValues === "function" &&
                msCrypto.getRandomValues.bind(msCrypto));

            if (!getRandomValues) {
              throw new Error(
                "crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported"
              );
            }
          }

          return getRandomValues(rnds8);
        }

        /***/
      },

    /***/ "../node_modules/uuid/dist/esm-browser/stringify.js":
      /*!**********************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/stringify.js ***!
  \**********************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./validate.js */ "../node_modules/uuid/dist/esm-browser/validate.js"
          );

        /**
         * Convert array of 16 byte values to UUID string format of the form:
         * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
         */

        var byteToHex = [];

        for (var i = 0; i < 256; ++i) {
          byteToHex.push((i + 0x100).toString(16).substr(1));
        }

        function stringify(arr) {
          var offset =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : 0;
          // Note: Be careful editing this code!  It's been tuned for performance
          // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
          var uuid = (
            byteToHex[arr[offset + 0]] +
            byteToHex[arr[offset + 1]] +
            byteToHex[arr[offset + 2]] +
            byteToHex[arr[offset + 3]] +
            "-" +
            byteToHex[arr[offset + 4]] +
            byteToHex[arr[offset + 5]] +
            "-" +
            byteToHex[arr[offset + 6]] +
            byteToHex[arr[offset + 7]] +
            "-" +
            byteToHex[arr[offset + 8]] +
            byteToHex[arr[offset + 9]] +
            "-" +
            byteToHex[arr[offset + 10]] +
            byteToHex[arr[offset + 11]] +
            byteToHex[arr[offset + 12]] +
            byteToHex[arr[offset + 13]] +
            byteToHex[arr[offset + 14]] +
            byteToHex[arr[offset + 15]]
          ).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
          // of the following:
          // - One or more input array values don't map to a hex octet (leading to
          // "undefined" in the uuid)
          // - Invalid input values for the RFC `version` or `variant` fields

          if (
            !(0, _validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)
          ) {
            throw TypeError("Stringified UUID is invalid");
          }

          return uuid;
        }

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          stringify;

        /***/
      },

    /***/ "../node_modules/uuid/dist/esm-browser/v4.js":
      /*!***************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/v4.js ***!
  \***************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./rng.js */ "../node_modules/uuid/dist/esm-browser/rng.js"
          );
        /* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./stringify.js */ "../node_modules/uuid/dist/esm-browser/stringify.js"
          );

        function v4(options, buf, offset) {
          options = options || {};
          var rnds =
            options.random ||
            (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

          rnds[6] = (rnds[6] & 0x0f) | 0x40;
          rnds[8] = (rnds[8] & 0x3f) | 0x80; // Copy bytes to buffer, if provided

          if (buf) {
            offset = offset || 0;

            for (var i = 0; i < 16; ++i) {
              buf[offset + i] = rnds[i];
            }

            return buf;
          }

          return (0, _stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(
            rnds
          );
        }

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = v4;

        /***/
      },

    /***/ "../node_modules/uuid/dist/esm-browser/validate.js":
      /*!*********************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/validate.js ***!
  \*********************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./regex.js */ "../node_modules/uuid/dist/esm-browser/regex.js"
          );

        function validate(uuid) {
          return (
            typeof uuid === "string" &&
            _regex_js__WEBPACK_IMPORTED_MODULE_0__["default"].test(uuid)
          );
        }

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          validate;

        /***/
      },

    /***/ "../node_modules/webextension-polyfill/dist/browser-polyfill.js":
      /*!**********************************************************************!*\
  !*** ../node_modules/webextension-polyfill/dist/browser-polyfill.js ***!
  \**********************************************************************/
      /***/ function (module, exports) {
        var __WEBPACK_AMD_DEFINE_FACTORY__,
          __WEBPACK_AMD_DEFINE_ARRAY__,
          __WEBPACK_AMD_DEFINE_RESULT__;
        (function (global, factory) {
          if (true) {
            !((__WEBPACK_AMD_DEFINE_ARRAY__ = [module]),
            (__WEBPACK_AMD_DEFINE_FACTORY__ = factory),
            (__WEBPACK_AMD_DEFINE_RESULT__ =
              typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function"
                ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(
                    exports,
                    __WEBPACK_AMD_DEFINE_ARRAY__
                  )
                : __WEBPACK_AMD_DEFINE_FACTORY__),
            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
              (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          } else {
            var mod;
          }
        })(
          typeof globalThis !== "undefined"
            ? globalThis
            : typeof self !== "undefined"
            ? self
            : this,
          function (module) {
            /* webextension-polyfill - v0.9.0 - Fri Mar 25 2022 17:00:23 */

            /* -*- Mode: indent-tabs-mode: nil; js-indent-level: 2 -*- */

            /* vim: set sts=2 sw=2 et tw=80: */

            /* This Source Code Form is subject to the terms of the Mozilla Public
             * License, v. 2.0. If a copy of the MPL was not distributed with this
             * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
            "use strict";

            if (
              typeof globalThis != "object" ||
              typeof chrome != "object" ||
              !chrome ||
              !chrome.runtime ||
              !chrome.runtime.id
            ) {
              throw new Error(
                "This script should only be loaded in a browser extension."
              );
            }

            if (
              typeof globalThis.browser === "undefined" ||
              Object.getPrototypeOf(globalThis.browser) !== Object.prototype
            ) {
              const CHROME_SEND_MESSAGE_CALLBACK_NO_RESPONSE_MESSAGE =
                "The message port closed before a response was received.";
              const SEND_RESPONSE_DEPRECATION_WARNING =
                "Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)"; // Wrapping the bulk of this polyfill in a one-time-use function is a minor
              // optimization for Firefox. Since Spidermonkey does not fully parse the
              // contents of a function until the first time it's called, and since it will
              // never actually need to be called, this allows the polyfill to be included
              // in Firefox nearly for free.

              const wrapAPIs = (extensionAPIs) => {
                // NOTE: apiMetadata is associated to the content of the api-metadata.json file
                // at build time by replacing the following "include" with the content of the
                // JSON file.
                const apiMetadata = {
                  alarms: {
                    clear: {
                      minArgs: 0,
                      maxArgs: 1,
                    },
                    clearAll: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                    get: {
                      minArgs: 0,
                      maxArgs: 1,
                    },
                    getAll: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                  },
                  bookmarks: {
                    create: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    get: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    getChildren: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    getRecent: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    getSubTree: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    getTree: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                    move: {
                      minArgs: 2,
                      maxArgs: 2,
                    },
                    remove: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    removeTree: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    search: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    update: {
                      minArgs: 2,
                      maxArgs: 2,
                    },
                  },
                  browserAction: {
                    disable: {
                      minArgs: 0,
                      maxArgs: 1,
                      fallbackToNoCallback: true,
                    },
                    enable: {
                      minArgs: 0,
                      maxArgs: 1,
                      fallbackToNoCallback: true,
                    },
                    getBadgeBackgroundColor: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    getBadgeText: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    getPopup: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    getTitle: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    openPopup: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                    setBadgeBackgroundColor: {
                      minArgs: 1,
                      maxArgs: 1,
                      fallbackToNoCallback: true,
                    },
                    setBadgeText: {
                      minArgs: 1,
                      maxArgs: 1,
                      fallbackToNoCallback: true,
                    },
                    setIcon: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    setPopup: {
                      minArgs: 1,
                      maxArgs: 1,
                      fallbackToNoCallback: true,
                    },
                    setTitle: {
                      minArgs: 1,
                      maxArgs: 1,
                      fallbackToNoCallback: true,
                    },
                  },
                  browsingData: {
                    remove: {
                      minArgs: 2,
                      maxArgs: 2,
                    },
                    removeCache: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    removeCookies: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    removeDownloads: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    removeFormData: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    removeHistory: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    removeLocalStorage: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    removePasswords: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    removePluginData: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    settings: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                  },
                  commands: {
                    getAll: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                  },
                  contextMenus: {
                    remove: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    removeAll: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                    update: {
                      minArgs: 2,
                      maxArgs: 2,
                    },
                  },
                  cookies: {
                    get: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    getAll: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    getAllCookieStores: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                    remove: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    set: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                  },
                  devtools: {
                    inspectedWindow: {
                      eval: {
                        minArgs: 1,
                        maxArgs: 2,
                        singleCallbackArg: false,
                      },
                    },
                    panels: {
                      create: {
                        minArgs: 3,
                        maxArgs: 3,
                        singleCallbackArg: true,
                      },
                      elements: {
                        createSidebarPane: {
                          minArgs: 1,
                          maxArgs: 1,
                        },
                      },
                    },
                  },
                  downloads: {
                    cancel: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    download: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    erase: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    getFileIcon: {
                      minArgs: 1,
                      maxArgs: 2,
                    },
                    open: {
                      minArgs: 1,
                      maxArgs: 1,
                      fallbackToNoCallback: true,
                    },
                    pause: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    removeFile: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    resume: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    search: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    show: {
                      minArgs: 1,
                      maxArgs: 1,
                      fallbackToNoCallback: true,
                    },
                  },
                  extension: {
                    isAllowedFileSchemeAccess: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                    isAllowedIncognitoAccess: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                  },
                  history: {
                    addUrl: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    deleteAll: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                    deleteRange: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    deleteUrl: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    getVisits: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    search: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                  },
                  i18n: {
                    detectLanguage: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    getAcceptLanguages: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                  },
                  identity: {
                    launchWebAuthFlow: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                  },
                  idle: {
                    queryState: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                  },
                  management: {
                    get: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    getAll: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                    getSelf: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                    setEnabled: {
                      minArgs: 2,
                      maxArgs: 2,
                    },
                    uninstallSelf: {
                      minArgs: 0,
                      maxArgs: 1,
                    },
                  },
                  notifications: {
                    clear: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    create: {
                      minArgs: 1,
                      maxArgs: 2,
                    },
                    getAll: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                    getPermissionLevel: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                    update: {
                      minArgs: 2,
                      maxArgs: 2,
                    },
                  },
                  pageAction: {
                    getPopup: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    getTitle: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    hide: {
                      minArgs: 1,
                      maxArgs: 1,
                      fallbackToNoCallback: true,
                    },
                    setIcon: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    setPopup: {
                      minArgs: 1,
                      maxArgs: 1,
                      fallbackToNoCallback: true,
                    },
                    setTitle: {
                      minArgs: 1,
                      maxArgs: 1,
                      fallbackToNoCallback: true,
                    },
                    show: {
                      minArgs: 1,
                      maxArgs: 1,
                      fallbackToNoCallback: true,
                    },
                  },
                  permissions: {
                    contains: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    getAll: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                    remove: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    request: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                  },
                  runtime: {
                    getBackgroundPage: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                    getPlatformInfo: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                    openOptionsPage: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                    requestUpdateCheck: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                    sendMessage: {
                      minArgs: 1,
                      maxArgs: 3,
                    },
                    sendNativeMessage: {
                      minArgs: 2,
                      maxArgs: 2,
                    },
                    setUninstallURL: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                  },
                  sessions: {
                    getDevices: {
                      minArgs: 0,
                      maxArgs: 1,
                    },
                    getRecentlyClosed: {
                      minArgs: 0,
                      maxArgs: 1,
                    },
                    restore: {
                      minArgs: 0,
                      maxArgs: 1,
                    },
                  },
                  storage: {
                    local: {
                      clear: {
                        minArgs: 0,
                        maxArgs: 0,
                      },
                      get: {
                        minArgs: 0,
                        maxArgs: 1,
                      },
                      getBytesInUse: {
                        minArgs: 0,
                        maxArgs: 1,
                      },
                      remove: {
                        minArgs: 1,
                        maxArgs: 1,
                      },
                      set: {
                        minArgs: 1,
                        maxArgs: 1,
                      },
                    },
                    managed: {
                      get: {
                        minArgs: 0,
                        maxArgs: 1,
                      },
                      getBytesInUse: {
                        minArgs: 0,
                        maxArgs: 1,
                      },
                    },
                    sync: {
                      clear: {
                        minArgs: 0,
                        maxArgs: 0,
                      },
                      get: {
                        minArgs: 0,
                        maxArgs: 1,
                      },
                      getBytesInUse: {
                        minArgs: 0,
                        maxArgs: 1,
                      },
                      remove: {
                        minArgs: 1,
                        maxArgs: 1,
                      },
                      set: {
                        minArgs: 1,
                        maxArgs: 1,
                      },
                    },
                  },
                  tabs: {
                    captureVisibleTab: {
                      minArgs: 0,
                      maxArgs: 2,
                    },
                    create: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    detectLanguage: {
                      minArgs: 0,
                      maxArgs: 1,
                    },
                    discard: {
                      minArgs: 0,
                      maxArgs: 1,
                    },
                    duplicate: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    executeScript: {
                      minArgs: 1,
                      maxArgs: 2,
                    },
                    get: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    getCurrent: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                    getZoom: {
                      minArgs: 0,
                      maxArgs: 1,
                    },
                    getZoomSettings: {
                      minArgs: 0,
                      maxArgs: 1,
                    },
                    goBack: {
                      minArgs: 0,
                      maxArgs: 1,
                    },
                    goForward: {
                      minArgs: 0,
                      maxArgs: 1,
                    },
                    highlight: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    insertCSS: {
                      minArgs: 1,
                      maxArgs: 2,
                    },
                    move: {
                      minArgs: 2,
                      maxArgs: 2,
                    },
                    query: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    reload: {
                      minArgs: 0,
                      maxArgs: 2,
                    },
                    remove: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    removeCSS: {
                      minArgs: 1,
                      maxArgs: 2,
                    },
                    sendMessage: {
                      minArgs: 2,
                      maxArgs: 3,
                    },
                    setZoom: {
                      minArgs: 1,
                      maxArgs: 2,
                    },
                    setZoomSettings: {
                      minArgs: 1,
                      maxArgs: 2,
                    },
                    update: {
                      minArgs: 1,
                      maxArgs: 2,
                    },
                  },
                  topSites: {
                    get: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                  },
                  webNavigation: {
                    getAllFrames: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    getFrame: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                  },
                  webRequest: {
                    handlerBehaviorChanged: {
                      minArgs: 0,
                      maxArgs: 0,
                    },
                  },
                  windows: {
                    create: {
                      minArgs: 0,
                      maxArgs: 1,
                    },
                    get: {
                      minArgs: 1,
                      maxArgs: 2,
                    },
                    getAll: {
                      minArgs: 0,
                      maxArgs: 1,
                    },
                    getCurrent: {
                      minArgs: 0,
                      maxArgs: 1,
                    },
                    getLastFocused: {
                      minArgs: 0,
                      maxArgs: 1,
                    },
                    remove: {
                      minArgs: 1,
                      maxArgs: 1,
                    },
                    update: {
                      minArgs: 2,
                      maxArgs: 2,
                    },
                  },
                };

                if (Object.keys(apiMetadata).length === 0) {
                  throw new Error(
                    "api-metadata.json has not been included in browser-polyfill"
                  );
                }
                /**
                 * A WeakMap subclass which creates and stores a value for any key which does
                 * not exist when accessed, but behaves exactly as an ordinary WeakMap
                 * otherwise.
                 *
                 * @param {function} createItem
                 *        A function which will be called in order to create the value for any
                 *        key which does not exist, the first time it is accessed. The
                 *        function receives, as its only argument, the key being created.
                 */

                class DefaultWeakMap extends WeakMap {
                  constructor(createItem, items = undefined) {
                    super(items);
                    this.createItem = createItem;
                  }

                  get(key) {
                    if (!this.has(key)) {
                      this.set(key, this.createItem(key));
                    }

                    return super.get(key);
                  }
                }
                /**
                 * Returns true if the given object is an object with a `then` method, and can
                 * therefore be assumed to behave as a Promise.
                 *
                 * @param {*} value The value to test.
                 * @returns {boolean} True if the value is thenable.
                 */

                const isThenable = (value) => {
                  return (
                    value &&
                    typeof value === "object" &&
                    typeof value.then === "function"
                  );
                };
                /**
                 * Creates and returns a function which, when called, will resolve or reject
                 * the given promise based on how it is called:
                 *
                 * - If, when called, `chrome.runtime.lastError` contains a non-null object,
                 *   the promise is rejected with that value.
                 * - If the function is called with exactly one argument, the promise is
                 *   resolved to that value.
                 * - Otherwise, the promise is resolved to an array containing all of the
                 *   function's arguments.
                 *
                 * @param {object} promise
                 *        An object containing the resolution and rejection functions of a
                 *        promise.
                 * @param {function} promise.resolve
                 *        The promise's resolution function.
                 * @param {function} promise.reject
                 *        The promise's rejection function.
                 * @param {object} metadata
                 *        Metadata about the wrapped method which has created the callback.
                 * @param {boolean} metadata.singleCallbackArg
                 *        Whether or not the promise is resolved with only the first
                 *        argument of the callback, alternatively an array of all the
                 *        callback arguments is resolved. By default, if the callback
                 *        function is invoked with only a single argument, that will be
                 *        resolved to the promise, while all arguments will be resolved as
                 *        an array if multiple are given.
                 *
                 * @returns {function}
                 *        The generated callback function.
                 */

                const makeCallback = (promise, metadata) => {
                  return (...callbackArgs) => {
                    if (extensionAPIs.runtime.lastError) {
                      promise.reject(
                        new Error(extensionAPIs.runtime.lastError.message)
                      );
                    } else if (
                      metadata.singleCallbackArg ||
                      (callbackArgs.length <= 1 &&
                        metadata.singleCallbackArg !== false)
                    ) {
                      promise.resolve(callbackArgs[0]);
                    } else {
                      promise.resolve(callbackArgs);
                    }
                  };
                };

                const pluralizeArguments = (numArgs) =>
                  numArgs == 1 ? "argument" : "arguments";
                /**
                 * Creates a wrapper function for a method with the given name and metadata.
                 *
                 * @param {string} name
                 *        The name of the method which is being wrapped.
                 * @param {object} metadata
                 *        Metadata about the method being wrapped.
                 * @param {integer} metadata.minArgs
                 *        The minimum number of arguments which must be passed to the
                 *        function. If called with fewer than this number of arguments, the
                 *        wrapper will raise an exception.
                 * @param {integer} metadata.maxArgs
                 *        The maximum number of arguments which may be passed to the
                 *        function. If called with more than this number of arguments, the
                 *        wrapper will raise an exception.
                 * @param {boolean} metadata.singleCallbackArg
                 *        Whether or not the promise is resolved with only the first
                 *        argument of the callback, alternatively an array of all the
                 *        callback arguments is resolved. By default, if the callback
                 *        function is invoked with only a single argument, that will be
                 *        resolved to the promise, while all arguments will be resolved as
                 *        an array if multiple are given.
                 *
                 * @returns {function(object, ...*)}
                 *       The generated wrapper function.
                 */

                const wrapAsyncFunction = (name, metadata) => {
                  return function asyncFunctionWrapper(target, ...args) {
                    if (args.length < metadata.minArgs) {
                      throw new Error(
                        `Expected at least ${
                          metadata.minArgs
                        } ${pluralizeArguments(
                          metadata.minArgs
                        )} for ${name}(), got ${args.length}`
                      );
                    }

                    if (args.length > metadata.maxArgs) {
                      throw new Error(
                        `Expected at most ${
                          metadata.maxArgs
                        } ${pluralizeArguments(
                          metadata.maxArgs
                        )} for ${name}(), got ${args.length}`
                      );
                    }

                    return new Promise((resolve, reject) => {
                      if (metadata.fallbackToNoCallback) {
                        // This API method has currently no callback on Chrome, but it return a promise on Firefox,
                        // and so the polyfill will try to call it with a callback first, and it will fallback
                        // to not passing the callback if the first call fails.
                        try {
                          target[name](
                            ...args,
                            makeCallback(
                              {
                                resolve,
                                reject,
                              },
                              metadata
                            )
                          );
                        } catch (cbError) {
                          console.warn(
                            `${name} API method doesn't seem to support the callback parameter, ` +
                              "falling back to call it without a callback: ",
                            cbError
                          );
                          target[name](...args); // Update the API method metadata, so that the next API calls will not try to
                          // use the unsupported callback anymore.

                          metadata.fallbackToNoCallback = false;
                          metadata.noCallback = true;
                          resolve();
                        }
                      } else if (metadata.noCallback) {
                        target[name](...args);
                        resolve();
                      } else {
                        target[name](
                          ...args,
                          makeCallback(
                            {
                              resolve,
                              reject,
                            },
                            metadata
                          )
                        );
                      }
                    });
                  };
                };
                /**
                 * Wraps an existing method of the target object, so that calls to it are
                 * intercepted by the given wrapper function. The wrapper function receives,
                 * as its first argument, the original `target` object, followed by each of
                 * the arguments passed to the original method.
                 *
                 * @param {object} target
                 *        The original target object that the wrapped method belongs to.
                 * @param {function} method
                 *        The method being wrapped. This is used as the target of the Proxy
                 *        object which is created to wrap the method.
                 * @param {function} wrapper
                 *        The wrapper function which is called in place of a direct invocation
                 *        of the wrapped method.
                 *
                 * @returns {Proxy<function>}
                 *        A Proxy object for the given method, which invokes the given wrapper
                 *        method in its place.
                 */

                const wrapMethod = (target, method, wrapper) => {
                  return new Proxy(method, {
                    apply(targetMethod, thisObj, args) {
                      return wrapper.call(thisObj, target, ...args);
                    },
                  });
                };

                let hasOwnProperty = Function.call.bind(
                  Object.prototype.hasOwnProperty
                );
                /**
                 * Wraps an object in a Proxy which intercepts and wraps certain methods
                 * based on the given `wrappers` and `metadata` objects.
                 *
                 * @param {object} target
                 *        The target object to wrap.
                 *
                 * @param {object} [wrappers = {}]
                 *        An object tree containing wrapper functions for special cases. Any
                 *        function present in this object tree is called in place of the
                 *        method in the same location in the `target` object tree. These
                 *        wrapper methods are invoked as described in {@see wrapMethod}.
                 *
                 * @param {object} [metadata = {}]
                 *        An object tree containing metadata used to automatically generate
                 *        Promise-based wrapper functions for asynchronous. Any function in
                 *        the `target` object tree which has a corresponding metadata object
                 *        in the same location in the `metadata` tree is replaced with an
                 *        automatically-generated wrapper function, as described in
                 *        {@see wrapAsyncFunction}
                 *
                 * @returns {Proxy<object>}
                 */

                const wrapObject = (target, wrappers = {}, metadata = {}) => {
                  let cache = Object.create(null);
                  let handlers = {
                    has(proxyTarget, prop) {
                      return prop in target || prop in cache;
                    },

                    get(proxyTarget, prop, receiver) {
                      if (prop in cache) {
                        return cache[prop];
                      }

                      if (!(prop in target)) {
                        return undefined;
                      }

                      let value = target[prop];

                      if (typeof value === "function") {
                        // This is a method on the underlying object. Check if we need to do
                        // any wrapping.
                        if (typeof wrappers[prop] === "function") {
                          // We have a special-case wrapper for this method.
                          value = wrapMethod(
                            target,
                            target[prop],
                            wrappers[prop]
                          );
                        } else if (hasOwnProperty(metadata, prop)) {
                          // This is an async method that we have metadata for. Create a
                          // Promise wrapper for it.
                          let wrapper = wrapAsyncFunction(prop, metadata[prop]);
                          value = wrapMethod(target, target[prop], wrapper);
                        } else {
                          // This is a method that we don't know or care about. Return the
                          // original method, bound to the underlying object.
                          value = value.bind(target);
                        }
                      } else if (
                        typeof value === "object" &&
                        value !== null &&
                        (hasOwnProperty(wrappers, prop) ||
                          hasOwnProperty(metadata, prop))
                      ) {
                        // This is an object that we need to do some wrapping for the children
                        // of. Create a sub-object wrapper for it with the appropriate child
                        // metadata.
                        value = wrapObject(
                          value,
                          wrappers[prop],
                          metadata[prop]
                        );
                      } else if (hasOwnProperty(metadata, "*")) {
                        // Wrap all properties in * namespace.
                        value = wrapObject(
                          value,
                          wrappers[prop],
                          metadata["*"]
                        );
                      } else {
                        // We don't need to do any wrapping for this property,
                        // so just forward all access to the underlying object.
                        Object.defineProperty(cache, prop, {
                          configurable: true,
                          enumerable: true,

                          get() {
                            return target[prop];
                          },

                          set(value) {
                            target[prop] = value;
                          },
                        });
                        return value;
                      }

                      cache[prop] = value;
                      return value;
                    },

                    set(proxyTarget, prop, value, receiver) {
                      if (prop in cache) {
                        cache[prop] = value;
                      } else {
                        target[prop] = value;
                      }

                      return true;
                    },

                    defineProperty(proxyTarget, prop, desc) {
                      return Reflect.defineProperty(cache, prop, desc);
                    },

                    deleteProperty(proxyTarget, prop) {
                      return Reflect.deleteProperty(cache, prop);
                    },
                  }; // Per contract of the Proxy API, the "get" proxy handler must return the
                  // original value of the target if that value is declared read-only and
                  // non-configurable. For this reason, we create an object with the
                  // prototype set to `target` instead of using `target` directly.
                  // Otherwise we cannot return a custom object for APIs that
                  // are declared read-only and non-configurable, such as `chrome.devtools`.
                  //
                  // The proxy handlers themselves will still use the original `target`
                  // instead of the `proxyTarget`, so that the methods and properties are
                  // dereferenced via the original targets.

                  let proxyTarget = Object.create(target);
                  return new Proxy(proxyTarget, handlers);
                };
                /**
                 * Creates a set of wrapper functions for an event object, which handles
                 * wrapping of listener functions that those messages are passed.
                 *
                 * A single wrapper is created for each listener function, and stored in a
                 * map. Subsequent calls to `addListener`, `hasListener`, or `removeListener`
                 * retrieve the original wrapper, so that  attempts to remove a
                 * previously-added listener work as expected.
                 *
                 * @param {DefaultWeakMap<function, function>} wrapperMap
                 *        A DefaultWeakMap object which will create the appropriate wrapper
                 *        for a given listener function when one does not exist, and retrieve
                 *        an existing one when it does.
                 *
                 * @returns {object}
                 */

                const wrapEvent = (wrapperMap) => ({
                  addListener(target, listener, ...args) {
                    target.addListener(wrapperMap.get(listener), ...args);
                  },

                  hasListener(target, listener) {
                    return target.hasListener(wrapperMap.get(listener));
                  },

                  removeListener(target, listener) {
                    target.removeListener(wrapperMap.get(listener));
                  },
                });

                const onRequestFinishedWrappers = new DefaultWeakMap(
                  (listener) => {
                    if (typeof listener !== "function") {
                      return listener;
                    }
                    /**
                     * Wraps an onRequestFinished listener function so that it will return a
                     * `getContent()` property which returns a `Promise` rather than using a
                     * callback API.
                     *
                     * @param {object} req
                     *        The HAR entry object representing the network request.
                     */

                    return function onRequestFinished(req) {
                      const wrappedReq = wrapObject(
                        req,
                        {},
                        /* wrappers */
                        {
                          getContent: {
                            minArgs: 0,
                            maxArgs: 0,
                          },
                        }
                      );
                      listener(wrappedReq);
                    };
                  }
                ); // Keep track if the deprecation warning has been logged at least once.

                let loggedSendResponseDeprecationWarning = false;
                const onMessageWrappers = new DefaultWeakMap((listener) => {
                  if (typeof listener !== "function") {
                    return listener;
                  }
                  /**
                   * Wraps a message listener function so that it may send responses based on
                   * its return value, rather than by returning a sentinel value and calling a
                   * callback. If the listener function returns a Promise, the response is
                   * sent when the promise either resolves or rejects.
                   *
                   * @param {*} message
                   *        The message sent by the other end of the channel.
                   * @param {object} sender
                   *        Details about the sender of the message.
                   * @param {function(*)} sendResponse
                   *        A callback which, when called with an arbitrary argument, sends
                   *        that value as a response.
                   * @returns {boolean}
                   *        True if the wrapped listener returned a Promise, which will later
                   *        yield a response. False otherwise.
                   */

                  return function onMessage(message, sender, sendResponse) {
                    let didCallSendResponse = false;
                    let wrappedSendResponse;
                    let sendResponsePromise = new Promise((resolve) => {
                      wrappedSendResponse = function (response) {
                        if (!loggedSendResponseDeprecationWarning) {
                          console.warn(
                            SEND_RESPONSE_DEPRECATION_WARNING,
                            new Error().stack
                          );
                          loggedSendResponseDeprecationWarning = true;
                        }

                        didCallSendResponse = true;
                        resolve(response);
                      };
                    });
                    let result;

                    try {
                      result = listener(message, sender, wrappedSendResponse);
                    } catch (err) {
                      result = Promise.reject(err);
                    }

                    const isResultThenable =
                      result !== true && isThenable(result); // If the listener didn't returned true or a Promise, or called
                    // wrappedSendResponse synchronously, we can exit earlier
                    // because there will be no response sent from this listener.

                    if (
                      result !== true &&
                      !isResultThenable &&
                      !didCallSendResponse
                    ) {
                      return false;
                    } // A small helper to send the message if the promise resolves
                    // and an error if the promise rejects (a wrapped sendMessage has
                    // to translate the message into a resolved promise or a rejected
                    // promise).

                    const sendPromisedResult = (promise) => {
                      promise
                        .then(
                          (msg) => {
                            // send the message value.
                            sendResponse(msg);
                          },
                          (error) => {
                            // Send a JSON representation of the error if the rejected value
                            // is an instance of error, or the object itself otherwise.
                            let message;

                            if (
                              error &&
                              (error instanceof Error ||
                                typeof error.message === "string")
                            ) {
                              message = error.message;
                            } else {
                              message = "An unexpected error occurred";
                            }

                            sendResponse({
                              __mozWebExtensionPolyfillReject__: true,
                              message,
                            });
                          }
                        )
                        .catch((err) => {
                          // Print an error on the console if unable to send the response.
                          console.error(
                            "Failed to send onMessage rejected reply",
                            err
                          );
                        });
                    }; // If the listener returned a Promise, send the resolved value as a
                    // result, otherwise wait the promise related to the wrappedSendResponse
                    // callback to resolve and send it as a response.

                    if (isResultThenable) {
                      sendPromisedResult(result);
                    } else {
                      sendPromisedResult(sendResponsePromise);
                    } // Let Chrome know that the listener is replying.

                    return true;
                  };
                });

                const wrappedSendMessageCallback = (
                  { reject, resolve },
                  reply
                ) => {
                  if (extensionAPIs.runtime.lastError) {
                    // Detect when none of the listeners replied to the sendMessage call and resolve
                    // the promise to undefined as in Firefox.
                    // See https://github.com/mozilla/webextension-polyfill/issues/130
                    if (
                      extensionAPIs.runtime.lastError.message ===
                      CHROME_SEND_MESSAGE_CALLBACK_NO_RESPONSE_MESSAGE
                    ) {
                      resolve();
                    } else {
                      reject(
                        new Error(extensionAPIs.runtime.lastError.message)
                      );
                    }
                  } else if (reply && reply.__mozWebExtensionPolyfillReject__) {
                    // Convert back the JSON representation of the error into
                    // an Error instance.
                    reject(new Error(reply.message));
                  } else {
                    resolve(reply);
                  }
                };

                const wrappedSendMessage = (
                  name,
                  metadata,
                  apiNamespaceObj,
                  ...args
                ) => {
                  if (args.length < metadata.minArgs) {
                    throw new Error(
                      `Expected at least ${
                        metadata.minArgs
                      } ${pluralizeArguments(
                        metadata.minArgs
                      )} for ${name}(), got ${args.length}`
                    );
                  }

                  if (args.length > metadata.maxArgs) {
                    throw new Error(
                      `Expected at most ${
                        metadata.maxArgs
                      } ${pluralizeArguments(
                        metadata.maxArgs
                      )} for ${name}(), got ${args.length}`
                    );
                  }

                  return new Promise((resolve, reject) => {
                    const wrappedCb = wrappedSendMessageCallback.bind(null, {
                      resolve,
                      reject,
                    });
                    args.push(wrappedCb);
                    apiNamespaceObj.sendMessage(...args);
                  });
                };

                const staticWrappers = {
                  devtools: {
                    network: {
                      onRequestFinished: wrapEvent(onRequestFinishedWrappers),
                    },
                  },
                  runtime: {
                    onMessage: wrapEvent(onMessageWrappers),
                    onMessageExternal: wrapEvent(onMessageWrappers),
                    sendMessage: wrappedSendMessage.bind(null, "sendMessage", {
                      minArgs: 1,
                      maxArgs: 3,
                    }),
                  },
                  tabs: {
                    sendMessage: wrappedSendMessage.bind(null, "sendMessage", {
                      minArgs: 2,
                      maxArgs: 3,
                    }),
                  },
                };
                const settingMetadata = {
                  clear: {
                    minArgs: 1,
                    maxArgs: 1,
                  },
                  get: {
                    minArgs: 1,
                    maxArgs: 1,
                  },
                  set: {
                    minArgs: 1,
                    maxArgs: 1,
                  },
                };
                apiMetadata.privacy = {
                  network: {
                    "*": settingMetadata,
                  },
                  services: {
                    "*": settingMetadata,
                  },
                  websites: {
                    "*": settingMetadata,
                  },
                };
                return wrapObject(extensionAPIs, staticWrappers, apiMetadata);
              }; // The build process adds a UMD wrapper around this file, which makes the
              // `module` variable available.

              module.exports = wrapAPIs(chrome);
            } else {
              module.exports = globalThis.browser;
            }
          }
        );
        //# sourceMappingURL=browser-polyfill.js.map

        /***/
      },

    /***/ "?4d2c":
      /*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
      /***/ () => {
        /* (ignored) */
        /***/
      },

    /***/ "?050b":
      /*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
      /***/ () => {
        /* (ignored) */
        /***/
      },

    /******/
  };
  /************************************************************************/
  /******/ // The module cache
  /******/ var __webpack_module_cache__ = {};
  /******/
  /******/ // The require function
  /******/ function __webpack_require__(moduleId) {
    /******/ // Check if module is in cache
    /******/ var cachedModule = __webpack_module_cache__[moduleId];
    /******/ if (cachedModule !== undefined) {
      /******/ return cachedModule.exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/ var module = (__webpack_module_cache__[moduleId] = {
      /******/ // no module.id needed
      /******/ // no module.loaded needed
      /******/ exports: {},
      /******/
    });
    /******/
    /******/ // Execute the module function
    /******/ __webpack_modules__[moduleId].call(
      module.exports,
      module,
      module.exports,
      __webpack_require__
    );
    /******/
    /******/ // Return the exports of the module
    /******/ return module.exports;
    /******/
  }
  /******/
  /************************************************************************/
  /******/ /* webpack/runtime/compat get default export */
  /******/ (() => {
    /******/ // getDefaultExport function for compatibility with non-harmony modules
    /******/ __webpack_require__.n = (module) => {
      /******/ var getter =
        module && module.__esModule
          ? /******/ () => module["default"]
          : /******/ () => module;
      /******/ __webpack_require__.d(getter, { a: getter });
      /******/ return getter;
      /******/
    };
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/define property getters */
  /******/ (() => {
    /******/ // define getter functions for harmony exports
    /******/ __webpack_require__.d = (exports, definition) => {
      /******/ for (var key in definition) {
        /******/ if (
          __webpack_require__.o(definition, key) &&
          !__webpack_require__.o(exports, key)
        ) {
          /******/ Object.defineProperty(exports, key, {
            enumerable: true,
            get: definition[key],
          });
          /******/
        }
        /******/
      }
      /******/
    };
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/hasOwnProperty shorthand */
  /******/ (() => {
    /******/ __webpack_require__.o = (obj, prop) =>
      Object.prototype.hasOwnProperty.call(obj, prop);
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/make namespace object */
  /******/ (() => {
    /******/ // define __esModule on exports
    /******/ __webpack_require__.r = (exports) => {
      /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        /******/ Object.defineProperty(exports, Symbol.toStringTag, {
          value: "Module",
        });
        /******/
      }
      /******/ Object.defineProperty(exports, "__esModule", { value: true });
      /******/
    };
    /******/
  })();
  /******/
  /************************************************************************/
  var __webpack_exports__ = {};
  // This entry need to be wrapped in an IIFE because it need to be in strict mode.
  (() => {
    "use strict";
    /*!*****************************!*\
  !*** ./background/index.ts ***!
  \*****************************/
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ =
      __webpack_require__(
        /*! webextension-polyfill */ "../node_modules/webextension-polyfill/dist/browser-polyfill.js"
      );
    /* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default =
      /*#__PURE__*/ __webpack_require__.n(
        webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__
      );
    /* harmony import */ var _connections__WEBPACK_IMPORTED_MODULE_1__ =
      __webpack_require__(
        /*! ./connections */ "./background/connections/index.ts"
      );
    /* harmony import */ var _shared_utils__WEBPACK_IMPORTED_MODULE_2__ =
      __webpack_require__(/*! _shared/utils */ "./shared/utils/index.ts");
    // Copyright (c) 2022, Mysten Labs, Inc.
    // SPDX-License-Identifier: Apache-2.0

    webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.onInstalled.addListener(
      (details) => {
        if (details.reason === "install") {
          (0, _shared_utils__WEBPACK_IMPORTED_MODULE_2__.openInNewTab)();
        }
      }
    );
    new _connections__WEBPACK_IMPORTED_MODULE_1__.Connections();
  })();

  /******/
})();
//# sourceMappingURL=background.js.map
